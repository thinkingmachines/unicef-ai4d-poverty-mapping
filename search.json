[
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia.html",
    "href": "test-notebooks/get_populated_grids_indonesia.html",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\nimport sys\nsys.path.append(\"../\")\nfrom povertymapping.rollout_grids import get_region_filtered_bingtile_grid\nfrom geowrangler.raster_zonal_stats import create_raster_zonal_stats\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport rasterio as rio\nfrom rasterstats import zonal_stats"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia.html#test-optimizations-for-indonesia-filtering",
    "href": "test-notebooks/get_populated_grids_indonesia.html#test-optimizations-for-indonesia-filtering",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Test Optimizations for Indonesia Filtering",
    "text": "Test Optimizations for Indonesia Filtering\n\nadmin_grids_gdf.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n    \n  \n  \n    \n      0\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n    \n    \n      1\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n    \n    \n      2\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n    \n    \n      3\n      31000101133010\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.54931, 98.30566 -0.52734...\n    \n    \n      4\n      31000101131231\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.32764 -0.50536, 98.32764 -0.48339...\n    \n  \n\n\n\n\n\nfrom povertymapping.hdx import get_hdx_file, get_unzipped_hdxfile, get_hrsl_dataset\nhdx_pop_file = get_hdx_file(REGION)\nhdx_pop_file\n\nPath('/home/jc_tm/.cache/geowrangler/hdx/idn_general_2020.tif')\n\n\n\n(hdx_pop_file.stat().st_size) / 1e9\n\n87.714317324\n\n\n\nwith rio.open(hdx_pop_file) as dst:\n    print(dst.profile)\n    print(dst.crs)\n\n{'driver': 'GTiff', 'dtype': 'float64', 'nodata': nan, 'width': 169200, 'height': 64800, 'count': 1, 'crs': CRS.from_epsg(4326), 'transform': Affine(0.0002777777777780012, 0.0, 94.99986111133225,\n       0.0, -0.0002777777777780012, 7.000138888837142), 'blockysize': 1, 'tiled': False, 'interleave': 'band'}\nEPSG:4326\n\n\n\nadmin_grids_gdf.crs\n\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\n\nhdx_pop_file.is_file()\n\nTrue"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia.html#filter-out-danau-grids",
    "href": "test-notebooks/get_populated_grids_indonesia.html#filter-out-danau-grids",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Filter out Danau grids",
    "text": "Filter out Danau grids\nFor Indonesia, we filter out the grids found to be in the admin bound Danau (English translation: lake) as it actually corresponds to grids over landlocked lakes. Running rasterstats on these grids causes it to crash as it loads a very big raster. We also assume that these areas are unpopulated as they cover bodies of water.\n\ndanau_gdf = admin_grids_gdf[admin_grids_gdf['shapeName'] == 'Danau']\ndanau_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\nadmin_grids_gdf_filtered = admin_grids_gdf[admin_grids_gdf['shapeName'] != 'Danau']\n\n\nadmin_grids_gdf_filtered.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n    \n  \n  \n    \n      0\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n    \n    \n      1\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n    \n    \n      2\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n    \n    \n      3\n      31000101133010\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.54931, 98.30566 -0.52734...\n    \n    \n      4\n      31000101131231\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.32764 -0.50536, 98.32764 -0.48339...\n    \n  \n\n\n\n\n\nadmin_grids_gdf_filtered.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 340075 entries, 0 to 340121\nData columns (total 7 columns):\n #   Column      Non-Null Count   Dtype   \n---  ------      --------------   -----   \n 0   quadkey     340075 non-null  object  \n 1   shapeName   340075 non-null  object  \n 2   shapeISO    340075 non-null  object  \n 3   shapeID     340075 non-null  object  \n 4   shapeGroup  340075 non-null  object  \n 5   shapeType   340075 non-null  object  \n 6   geometry    340075 non-null  geometry\ndtypes: geometry(1), object(6)\nmemory usage: 20.8+ MB"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia.html#process-each-grid-based-on-shapename",
    "href": "test-notebooks/get_populated_grids_indonesia.html#process-each-grid-based-on-shapename",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Process each grid based on shapeName",
    "text": "Process each grid based on shapeName\n\narea_list = admin_grids_gdf_filtered['shapeID'].unique()\nlen(area_list)\n\n518\n\n\n\n# area_pop_count_df_list = []\n# with rio.open(hdx_pop_file) as dst:\n#     for area in tqdm(area_list):\n#         area_grids_gdf = (\n#             admin_grids_gdf[admin_grids_gdf[\"shapeID\"] == area]\n#             .reset_index(drop=True)\n#             .copy()\n#         )\n\n#         # Get geometries and bounds for the specified area\n#         area_bounds = area_grids_gdf.total_bounds\n#         left, bottom, right, top = area_bounds\n\n#         # Get the data (np.array, affine transform) for the\n#         # window specified by the area bounds\n#         window = rio.windows.from_bounds(left, bottom, right, top, dst.transform)\n#         window_transform = dst.window_transform(window)\n#         area_population = dst.read(1, window=window)\n#         area_population = np.float32(area_population)\n\n#         # Sum up the population counts for each grid in area_grids_gdf\n#         # and store as a column 'pop_count'\n#         area_grids_gdf[\"pop_count\"] = pd.DataFrame(\n#             zonal_stats(\n#                 vectors=area_grids_gdf,\n#                 raster=area_population,\n#                 affine=window_transform,\n#                 stats=\"sum\",\n#                 all_touched=True,\n#                 nodata=np.nan,\n#             )\n#         )[\"sum\"].fillna(0, inplace=True)\n\n#         # Get dataframe containing quadkey and pop_count\n#         area_pop_count_df = area_grids_gdf[[\"quadkey\", \"pop_count\"]]\n#         area_pop_count_df_list.append(area_pop_count_df)\n\n# pop_count = pd.concat(area_pop_count_df_list)\n\n\n1+1\n\n2\n\n\n\nCHUNK_SIZE = 1000\narea_pop_count_df_list = []\nwith rio.open(hdx_pop_file) as dst:\n    for area in tqdm(area_list):\n        area_grids_gdf = (\n            admin_grids_gdf[admin_grids_gdf[\"shapeID\"] == area]\n            .reset_index(drop=True)\n            .copy()\n        )\n\n        # Loop through area in chunks\n        for chunk_num in range(len(area_grids_gdf) // CHUNK_SIZE + 1):\n            \n            start_index = chunk_num*CHUNK_SIZE\n            end_index = min(chunk_num*CHUNK_SIZE + CHUNK_SIZE, len(area_grids_gdf))\n            chunk_area_grids_gdf = area_grids_gdf[start_index:end_index].copy()\n            \n            # Get geometries and bounds for the specified chunk\n            chunk_bounds = area_grids_gdf.total_bounds\n            left, bottom, right, top = chunk_bounds\n\n            # Get the data (np.array, affine transform) for the\n            # window specified by the chunk bounds\n            window = rio.windows.from_bounds(left, bottom, right, top, dst.transform)\n            window_transform = dst.window_transform(window)\n            chunk_population = dst.read(1, window=window)\n            chunk_population = np.float32(chunk_population)\n\n            # Sum up the population counts for each grid in area_grids_gdf\n            # and store as a column 'pop_count'\n            chunk_area_grids_gdf[\"pop_count\"] = pd.DataFrame(\n                zonal_stats(\n                    vectors=chunk_area_grids_gdf,\n                    raster=chunk_population,\n                    affine=window_transform,\n                    stats=\"sum\",\n                    all_touched=True,\n                    nodata=np.nan,\n                )\n            )[\"sum\"]\n\n            chunk_area_pop_count_df = chunk_area_grids_gdf[[\"quadkey\", \"pop_count\"]]\n            area_pop_count_df_list.append(chunk_area_pop_count_df)\n\n# Combine populuation count dataframes\npop_count = pd.concat(area_pop_count_df_list)\n\n  9%|▉         | 47/518 [03:39<12:21,  1.58s/it]  \n\n\n\npop_count = pd.concat(area_pop_count_df_list)\npop_count\n\n\nlen(area_grids_gdf)"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia_prewindowed.html",
    "href": "test-notebooks/get_populated_grids_indonesia_prewindowed.html",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\nimport sys\nsys.path.append(\"../\")\nfrom povertymapping.rollout_grids import get_region_filtered_bingtile_grids, compute_raster_stats\nfrom geowrangler.raster_zonal_stats import create_raster_zonal_stats\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport rasterio as rio\nfrom rasterstats import zonal_stats"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#inspect-hdx-file",
    "href": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#inspect-hdx-file",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Inspect HDX file",
    "text": "Inspect HDX file\n\nfrom povertymapping.hdx import get_hdx_file\nhdx_pop_file = get_hdx_file(REGION)\nhdx_pop_file\n\nPath('/home/jc_tm/.cache/geowrangler/hdx/idn_general_2020.tif')\n\n\n\n(hdx_pop_file.stat().st_size) / 1e9\n\n87.714317324\n\n\n\nhdx_pop_file.is_file()\n\nTrue"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#compute-population-per-grid",
    "href": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#compute-population-per-grid",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Compute Population Per Grid",
    "text": "Compute Population Per Grid\nFor this calculation, we will calculate the population, batched based on groups calculated from the quadkey. By removing the last digits of the quadkey, we are able to get the “coarser” quadkey to which that tile belongs to. This grouping ensures that the tile groupings are geographically close to one another, which optimizes the raster window that we need to pull to calculate the population count.\n\nadmin_grids_gdf['quadkey_group'] = admin_grids_gdf['quadkey'].str[:-6]\n\n\nadmin_grids_gdf\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      quadkey_group\n    \n  \n  \n    \n      0\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n      31000101\n    \n    \n      1\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n      31000101\n    \n    \n      2\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n      31000101\n    \n    \n      3\n      31000101133010\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.54931, 98.30566 -0.52734...\n      31000101\n    \n    \n      4\n      31000101131231\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.32764 -0.50536, 98.32764 -0.48339...\n      31000101\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      340117\n      13233323210212\n      Raja Ampat\n      None\n      IDN-ADM2-3_0_0-B422\n      IDN\n      ADM2\n      POLYGON ((131.17676 0.57128, 131.17676 0.59325...\n      13233323\n    \n    \n      340118\n      13233323210230\n      Raja Ampat\n      None\n      IDN-ADM2-3_0_0-B422\n      IDN\n      ADM2\n      POLYGON ((131.17676 0.54931, 131.17676 0.57128...\n      13233323\n    \n    \n      340119\n      13233323210213\n      Raja Ampat\n      None\n      IDN-ADM2-3_0_0-B422\n      IDN\n      ADM2\n      POLYGON ((131.19873 0.57128, 131.19873 0.59325...\n      13233323\n    \n    \n      340120\n      13233323210231\n      Raja Ampat\n      None\n      IDN-ADM2-3_0_0-B422\n      IDN\n      ADM2\n      POLYGON ((131.19873 0.54931, 131.19873 0.57128...\n      13233323\n    \n    \n      340121\n      13233323210320\n      Raja Ampat\n      None\n      IDN-ADM2-3_0_0-B422\n      IDN\n      ADM2\n      POLYGON ((131.22070 0.54931, 131.22070 0.57128...\n      13233323\n    \n  \n\n340122 rows × 8 columns\n\n\n\n\n# Demonstrate how the quadkey grouping gives us geographically close grids\nquadkey_groups = list(admin_grids_gdf['quadkey_group'].unique())\ni = 9\ntest_group = quadkey_groups[i]\ngroup_gdf = admin_grids_gdf[admin_grids_gdf['quadkey_group'] == test_group]\ngroup_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\naggregation=dict(\n    column='population',\n    output='pop_count',\n    func='sum')\nextra_args=dict(nodata=np.nan)"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#test-on-1k-grids",
    "href": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#test-on-1k-grids",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Test on 1k grids",
    "text": "Test on 1k grids\n\nadmin_grids_pop_count = compute_raster_stats(\n    admin_grids_gdf.iloc[:1_000],\n    hdx_pop_file,\n    aggregation=aggregation,\n    extra_args=extra_args,\n    group_col=\"quadkey_group\",\n    max_batch_size=None,\n    n_workers=None,\n)\nadmin_grids_filtered = admin_grids_pop_count[admin_grids_pop_count[\"pop_count\"] > 0]\nadmin_grids_filtered.explore()\n\n2023-03-07 15:00:09.586 | INFO     | povertymapping.rollout_grids:compute_raster_stats:68 - Creating raster zonal stats for 1000 grids for file size 87714.317324 Mb, batched in 5 unique group/s from quadkey_group\n2023-03-07 15:00:09.591 | WARNING  | povertymapping.rollout_grids:compute_raster_stats:71 - When batching by group, output gdf rows will be ordered based on the group.\n100%|██████████| 5/5 [01:46<00:00, 21.22s/it]\n2023-03-07 15:01:55.731 | INFO     | povertymapping.rollout_grids:compute_raster_stats:86 - Completed raster zonal stats for 5 groups\n2023-03-07 15:01:55.793 | INFO     | povertymapping.rollout_grids:compute_raster_stats:88 - Concatenated raster zonal stats for 5 groups\n\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#full-run",
    "href": "test-notebooks/get_populated_grids_indonesia_prewindowed.html#full-run",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "Full run",
    "text": "Full run\n\nadmin_grids_pop_count = compute_raster_stats(\n    admin_grids_gdf,\n    hdx_pop_file,\n    aggregation=aggregation,\n    extra_args=extra_args,\n    group_col=\"quadkey_group\",\n    max_batch_size=None,\n    n_workers=None,\n)\n\n\nadmin_grids_filtered = admin_grids_pop_count[admin_grids_pop_count[\"pop_count\"] > 0]\nadmin_grids_filtered = admin_grids_filtered.reset_index(drop=True)\nadmin_grids_filtered.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 161230 entries, 0 to 161229\nData columns (total 9 columns):\n #   Column         Non-Null Count   Dtype   \n---  ------         --------------   -----   \n 0   quadkey        161230 non-null  object  \n 1   shapeName      161230 non-null  object  \n 2   shapeISO       161230 non-null  object  \n 3   shapeID        161230 non-null  object  \n 4   shapeGroup     161230 non-null  object  \n 5   shapeType      161230 non-null  object  \n 6   geometry       161230 non-null  geometry\n 7   quadkey_group  161230 non-null  object  \n 8   pop_count      161230 non-null  float64 \ndtypes: float64(1), geometry(1), object(7)\nmemory usage: 11.1+ MB\n\n\n\nadmin_grids_filtered.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      quadkey_group\n      pop_count\n    \n  \n  \n    \n      0\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n      31000101\n      185.680420\n    \n    \n      1\n      31000101131302\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.34961 -0.48339, 98.34961 -0.46142...\n      31000101\n      244.316330\n    \n    \n      2\n      31000101113301\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.37158 -0.28564, 98.37158 -0.26367...\n      31000101\n      175.907745\n    \n    \n      3\n      31000101113323\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.37158 -0.35156, 98.37158 -0.32959...\n      31000101\n      214.998383\n    \n    \n      4\n      31000101131101\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      POLYGON ((98.37158 -0.37353, 98.37158 -0.35156...\n      31000101\n      78.181221\n    \n  \n\n\n\n\n\nadmin_grids_filtered.head(20000).explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "test-notebooks/rollout_model_timor_leste.html",
    "href": "test-notebooks/rollout_model_timor_leste.html",
    "title": "Timor Leste Model Rollout Part 2 (Feature Engineering and Model Prediction on Rollout Grids)",
    "section": "",
    "text": "%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "test-notebooks/rollout_model_timor_leste.html#generate-base-features",
    "href": "test-notebooks/rollout_model_timor_leste.html#generate-base-features",
    "title": "Timor Leste Model Rollout Part 2 (Feature Engineering and Model Prediction on Rollout Grids)",
    "section": "Generate Base Features",
    "text": "Generate Base Features\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the ff. datasets from the internet.\n\nOpenStreetMap Data from Geofabrik\nOokla Internet Speed Data\nVIIRS nighttime lights data from NASA EOG\n\nOn subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\ncountry_data = admin_grids_gdf.copy()\n\n\n%%time\n# Add in OSM features\ncountry_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\n\n2023-02-20 11:25:10.603 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/butchtm/.geowrangler/osm/east-timor? False\n2023-02-20 11:25:10.605 | INFO     | povertymapping.osm:download_osm_country_data:193 - OSM Data: Re-initializing OSM country cache dir at /home/butchtm/.geowrangler/osm/east-timor...\n2023-02-20 11:25:10.608 | INFO     | povertymapping.osm:download_osm_country_data:201 - OSM Data: Downloading Geofabrik zip file...\n2023-02-20 11:25:14.181 | INFO     | geowrangler.datasets.utils:urlretrieve:25 - Retrieving https://download.geofabrik.de/asia/east-timor-latest-free.shp.zip into /home/butchtm/.geowrangler/osm/east-timor/east-timor-latest-free.shp.zip\n\n\n\n\n\n\n\n    \n      \n      100.01% [32137216/32133186 00:04<00:00]\n    \n    \n\n\n2023-02-20 11:25:19.111 | INFO     | povertymapping.osm:download_osm_country_data:205 - OSM Data: Unzipping the zip file...\n2023-02-20 11:25:19.504 | INFO     | povertymapping.osm:download_osm_country_data:212 - OSM Data: Successfully downloaded and cached OSM data for east-timor at /home/butchtm/.geowrangler/osm/east-timor!\n2023-02-20 11:25:19.505 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/butchtm/.geowrangler/osm/east-timor/gis_osm_pois_free_1.shp\n\n\nCPU times: user 2.28 s, sys: 271 ms, total: 2.56 s\nWall time: 10.4 s\n\n\n\n\n%%time\ncountry_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n2023-02-20 11:25:31.208 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/butchtm/.geowrangler/osm/east-timor? True\n2023-02-20 11:25:31.216 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/butchtm/.geowrangler/osm/east-timor/gis_osm_roads_free_1.shp\n\n\nCPU times: user 814 ms, sys: 38.6 ms, total: 853 ms\nWall time: 854 ms\n\n\n\n\n%%time\n# Add in Ookla features\ncountry_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\n\n2023-02-20 11:25:47.856 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-20 11:25:47.857 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/butchtm/.geowrangler/ookla/processed/9ffb4fa270d3223649715458afdaedc5.csv? False\n2023-02-20 11:25:47.858 | DEBUG    | povertymapping.ookla:load_type_year_data:100 - No cached data found. Processing Ookla data from scratch.\n2023-02-20 11:25:48.831 | INFO     | povertymapping.ookla:download_ookla_year_data:173 - Ookla Data: Number of available files for fixed and 2019: 4\n2023-02-20 11:25:48.833 | INFO     | povertymapping.ookla:download_ookla_year_data:186 - Ookla Data: Cached data available for fixed and 2019 at /home/butchtm/.geowrangler/ookla/fixed/2019? False\n2023-02-20 11:25:48.834 | INFO     | povertymapping.ookla:download_ookla_year_data:192 - Ookla Data: Re-initializing Ookla type/year cache dir at /home/butchtm/.geowrangler/ookla/fixed/2019...\n2023-02-20 11:25:48.839 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 1...\n2023-02-20 11:26:22.937 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 2...\n2023-02-20 11:26:50.267 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 3...\n2023-02-20 11:27:23.948 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 4...\n2023-02-20 11:28:10.686 | INFO     | povertymapping.ookla:download_ookla_year_data:211 - Ookla Data: Successfully downloaded and cached Ookla data for fixed and 2019 at /home/butchtm/.geowrangler/ookla/fixed/2019!\n2023-02-20 11:28:38.875 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 1 being loaded from /home/butchtm/.geowrangler/ookla/fixed/2019/2019-01-01_performance_fixed_tiles.parquet\n2023-02-20 11:28:51.517 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 2 being loaded from /home/butchtm/.geowrangler/ookla/fixed/2019/2019-04-01_performance_fixed_tiles.parquet\n2023-02-20 11:28:59.766 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 3 being loaded from /home/butchtm/.geowrangler/ookla/fixed/2019/2019-07-01_performance_fixed_tiles.parquet\n2023-02-20 11:29:12.478 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 4 being loaded from /home/butchtm/.geowrangler/ookla/fixed/2019/2019-10-01_performance_fixed_tiles.parquet\n2023-02-20 11:29:21.971 | DEBUG    | povertymapping.ookla:load_type_year_data:135 - Concatenating quarterly Ookla data for fixed and 2019 into one dataframe\n\n\nCPU times: user 1min 3s, sys: 27 s, total: 1min 30s\nWall time: 3min 34s\n\n\n\n\n%%time\ncountry_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n2023-02-20 11:29:34.921 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['9ffb4fa270d3223649715458afdaedc5']\n2023-02-20 11:29:34.923 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/butchtm/.geowrangler/ookla/processed/839f98fa5bce8308017ede7966cc46f8.csv? False\n2023-02-20 11:29:34.924 | DEBUG    | povertymapping.ookla:load_type_year_data:100 - No cached data found. Processing Ookla data from scratch.\n2023-02-20 11:29:34.926 | INFO     | povertymapping.ookla:download_ookla_year_data:173 - Ookla Data: Number of available files for mobile and 2019: 4\n2023-02-20 11:29:34.928 | INFO     | povertymapping.ookla:download_ookla_year_data:186 - Ookla Data: Cached data available for mobile and 2019 at /home/butchtm/.geowrangler/ookla/mobile/2019? False\n2023-02-20 11:29:34.930 | INFO     | povertymapping.ookla:download_ookla_year_data:192 - Ookla Data: Re-initializing Ookla type/year cache dir at /home/butchtm/.geowrangler/ookla/mobile/2019...\n2023-02-20 11:29:34.933 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 1...\n2023-02-20 11:29:52.794 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 2...\n2023-02-20 11:30:14.656 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 3...\n2023-02-20 11:30:44.111 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 4...\n2023-02-20 11:31:11.874 | INFO     | povertymapping.ookla:download_ookla_year_data:211 - Ookla Data: Successfully downloaded and cached Ookla data for mobile and 2019 at /home/butchtm/.geowrangler/ookla/mobile/2019!\n2023-02-20 11:31:42.933 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 1 being loaded from /home/butchtm/.geowrangler/ookla/mobile/2019/2019-01-01_performance_mobile_tiles.parquet\n2023-02-20 11:31:47.144 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 2 being loaded from /home/butchtm/.geowrangler/ookla/mobile/2019/2019-04-01_performance_mobile_tiles.parquet\n2023-02-20 11:31:51.545 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 3 being loaded from /home/butchtm/.geowrangler/ookla/mobile/2019/2019-07-01_performance_mobile_tiles.parquet\n2023-02-20 11:31:55.542 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 4 being loaded from /home/butchtm/.geowrangler/ookla/mobile/2019/2019-10-01_performance_mobile_tiles.parquet\n2023-02-20 11:31:59.378 | DEBUG    | povertymapping.ookla:load_type_year_data:135 - Concatenating quarterly Ookla data for mobile and 2019 into one dataframe\n\n\nCPU times: user 51.4 s, sys: 8.63 s, total: 1min\nWall time: 2min 24s\n\n\n\n\n%%time\n# Add in the nighttime lights features\ncountry_data = nightlights.generate_nightlights_feature(country_data, str(nightlights_year)) \n\n2023-02-20 12:12:04.537 | INFO     | povertymapping.nightlights:generate_clipped_raster:365 - Using viirs global file as source raster: /home/butchtm/.geowrangler/nightlights/global/VNL_v21_npp_2017_global_vcmslcfg_c202205302300.average.dat.tif\n2023-02-20 12:12:04.540 | INFO     | povertymapping.nightlights:clip_raster:232 - Generating clipped raster file from /home/butchtm/.geowrangler/nightlights/global/VNL_v21_npp_2017_global_vcmslcfg_c202205302300.average.dat.tif to /home/butchtm/.geowrangler/nightlights/clip/48e4902840dc8b91dc0de929a34fe6fd.tif with bounds [124.0356445   -9.51407931 127.30957028  -8.12449133] and buffer 0.1\n2023-02-20 12:12:05.358 | INFO     | povertymapping.nightlights:generate_clipped_metadata:393 - Adding metadata.json file /home/butchtm/.geowrangler/nightlights/clip/48e4902840dc8b91dc0de929a34fe6fd.metadata.json\n\n\nCPU times: user 6.03 s, sys: 370 ms, total: 6.4 s\nWall time: 6.53 s\n\n\n\nInspect the combined target country data\n\ncountry_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2024 entries, 0 to 2023\nData columns (total 69 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   quadkey                            2024 non-null   object  \n 1   shapeName                          2024 non-null   object  \n 2   shapeISO                           2024 non-null   object  \n 3   shapeID                            2024 non-null   object  \n 4   shapeGroup                         2024 non-null   object  \n 5   shapeType                          2024 non-null   object  \n 6   pop_count                          2024 non-null   float64 \n 7   geometry                           2024 non-null   geometry\n 8   poi_count                          2024 non-null   float64 \n 9   atm_count                          2024 non-null   float64 \n 10  atm_nearest                        2024 non-null   float64 \n 11  bank_count                         2024 non-null   float64 \n 12  bank_nearest                       2024 non-null   float64 \n 13  bus_station_count                  2024 non-null   float64 \n 14  bus_station_nearest                2024 non-null   float64 \n 15  cafe_count                         2024 non-null   float64 \n 16  cafe_nearest                       2024 non-null   float64 \n 17  charging_station_count             2024 non-null   float64 \n 18  charging_station_nearest           2024 non-null   float64 \n 19  courthouse_count                   2024 non-null   float64 \n 20  courthouse_nearest                 2024 non-null   float64 \n 21  dentist_count                      2024 non-null   float64 \n 22  dentist_nearest                    2024 non-null   float64 \n 23  fast_food_count                    2024 non-null   float64 \n 24  fast_food_nearest                  2024 non-null   float64 \n 25  fire_station_count                 2024 non-null   float64 \n 26  fire_station_nearest               2024 non-null   float64 \n 27  food_court_count                   2024 non-null   float64 \n 28  food_court_nearest                 2024 non-null   float64 \n 29  fuel_count                         2024 non-null   float64 \n 30  fuel_nearest                       2024 non-null   float64 \n 31  hospital_count                     2024 non-null   float64 \n 32  hospital_nearest                   2024 non-null   float64 \n 33  library_count                      2024 non-null   float64 \n 34  library_nearest                    2024 non-null   float64 \n 35  marketplace_count                  2024 non-null   float64 \n 36  marketplace_nearest                2024 non-null   float64 \n 37  pharmacy_count                     2024 non-null   float64 \n 38  pharmacy_nearest                   2024 non-null   float64 \n 39  police_count                       2024 non-null   float64 \n 40  police_nearest                     2024 non-null   float64 \n 41  post_box_count                     2024 non-null   float64 \n 42  post_box_nearest                   2024 non-null   float64 \n 43  post_office_count                  2024 non-null   float64 \n 44  post_office_nearest                2024 non-null   float64 \n 45  restaurant_count                   2024 non-null   float64 \n 46  restaurant_nearest                 2024 non-null   float64 \n 47  social_facility_count              2024 non-null   float64 \n 48  social_facility_nearest            2024 non-null   float64 \n 49  supermarket_count                  2024 non-null   float64 \n 50  supermarket_nearest                2024 non-null   float64 \n 51  townhall_count                     2024 non-null   float64 \n 52  townhall_nearest                   2024 non-null   float64 \n 53  road_count                         2024 non-null   float64 \n 54  fixed_2019_mean_avg_d_kbps_mean    43 non-null     float64 \n 55  fixed_2019_mean_avg_u_kbps_mean    43 non-null     float64 \n 56  fixed_2019_mean_avg_lat_ms_mean    43 non-null     float64 \n 57  fixed_2019_mean_num_tests_mean     43 non-null     float64 \n 58  fixed_2019_mean_num_devices_mean   43 non-null     float64 \n 59  mobile_2019_mean_avg_d_kbps_mean   316 non-null    float64 \n 60  mobile_2019_mean_avg_u_kbps_mean   316 non-null    float64 \n 61  mobile_2019_mean_avg_lat_ms_mean   316 non-null    float64 \n 62  mobile_2019_mean_num_tests_mean    316 non-null    float64 \n 63  mobile_2019_mean_num_devices_mean  316 non-null    float64 \n 64  avg_rad_min                        2024 non-null   float64 \n 65  avg_rad_max                        2024 non-null   float64 \n 66  avg_rad_mean                       2024 non-null   float64 \n 67  avg_rad_std                        2024 non-null   float64 \n 68  avg_rad_median                     2024 non-null   float64 \ndtypes: float64(62), geometry(1), object(6)\nmemory usage: 1.1+ MB\n\n\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      poi_count\n      atm_count\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      31011220203121\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      102.251936\n      POLYGON ((124.03564 -9.34067, 124.03564 -9.318...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.112404\n      0.179112\n      0.151455\n      0.018153\n      0.149703\n    \n    \n      1\n      31011220203123\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      992.492772\n      POLYGON ((124.03564 -9.36235, 124.03564 -9.340...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.145907\n      0.350220\n      0.223909\n      0.051034\n      0.207525\n    \n    \n      2\n      31011220203130\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      118.897600\n      POLYGON ((124.05762 -9.34067, 124.05762 -9.318...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.129712\n      0.187825\n      0.152679\n      0.013343\n      0.151096\n    \n    \n      3\n      31011220203132\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      513.637632\n      POLYGON ((124.05762 -9.36235, 124.05762 -9.340...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.151849\n      0.301968\n      0.195619\n      0.033749\n      0.190747\n    \n    \n      4\n      31011220203310\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      319.140940\n      POLYGON ((124.05762 -9.38403, 124.05762 -9.362...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.131346\n      0.249318\n      0.173748\n      0.027273\n      0.167033\n    \n  \n\n5 rows × 69 columns"
  },
  {
    "objectID": "test-notebooks/rollout_model_timor_leste.html#data-preparation",
    "href": "test-notebooks/rollout_model_timor_leste.html#data-preparation",
    "title": "Timor Leste Model Rollout Part 2 (Feature Engineering and Model Prediction on Rollout Grids)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# For features, drop all columns from the input country geometries\n# If you need the cluster data, refer to country_data / country_test\ninput_grid_cols = admin_grids_gdf.columns\n\n\nfeatures = country_data.drop(input_grid_cols, axis=1)\n\nfeatures.shape\n\n(2024, 61)\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2024 entries, 0 to 2023\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          2024 non-null   float64\n 1   atm_count                          2024 non-null   float64\n 2   atm_nearest                        2024 non-null   float64\n 3   bank_count                         2024 non-null   float64\n 4   bank_nearest                       2024 non-null   float64\n 5   bus_station_count                  2024 non-null   float64\n 6   bus_station_nearest                2024 non-null   float64\n 7   cafe_count                         2024 non-null   float64\n 8   cafe_nearest                       2024 non-null   float64\n 9   charging_station_count             2024 non-null   float64\n 10  charging_station_nearest           2024 non-null   float64\n 11  courthouse_count                   2024 non-null   float64\n 12  courthouse_nearest                 2024 non-null   float64\n 13  dentist_count                      2024 non-null   float64\n 14  dentist_nearest                    2024 non-null   float64\n 15  fast_food_count                    2024 non-null   float64\n 16  fast_food_nearest                  2024 non-null   float64\n 17  fire_station_count                 2024 non-null   float64\n 18  fire_station_nearest               2024 non-null   float64\n 19  food_court_count                   2024 non-null   float64\n 20  food_court_nearest                 2024 non-null   float64\n 21  fuel_count                         2024 non-null   float64\n 22  fuel_nearest                       2024 non-null   float64\n 23  hospital_count                     2024 non-null   float64\n 24  hospital_nearest                   2024 non-null   float64\n 25  library_count                      2024 non-null   float64\n 26  library_nearest                    2024 non-null   float64\n 27  marketplace_count                  2024 non-null   float64\n 28  marketplace_nearest                2024 non-null   float64\n 29  pharmacy_count                     2024 non-null   float64\n 30  pharmacy_nearest                   2024 non-null   float64\n 31  police_count                       2024 non-null   float64\n 32  police_nearest                     2024 non-null   float64\n 33  post_box_count                     2024 non-null   float64\n 34  post_box_nearest                   2024 non-null   float64\n 35  post_office_count                  2024 non-null   float64\n 36  post_office_nearest                2024 non-null   float64\n 37  restaurant_count                   2024 non-null   float64\n 38  restaurant_nearest                 2024 non-null   float64\n 39  social_facility_count              2024 non-null   float64\n 40  social_facility_nearest            2024 non-null   float64\n 41  supermarket_count                  2024 non-null   float64\n 42  supermarket_nearest                2024 non-null   float64\n 43  townhall_count                     2024 non-null   float64\n 44  townhall_nearest                   2024 non-null   float64\n 45  road_count                         2024 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean    2024 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean    2024 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean    2024 non-null   float64\n 49  fixed_2019_mean_num_tests_mean     2024 non-null   float64\n 50  fixed_2019_mean_num_devices_mean   2024 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean   2024 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean   2024 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean   2024 non-null   float64\n 54  mobile_2019_mean_num_tests_mean    2024 non-null   float64\n 55  mobile_2019_mean_num_devices_mean  2024 non-null   float64\n 56  avg_rad_min                        2024 non-null   float64\n 57  avg_rad_max                        2024 non-null   float64\n 58  avg_rad_mean                       2024 non-null   float64\n 59  avg_rad_std                        2024 non-null   float64\n 60  avg_rad_median                     2024 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.0 MB"
  },
  {
    "objectID": "test-notebooks/rollout_model_timor_leste.html#model-predictions",
    "href": "test-notebooks/rollout_model_timor_leste.html#model-predictions",
    "title": "Timor Leste Model Rollout Part 2 (Feature Engineering and Model Prediction on Rollout Grids)",
    "section": "Model Predictions",
    "text": "Model Predictions\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH,'rb') as f:\n    model = pickle.load(f)\n\n\n\nMake predictions\n\n%%time\ncountry_data['Predicted Wealth Index'] = model.predict(features)\n\nCPU times: user 27.1 ms, sys: 8.37 ms, total: 35.4 ms\nWall time: 34.2 ms\n\n\n/home/butchtm/work/povmap/fresh-povmap/env/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but RandomForestRegressor was fitted without feature names\n  warnings.warn(\n\n\n\n\nSave predictions\n\n%%time\ncountry_data.to_file(f'{REGION}_model_rollout.geojson', driver='GeoJSON')\n\n/home/butchtm/work/povmap/fresh-povmap/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,\n\n\nCPU times: user 2.77 s, sys: 4.81 ms, total: 2.78 s\nWall time: 2.78 s\n\n\n\n\nExplore Predictions\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      poi_count\n      atm_count\n      ...\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n      Predicted Wealth Index\n    \n  \n  \n    \n      0\n      31011220203121\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      102.251936\n      POLYGON ((124.03564 -9.34067, 124.03564 -9.318...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      0.112404\n      0.179112\n      0.151455\n      0.018153\n      0.149703\n      -62247.926385\n    \n    \n      1\n      31011220203123\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      992.492772\n      POLYGON ((124.03564 -9.36235, 124.03564 -9.340...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      0.145907\n      0.350220\n      0.223909\n      0.051034\n      0.207525\n      -62448.930269\n    \n    \n      2\n      31011220203130\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      118.897600\n      POLYGON ((124.05762 -9.34067, 124.05762 -9.318...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      0.129712\n      0.187825\n      0.152679\n      0.013343\n      0.151096\n      -60281.611062\n    \n    \n      3\n      31011220203132\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      513.637632\n      POLYGON ((124.05762 -9.36235, 124.05762 -9.340...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      0.151849\n      0.301968\n      0.195619\n      0.033749\n      0.190747\n      -60576.990254\n    \n    \n      4\n      31011220203310\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      319.140940\n      POLYGON ((124.05762 -9.38403, 124.05762 -9.362...\n      0.0\n      0.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      0.131346\n      0.249318\n      0.173748\n      0.027273\n      0.167033\n      -67008.037446\n    \n  \n\n5 rows × 70 columns\n\n\n\n\ncountry_data[[*input_grid_cols,'Predicted Wealth Index']].explore(column='Predicted Wealth Index')\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ncountry_data['total_pop'].corr(country_data['Predicted Wealth Index'])\n\n\nplt.scatter(country_data['total_pop'],country_data['Predicted Wealth Index'])"
  },
  {
    "objectID": "test-notebooks/new_get_populated_grids_indonesia-5k_batch.html",
    "href": "test-notebooks/new_get_populated_grids_indonesia-5k_batch.html",
    "title": "Indonesia Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "Import packages\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\n%load_ext filprofiler\n\n%load\n\n\nfrom povertymapping.rollout_grids import get_region_filtered_bingtile_grids \nimport geopandas as gpd\n\n\n\nSet global parameters\n\nREGION = 'indonesia'\nADMIN_LVL = 'ADM2'\n\n\n\nGenerate/Cache/Get per country grids\n\n# get_region_filtered_bingtile_grids?\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, filter_population=False )\n\nCPU times: user 4 µs, sys: 2 µs, total: 6 µs\nWall time: 14.1 µs\n\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL,  )\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 8.34 µs\n\n\n\n%%time\nadmin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, max_batch_size=5_000 )\n\n2023-03-01 12:16:04.667 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:114 - No cached grids file found. Generating grids file :/home/butchtm/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_populated_admin_grids.geojson\n2023-03-01 12:16:04.669 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:120 - Loading existing grids file /home/butchtm/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_admin_grids.geojson and skip gridding\n2023-03-01 12:16:30.278 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:123 - Loaded 340122 grids for region indonesia and admin level ADM2 at quadkey level 14\n2023-03-01 12:16:30.300 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:142 - Getting indonesia population data for filtering grids\n2023-03-01 12:16:32.195 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:144 - Computing population zonal stats per grid\n2023-03-01 12:16:32.196 | INFO     | povertymapping.rollout_grids:compute_raster_stats:44 - Batching call to create raster_zonal stats for 340122 grids for file size 87714317324\n2023-03-01 12:16:32.729 | INFO     | povertymapping.rollout_grids:compute_raster_stats:51 - Created 68 for 68 splits of 5000\n2023-03-01 12:16:32.730 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 0 with index (0/5001\n2023-03-01 12:23:59.323 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 1 with index (0/5001\n2023-03-01 12:31:22.401 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 2 with index (0/5001\n\n\n\nlen(admin_grids_gdf)\n\n\n\nExplore per country populated grids\n\n# admin_grids_gdf.explore()\n# admin_grids_gdf.plot()\n\n\n# admin_grids_gdf.columns\n\n\nadmin_grids_gdf.head()\n\n\nadmin_grids_gdf.info()"
  },
  {
    "objectID": "test-notebooks/new_get_populated_grids_indonesia-1k_batch.html",
    "href": "test-notebooks/new_get_populated_grids_indonesia-1k_batch.html",
    "title": "Indonesia Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "Import packages\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\nfrom povertymapping.rollout_grids import get_region_filtered_bingtile_grids \nimport geopandas as gpd\n\n\n\nSet global parameters\n\nREGION = 'indonesia'\nADMIN_LVL = 'ADM2'\n\n\n\nGenerate/Cache/Get per country grids\n\n# get_region_filtered_bingtile_grids?\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, filter_population=False )\n\nCPU times: user 1 µs, sys: 1 µs, total: 2 µs\nWall time: 4.53 µs\n\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL,  )\n\nCPU times: user 2 µs, sys: 1 µs, total: 3 µs\nWall time: 6.91 µs\n\n\n\n%%time\nadmin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, max_batch_size=1_000 )\n\n2023-03-01 16:26:35.221 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:114 - No cached grids file found. Generating grids file :/home/butchtm/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_populated_admin_grids.geojson\n2023-03-01 16:26:35.225 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:120 - Loading existing grids file /home/butchtm/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_admin_grids.geojson and skip gridding\n2023-03-01 16:27:05.481 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:123 - Loaded 340122 grids for region indonesia and admin level ADM2 at quadkey level 14\n2023-03-01 16:27:05.508 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:142 - Getting indonesia population data for filtering grids\n2023-03-01 16:27:07.352 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:144 - Computing population zonal stats per grid\n2023-03-01 16:27:07.354 | INFO     | povertymapping.rollout_grids:compute_raster_stats:44 - Batching call to create raster_zonal stats for 340122 grids for file size 87714317324\n2023-03-01 16:27:08.611 | INFO     | povertymapping.rollout_grids:compute_raster_stats:51 - Created 340 for 340 splits of 1000\n2023-03-01 16:27:08.613 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 0 with index (0/1000)\n2023-03-01 16:29:31.059 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 1 with index (0/1000)\n2023-03-01 16:31:33.138 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 2 with index (0/1000)\n2023-03-01 16:33:00.772 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 3 with index (0/1000)\n2023-03-01 16:34:28.609 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 4 with index (0/1000)\n2023-03-01 16:36:02.363 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 5 with index (0/1000)\n2023-03-01 16:37:40.868 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 6 with index (0/1000)\n2023-03-01 16:39:24.930 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 7 with index (0/1000)\n2023-03-01 16:41:18.819 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 8 with index (0/1000)\n2023-03-01 16:42:49.264 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 9 with index (0/1000)\n2023-03-01 16:44:17.256 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 10 with index (0/1000)\n2023-03-01 16:46:46.890 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 11 with index (0/1000)\n2023-03-01 16:49:52.316 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 12 with index (0/1000)\n\n\n\nlen(admin_grids_gdf)\n\n\n\nExplore per country populated grids\n\n# admin_grids_gdf.explore()\n# admin_grids_gdf.plot()\n\n\n# admin_grids_gdf.columns\n\n\nadmin_grids_gdf.head()\n\n\nadmin_grids_gdf.info()"
  },
  {
    "objectID": "test-notebooks/get_populated_grids_timor_leste.html",
    "href": "test-notebooks/get_populated_grids_timor_leste.html",
    "title": "Timor Leste Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "Import packages\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\nimport sys\nsys.path.append(\"../../\")\nfrom povertymapping.rollout_grids import get_region_filtered_bingtile_grids \nimport geopandas as gpd\n\n\n\nSet global parameters\n\nREGION = 'timor-leste'\nADMIN_LVL = 'ADM2'\n\n\n\nGenerate/Cache/Get per country grids\n\nget_region_filtered_bingtile_grids?\n\n\nSignature:\nget_region_filtered_bingtile_grids(\n    region: str,\n    admin_lvl='ADM2',\n    quadkey_lvl=14,\n    use_cache=True,\n    cache_dir='~/.cache/geowrangler',\n    filter_population=True,\n    assign_grid_admin_area=True,\n    metric_crs='epsg:3857',\n    extra_args={'nodata': nan},\n) -> geopandas.geodataframe.GeoDataFrame\nDocstring:\nGet a geodataframe consisting of bing tile grids for a region/country at a quadkey level.\nBy default, the grids are filtered by population\nArguments:\n   region: (required) the country/region for which grids will be created\n   admin_lvl: (default: ADM2) the administrative level boundaries used for assigning the grids\n   quadkey_lvl: (default: 14) the bingtile grid size zoom level \n   use_cache: (default: True) whether to use a cached version or overwrite existing file\n   cache_dir: (default: '~/.cache/geowrangler') directory where grids geojson will be created\n   filter_population: (default: True) - whether to filter out grids with zero population counts\n   assign_grid_admin_area: (default: True) whether to merge the admin level area data to the grids data\n   metric_crs: (default: 'epsg:3857') - CRS to use for assigning for admin areas\n   extra_args: (default: dict(nodata=np.nan)) - extra arguments passed to raster zonal stats computing\n   \nFile:      ~/work/povmap/fresh-povmap/povertymapping/rollout_grids.py\nType:      function\n\n\n\n\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, use_cache)\n\n2023-02-23 15:45:53.162 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:60 - Regenerating grids file /home/butchtm/.cache/geowrangler/quadkey_grids/timor-leste_14_populated_admin_grids.geojson\n2023-02-23 15:45:53.164 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:62 - Loading boundaries for region timor-leste and admin level ADM2\n2023-02-23 15:45:54.286 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:66 - Generating grids for region timor-leste and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n\n\n\n2023-02-23 15:45:56.210 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:70 - Generated 2811 grids for region timor-leste and admin level ADM2 at quadkey level 14\n2023-02-23 15:45:56.212 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:74 - Assigning grids to admin areas using metric crs epsg:3857\n2023-02-23 15:45:57.087 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:78 - Getting timor-leste population data for filtering grids\n2023-02-23 15:45:58.600 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:80 - Computing population zonal stats per grid\n2023-02-23 15:46:18.871 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:87 - Filtering unpopulated grids based on population data\n2023-02-23 15:46:18.877 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:90 - Filtered admin grid count: 2024\n/home/butchtm/work/povmap/fresh-povmap/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,\n\n\n\n\nExplore per country populated grids\n\n# admin_grids_gdf.explore()\nadmin_grids_gdf.plot()\n\n<AxesSubplot: >\n\n\n\n\n\n\nadmin_grids_gdf.columns\n\nIndex(['geometry', 'quadkey', 'shapeName', 'shapeISO', 'shapeID', 'shapeGroup',\n       'shapeType', 'pop_count'],\n      dtype='object')\n\n\n\nadmin_grids_gdf.head()\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      0\n      POLYGON ((124.03564 -9.34067, 124.03564 -9.318...\n      31011220203121\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      102.251936\n    \n    \n      1\n      POLYGON ((124.03564 -9.36235, 124.03564 -9.340...\n      31011220203123\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      992.492772\n    \n    \n      2\n      POLYGON ((124.05762 -9.34067, 124.05762 -9.318...\n      31011220203130\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      118.897600\n    \n    \n      3\n      POLYGON ((124.05762 -9.36235, 124.05762 -9.340...\n      31011220203132\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      513.637632\n    \n    \n      4\n      POLYGON ((124.05762 -9.38403, 124.05762 -9.362...\n      31011220203310\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      319.140940\n    \n  \n\n\n\n\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2024 entries, 0 to 2810\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    2024 non-null   geometry\n 1   quadkey     2024 non-null   object  \n 2   shapeName   2024 non-null   object  \n 3   shapeISO    2024 non-null   object  \n 4   shapeID     2024 non-null   object  \n 5   shapeGroup  2024 non-null   object  \n 6   shapeType   2024 non-null   object  \n 7   pop_count   2024 non-null   float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 142.3+ KB"
  },
  {
    "objectID": "test-notebooks/test_refactors/feature_engg_refactor_test.html",
    "href": "test-notebooks/test_refactors/feature_engg_refactor_test.html",
    "title": "UNICEF AI4D Poverty Mapping Project",
    "section": "",
    "text": "import sys\nsys.path.append(\"../../\")\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.feature_engineering import generate_features, generate_labels\n\n\n%reload_ext autoreload\n%autoreload 2\n\n\n# Set country-specific variables\ncountry_osm = \"east-timor\"\nookla_year = 2019\nnightlights_year = 2016\ncol_rename_config = 'tl'\ndhs_household_dta_path = settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\"\ndhs_geographic_shp_path = settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n\n\ndhs_gdf = generate_dhs_cluster_level_data(\n    dhs_household_dta_path, \n    dhs_geographic_shp_path, \n    col_rename_config=\"tl\",\n    convert_geoms_to_bbox=True,\n    bbox_size_km=2.4\n).reset_index(drop=True)\ndhs_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ncountry_data = dhs_gdf.copy()\ncountry_data = generate_features(country_data, country_osm, ookla_year, nightlights_year, scaled_only=True)\ncountry_data.info()\n\n\n    \n      \n      100.00% [32333824/32333378 02:26<00:00]\n    \n    \n\n\n2023-02-28 10:23:51.182 | INFO     | povertymapping.osm:download_osm_country_data:205 - OSM Data: Unzipping the zip file...\n2023-02-28 10:23:51.615 | INFO     | povertymapping.osm:download_osm_country_data:212 - OSM Data: Successfully downloaded and cached OSM data for east-timor at /home/jc_tm/.geowrangler/osm/east-timor!\n2023-02-28 10:23:51.616 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jc_tm/.geowrangler/osm/east-timor/gis_osm_pois_free_1.shp\n2023-02-28 10:23:53.008 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/.geowrangler/osm/east-timor? True\n2023-02-28 10:23:53.009 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jc_tm/.geowrangler/osm/east-timor/gis_osm_roads_free_1.shp\n2023-02-28 10:23:53.773 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-28 10:23:53.774 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? False\n2023-02-28 10:23:53.775 | DEBUG    | povertymapping.ookla:load_type_year_data:100 - No cached data found. Processing Ookla data from scratch.\n2023-02-28 10:24:01.744 | INFO     | povertymapping.ookla:download_ookla_year_data:173 - Ookla Data: Number of available files for fixed and 2019: 4\n2023-02-28 10:24:01.745 | INFO     | povertymapping.ookla:download_ookla_year_data:186 - Ookla Data: Cached data available for fixed and 2019 at /home/jc_tm/.geowrangler/ookla/fixed/2019? False\n2023-02-28 10:24:01.746 | INFO     | povertymapping.ookla:download_ookla_year_data:192 - Ookla Data: Re-initializing Ookla type/year cache dir at /home/jc_tm/.geowrangler/ookla/fixed/2019...\n2023-02-28 10:24:01.748 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 1...\n2023-02-28 10:24:30.771 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 2...\n2023-02-28 10:24:59.874 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 3...\n2023-02-28 10:25:32.062 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 4...\n2023-02-28 10:26:19.845 | INFO     | povertymapping.ookla:download_ookla_year_data:211 - Ookla Data: Successfully downloaded and cached Ookla data for fixed and 2019 at /home/jc_tm/.geowrangler/ookla/fixed/2019!\n2023-02-28 10:26:22.313 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 1 being loaded from /home/jc_tm/.geowrangler/ookla/fixed/2019/2019-01-01_performance_fixed_tiles.parquet\n2023-02-28 10:26:36.551 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 2 being loaded from /home/jc_tm/.geowrangler/ookla/fixed/2019/2019-04-01_performance_fixed_tiles.parquet\n2023-02-28 10:26:43.345 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 3 being loaded from /home/jc_tm/.geowrangler/ookla/fixed/2019/2019-07-01_performance_fixed_tiles.parquet\n2023-02-28 10:26:51.374 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, fixed 2019 4 being loaded from /home/jc_tm/.geowrangler/ookla/fixed/2019/2019-10-01_performance_fixed_tiles.parquet\n2023-02-28 10:27:00.658 | DEBUG    | povertymapping.ookla:load_type_year_data:135 - Concatenating quarterly Ookla data for fixed and 2019 into one dataframe\n2023-02-28 10:27:00.977 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['206a0323fa0e80f82339b66d0c859b4a']\n2023-02-28 10:27:00.979 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? False\n2023-02-28 10:27:00.980 | DEBUG    | povertymapping.ookla:load_type_year_data:100 - No cached data found. Processing Ookla data from scratch.\n2023-02-28 10:27:00.980 | INFO     | povertymapping.ookla:download_ookla_year_data:173 - Ookla Data: Number of available files for mobile and 2019: 4\n2023-02-28 10:27:00.981 | INFO     | povertymapping.ookla:download_ookla_year_data:186 - Ookla Data: Cached data available for mobile and 2019 at /home/jc_tm/.geowrangler/ookla/mobile/2019? False\n2023-02-28 10:27:00.982 | INFO     | povertymapping.ookla:download_ookla_year_data:192 - Ookla Data: Re-initializing Ookla type/year cache dir at /home/jc_tm/.geowrangler/ookla/mobile/2019...\n2023-02-28 10:27:00.987 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 1...\n2023-02-28 10:27:21.138 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 2...\n2023-02-28 10:27:35.587 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 3...\n2023-02-28 10:27:56.675 | INFO     | povertymapping.ookla:download_ookla_year_data:201 - Ookla Data: Downloading Ookla parquet file for quarter 4...\n2023-02-28 10:28:14.983 | INFO     | povertymapping.ookla:download_ookla_year_data:211 - Ookla Data: Successfully downloaded and cached Ookla data for mobile and 2019 at /home/jc_tm/.geowrangler/ookla/mobile/2019!\n2023-02-28 10:28:17.424 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 1 being loaded from /home/jc_tm/.geowrangler/ookla/mobile/2019/2019-01-01_performance_mobile_tiles.parquet\n2023-02-28 10:28:20.620 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 2 being loaded from /home/jc_tm/.geowrangler/ookla/mobile/2019/2019-04-01_performance_mobile_tiles.parquet\n2023-02-28 10:28:24.053 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 3 being loaded from /home/jc_tm/.geowrangler/ookla/mobile/2019/2019-07-01_performance_mobile_tiles.parquet\n2023-02-28 10:28:28.143 | DEBUG    | povertymapping.ookla:load_type_year_data:124 - Ookla data for aoi, mobile 2019 4 being loaded from /home/jc_tm/.geowrangler/ookla/mobile/2019/2019-10-01_performance_mobile_tiles.parquet\n2023-02-28 10:28:31.609 | DEBUG    | povertymapping.ookla:load_type_year_data:135 - Concatenating quarterly Ookla data for mobile and 2019 into one dataframe\n2023-02-28 10:28:31.812 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 455 entries, 0 to 454\nData columns (total 86 columns):\n #   Column                                    Non-Null Count  Dtype   \n---  ------                                    --------------  -----   \n 0   DHSCLUST                                  455 non-null    int64   \n 1   Wealth Index                              455 non-null    float64 \n 2   DHSID                                     455 non-null    object  \n 3   DHSCC                                     455 non-null    object  \n 4   DHSYEAR                                   455 non-null    float64 \n 5   CCFIPS                                    455 non-null    object  \n 6   ADM1FIPS                                  455 non-null    object  \n 7   ADM1FIPSNA                                455 non-null    object  \n 8   ADM1SALBNA                                455 non-null    object  \n 9   ADM1SALBCO                                455 non-null    object  \n 10  ADM1DHS                                   455 non-null    float64 \n 11  ADM1NAME                                  455 non-null    object  \n 12  DHSREGCO                                  455 non-null    float64 \n 13  DHSREGNA                                  455 non-null    object  \n 14  SOURCE                                    455 non-null    object  \n 15  URBAN_RURA                                455 non-null    object  \n 16  LATNUM                                    455 non-null    float64 \n 17  LONGNUM                                   455 non-null    float64 \n 18  ALT_GPS                                   455 non-null    float64 \n 19  ALT_DEM                                   455 non-null    float64 \n 20  DATUM                                     455 non-null    object  \n 21  F21                                       455 non-null    int64   \n 22  F22                                       455 non-null    int64   \n 23  F23                                       455 non-null    int64   \n 24  geometry                                  455 non-null    geometry\n 25  poi_count_scaled                          455 non-null    float64 \n 26  atm_count_scaled                          455 non-null    float64 \n 27  atm_nearest_scaled                        455 non-null    float64 \n 28  bank_count_scaled                         455 non-null    float64 \n 29  bank_nearest_scaled                       455 non-null    float64 \n 30  bus_station_count_scaled                  455 non-null    float64 \n 31  bus_station_nearest_scaled                455 non-null    float64 \n 32  cafe_count_scaled                         455 non-null    float64 \n 33  cafe_nearest_scaled                       455 non-null    float64 \n 34  charging_station_count_scaled             455 non-null    float64 \n 35  charging_station_nearest_scaled           455 non-null    float64 \n 36  courthouse_count_scaled                   455 non-null    float64 \n 37  courthouse_nearest_scaled                 455 non-null    float64 \n 38  dentist_count_scaled                      455 non-null    float64 \n 39  dentist_nearest_scaled                    455 non-null    float64 \n 40  fast_food_count_scaled                    455 non-null    float64 \n 41  fast_food_nearest_scaled                  455 non-null    float64 \n 42  fire_station_count_scaled                 455 non-null    float64 \n 43  fire_station_nearest_scaled               455 non-null    float64 \n 44  food_court_count_scaled                   455 non-null    float64 \n 45  food_court_nearest_scaled                 455 non-null    float64 \n 46  fuel_count_scaled                         455 non-null    float64 \n 47  fuel_nearest_scaled                       455 non-null    float64 \n 48  hospital_count_scaled                     455 non-null    float64 \n 49  hospital_nearest_scaled                   455 non-null    float64 \n 50  library_count_scaled                      455 non-null    float64 \n 51  library_nearest_scaled                    455 non-null    float64 \n 52  marketplace_count_scaled                  455 non-null    float64 \n 53  marketplace_nearest_scaled                455 non-null    float64 \n 54  pharmacy_count_scaled                     455 non-null    float64 \n 55  pharmacy_nearest_scaled                   455 non-null    float64 \n 56  police_count_scaled                       455 non-null    float64 \n 57  police_nearest_scaled                     455 non-null    float64 \n 58  post_box_count_scaled                     455 non-null    float64 \n 59  post_box_nearest_scaled                   455 non-null    float64 \n 60  post_office_count_scaled                  455 non-null    float64 \n 61  post_office_nearest_scaled                455 non-null    float64 \n 62  restaurant_count_scaled                   455 non-null    float64 \n 63  restaurant_nearest_scaled                 455 non-null    float64 \n 64  social_facility_count_scaled              455 non-null    float64 \n 65  social_facility_nearest_scaled            455 non-null    float64 \n 66  supermarket_count_scaled                  455 non-null    float64 \n 67  supermarket_nearest_scaled                455 non-null    float64 \n 68  townhall_count_scaled                     455 non-null    float64 \n 69  townhall_nearest_scaled                   455 non-null    float64 \n 70  road_count_scaled                         455 non-null    float64 \n 71  fixed_2019_mean_avg_d_kbps_mean_scaled    455 non-null    float64 \n 72  fixed_2019_mean_avg_u_kbps_mean_scaled    455 non-null    float64 \n 73  fixed_2019_mean_avg_lat_ms_mean_scaled    455 non-null    float64 \n 74  fixed_2019_mean_num_tests_mean_scaled     455 non-null    float64 \n 75  fixed_2019_mean_num_devices_mean_scaled   455 non-null    float64 \n 76  mobile_2019_mean_avg_d_kbps_mean_scaled   455 non-null    float64 \n 77  mobile_2019_mean_avg_u_kbps_mean_scaled   455 non-null    float64 \n 78  mobile_2019_mean_avg_lat_ms_mean_scaled   455 non-null    float64 \n 79  mobile_2019_mean_num_tests_mean_scaled    455 non-null    float64 \n 80  mobile_2019_mean_num_devices_mean_scaled  455 non-null    float64 \n 81  avg_rad_min_scaled                        455 non-null    float64 \n 82  avg_rad_max_scaled                        455 non-null    float64 \n 83  avg_rad_mean_scaled                       455 non-null    float64 \n 84  avg_rad_std_scaled                        455 non-null    float64 \n 85  avg_rad_median_scaled                     455 non-null    float64 \ndtypes: float64(69), geometry(1), int64(4), object(12)\nmemory usage: 325.4+ KB\n\n\n\nfeatures = dhs_gdf.copy()\nfeatures = generate_features(features, country_osm, ookla_year, nightlights_year, scaled_only=True, features_only=True)\nfeatures.info()\n\n2023-02-28 10:28:34.335 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/.geowrangler/osm/east-timor? True\n2023-02-28 10:28:34.336 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jc_tm/.geowrangler/osm/east-timor/gis_osm_pois_free_1.shp\n2023-02-28 10:28:35.956 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/.geowrangler/osm/east-timor? True\n2023-02-28 10:28:35.957 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jc_tm/.geowrangler/osm/east-timor/gis_osm_roads_free_1.shp\n2023-02-28 10:28:37.276 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-28 10:28:37.277 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-02-28 10:28:37.278 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-02-28 10:28:37.448 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['206a0323fa0e80f82339b66d0c859b4a']\n2023-02-28 10:28:37.450 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-02-28 10:28:37.451 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-02-28 10:28:37.619 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 455 entries, 0 to 454\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          455 non-null    float64\n 1   atm_count_scaled                          455 non-null    float64\n 2   atm_nearest_scaled                        455 non-null    float64\n 3   bank_count_scaled                         455 non-null    float64\n 4   bank_nearest_scaled                       455 non-null    float64\n 5   bus_station_count_scaled                  455 non-null    float64\n 6   bus_station_nearest_scaled                455 non-null    float64\n 7   cafe_count_scaled                         455 non-null    float64\n 8   cafe_nearest_scaled                       455 non-null    float64\n 9   charging_station_count_scaled             455 non-null    float64\n 10  charging_station_nearest_scaled           455 non-null    float64\n 11  courthouse_count_scaled                   455 non-null    float64\n 12  courthouse_nearest_scaled                 455 non-null    float64\n 13  dentist_count_scaled                      455 non-null    float64\n 14  dentist_nearest_scaled                    455 non-null    float64\n 15  fast_food_count_scaled                    455 non-null    float64\n 16  fast_food_nearest_scaled                  455 non-null    float64\n 17  fire_station_count_scaled                 455 non-null    float64\n 18  fire_station_nearest_scaled               455 non-null    float64\n 19  food_court_count_scaled                   455 non-null    float64\n 20  food_court_nearest_scaled                 455 non-null    float64\n 21  fuel_count_scaled                         455 non-null    float64\n 22  fuel_nearest_scaled                       455 non-null    float64\n 23  hospital_count_scaled                     455 non-null    float64\n 24  hospital_nearest_scaled                   455 non-null    float64\n 25  library_count_scaled                      455 non-null    float64\n 26  library_nearest_scaled                    455 non-null    float64\n 27  marketplace_count_scaled                  455 non-null    float64\n 28  marketplace_nearest_scaled                455 non-null    float64\n 29  pharmacy_count_scaled                     455 non-null    float64\n 30  pharmacy_nearest_scaled                   455 non-null    float64\n 31  police_count_scaled                       455 non-null    float64\n 32  police_nearest_scaled                     455 non-null    float64\n 33  post_box_count_scaled                     455 non-null    float64\n 34  post_box_nearest_scaled                   455 non-null    float64\n 35  post_office_count_scaled                  455 non-null    float64\n 36  post_office_nearest_scaled                455 non-null    float64\n 37  restaurant_count_scaled                   455 non-null    float64\n 38  restaurant_nearest_scaled                 455 non-null    float64\n 39  social_facility_count_scaled              455 non-null    float64\n 40  social_facility_nearest_scaled            455 non-null    float64\n 41  supermarket_count_scaled                  455 non-null    float64\n 42  supermarket_nearest_scaled                455 non-null    float64\n 43  townhall_count_scaled                     455 non-null    float64\n 44  townhall_nearest_scaled                   455 non-null    float64\n 45  road_count_scaled                         455 non-null    float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    455 non-null    float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    455 non-null    float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    455 non-null    float64\n 49  fixed_2019_mean_num_tests_mean_scaled     455 non-null    float64\n 50  fixed_2019_mean_num_devices_mean_scaled   455 non-null    float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   455 non-null    float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   455 non-null    float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   455 non-null    float64\n 54  mobile_2019_mean_num_tests_mean_scaled    455 non-null    float64\n 55  mobile_2019_mean_num_devices_mean_scaled  455 non-null    float64\n 56  avg_rad_min_scaled                        455 non-null    float64\n 57  avg_rad_max_scaled                        455 non-null    float64\n 58  avg_rad_mean_scaled                       455 non-null    float64\n 59  avg_rad_std_scaled                        455 non-null    float64\n 60  avg_rad_median_scaled                     455 non-null    float64\ndtypes: float64(61)\nmemory usage: 236.6 KB\n\n\n\nlabels = dhs_gdf.copy()\nlabels = generate_labels(labels, 'Wealth Index', labels_only=True)\nlabels.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 455 entries, 0 to 454\nData columns (total 1 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   label   455 non-null    float64\ndtypes: float64(1)\nmemory usage: 3.7 KB\n\n\n\nlabels.hist()\n\narray([[<AxesSubplot: title={'center': 'label'}>]], dtype=object)\n\n\n\n\n\n\ngenerate_features??\n\nSignature:\ngenerate_features(\n    aoi: pandas.core.frame.DataFrame,\n    country_osm: str,\n    ookla_year: int,\n    nightlights_year: int,\n    inplace: bool = False,\n    cache_dir: str = '~/.geowrangler',\n    fill_na: bool = True,\n    fill_na_value: int = 0,\n    scale: bool = True,\n    sklearn_scaler: Any = <class 'sklearn.preprocessing._data.StandardScaler'>,\n    scaled_only: bool = False,\n    features_only: bool = False,\n) -> pandas.core.frame.DataFrame\nDocstring: <no docstring>\nSource:   \ndef generate_features(\n    aoi: pd.DataFrame,\n    country_osm: str,\n    ookla_year: int,\n    nightlights_year: int,\n    inplace: bool = False,\n    cache_dir: str = DEFAULT_CACHE_DIR,\n    fill_na: bool = True,\n    fill_na_value: int = 0,\n    scale: bool = True,\n    sklearn_scaler: Any = StandardScaler,\n    scaled_only: bool = False,\n    features_only: bool = False,\n) -> pd.DataFrame:\n    f\"\"\"Generates the base features for an AOI based on\n    DHS, OSM, Ookla, and VIIRS (nighttime lights) data\n\n    Args:\n        aoi (pd.DataFrame): The input AOI dataframe.\n        country_osm (str): The name of country to load features from OSM. For more information about\n            supported countries, refer to Geofabrik documentation: https://download.geofabrik.de/index.html\n        ookla_year (int): The year of Ookla data to use. Earliest available is 2019.\n        nightlights_year (int): The year of nighttime lights data to use. Earliest available is 2012.\n        inplace (bool, optional): Whether to overwrite the original dataframe or not. Defaults to False.\n        cache_dir (str, optional): The path to the data directory where downloaded data is cached. Defaults to {DEFAULT_CACHE_DIR}.\n        fill_na (bool, optional): Whether to fill missing values with fill_na_value or not. Defaults to True.\n        fill_na_value (int, optional): The value to fill missing values. Defaults to 0.\n        scale (bool, optional): Whether to scale the generated features or not. Defaults to True.\n        sklearn_scaler (Any, optional): The scikit-learn scaler to use. Only applied if scale_features = True. Defaults to StandardScaler.\n        scaled_only (bool, optional): Whether to return only the scaled features or not. Defaults to False.\n        features_only (bool, optional): Whether to return only the generated features or not. Defaults to False.\n\n    Returns:\n        aoi (pd.DataFrame): The AOI dataframe with its new features.\n    \"\"\"\n    # Make a copy of the dataframe to avoid overwriting the input data\n    if not inplace:\n        aoi = aoi.copy()\n\n    # Store list of input columns\n    input_cols = aoi.columns\n\n    # Instantiate data managers for Ookla and OSM\n    # This auto-caches requested data in RAM, so next fetches of the data are faster.\n    osm_data_manager = OsmDataManager(cache_dir=cache_dir)\n    ookla_data_manager = OoklaDataManager(cache_dir=cache_dir)\n\n    # Add in OSM features\n    aoi = osm.add_osm_poi_features(aoi, country_osm, osm_data_manager)\n    aoi = osm.add_osm_road_features(aoi, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    aoi = ookla.add_ookla_features(aoi, \"fixed\", ookla_year, ookla_data_manager)\n    aoi = ookla.add_ookla_features(aoi, \"mobile\", ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    aoi = nightlights.generate_nightlights_feature(\n        aoi, nightlights_year, cache_dir=f\"{cache_dir}/nightlights\"\n    )\n\n    # Get list of features generated\n    feature_cols = [x for x in aoi.columns if x not in input_cols]\n\n    # Scale the features using the provided scaler\n    if scale:\n        scaler = sklearn_scaler()\n        for col in feature_cols:\n            aoi[col + \"_scaled\"] = scaler.fit_transform(aoi[[col]])\n        if scaled_only:\n            aoi = aoi.drop(columns=feature_cols)\n\n    if fill_na:\n        aoi = aoi.fillna(fill_na_value)\n\n    # Drop the input columns, leaving only the features\n    if features_only:\n        aoi = aoi.drop(columns=input_cols)\n\n    return aoi\nFile:      ~/project_repos/unicef-ai4d-poverty-mapping/povertymapping/feature_engineering.py\nType:      function"
  },
  {
    "objectID": "test-notebooks/profile_indonesia_memory_usage.html",
    "href": "test-notebooks/profile_indonesia_memory_usage.html",
    "title": "Indonesia Model Rollout Part 1 (Compute Per-country Populated Grids)",
    "section": "",
    "text": "Import packages\n\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n\n\n%load_ext filprofiler\n\n\nfrom povertymapping.rollout_grids import * \nimport geopandas as gpd\nimport numpy as np\n\n\n\nSet global parameters\n\nREGION = 'indonesia'\nADMIN_LVL = 'ADM2'\n\n\n\nGenerate/Cache/Get per country grids\n\n# get_region_filtered_bingtile_grids?\n\n\n%%time\nadmin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, filter_population=False )\n\n2023-03-01 13:03:00.779 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:109 - Loading cached grids file /home/butchtm/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_admin_grids.geojson\n\n\nCPU times: user 24.2 s, sys: 474 ms, total: 24.7 s\nWall time: 24.6 s\n\n\n\nhdx_pop_file = get_hdx_file(REGION)\n\n\nmax_batch_size=5_000\nn_workers=None\n\n\naggregation=dict(\n    column='population',\n    output='pop_count',\n    func='sum')\nextra_args=dict(nodata=np.nan)\n    \n\n\n%%filprofile\nadmin_grids_result = compute_raster_stats(admin_grids_gdf.iloc[:15_000], hdx_pop_file,\n                                         aggregation=aggregation,\n                                         extra_args=extra_args,\n                                         max_batch_size=max_batch_size,\n                                         n_workers=n_workers)\n\n=fil-profile= WARNING: Fil does not (yet) support tracking memory in subprocesses.\n2023-03-01 13:03:34.865 | INFO     | povertymapping.rollout_grids:compute_raster_stats:44 - Batching call to create raster_zonal stats for 15000 grids for file size 87714317324\n2023-03-01 13:03:34.966 | INFO     | povertymapping.rollout_grids:compute_raster_stats:51 - Created 3 for 3 splits of 5000\n2023-03-01 13:03:34.968 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 0 with index (0/4999)\n2023-03-01 13:10:15.006 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 1 with index (0/4999)\n2023-03-01 13:17:47.584 | INFO     | povertymapping.rollout_grids:compute_raster_stats:55 - Creating raster zonal stats for batch 2 with index (0/4999)\n2023-03-01 13:23:36.012 | INFO     | povertymapping.rollout_grids:compute_raster_stats:63 - Completed raster zonal stats for 3 batches\n2023-03-01 13:23:36.109 | INFO     | povertymapping.rollout_grids:compute_raster_stats:65 - Concatenated raster zonal stats for 3 batches\n=fil-profile= Preparing to write to fil-result/tmpc22geqqd\n=fil-profile= Wrote flamegraph to \"fil-result/tmpc22geqqd/peak-memory.svg\"\n=fil-profile= Wrote flamegraph to \"fil-result/tmpc22geqqd/peak-memory-reversed.svg\"\n\n\n\n        \n        \n\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL,  )\n\n\n%%time\n# admin_grids_gdf = get_region_filtered_bingtile_grids(REGION, admin_lvl=ADMIN_LVL, max_batch_size=5_000 )\n\n\nlen(admin_grids_gdf)\n\n\n\nExplore per country populated grids\n\n# admin_grids_gdf.explore()\n# admin_grids_gdf.plot()\n\n\n# admin_grids_gdf.columns\n\n\nadmin_grids_gdf.head()\n\n\nadmin_grids_gdf.info()"
  },
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "UNICEF AI4D Poverty Mapping Project",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n\n\nExamples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at unicef-ai4d-lead@thinkingmachin.es. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\n\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  {
    "objectID": "docs/sprint-2-report.html",
    "href": "docs/sprint-2-report.html",
    "title": "Cross-country Experiments Summary",
    "section": "",
    "text": "This page summarizes our experiments in finding the best approach for training cross-country poverty estimation models for the following DHS countries: Philippines (PH), Cambodia (KH), Timor (TL) Leste, and Myanmar (MM).\nOur main goal for these experiments to validate our approach on running models for countries without DHS ground truth data.\nWe find that training a model with both features and wealth index labels scaled per-country give us the most promising results.\n\n\n\nTable 1.1: Model performance by country split for each experiment, measured using Pearson Correlation Coefficient (\\(r^2\\))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(r^2\\)\n\n\n\n\n\n\n\nTrain\nTest\nTest single-country model\nraw features andwealth index\nrecomputed wealth index\nscaled wealth index\nscaled featuresand wealth index\n\n\nKH, MM, TL\nPH\n0.57\n-0.19\n-0.01\n0.25\n0.48\n\n\nPH, MM, TL\nKH\n0.7\n0.62\n-1.46\n0.59\n0.58\n\n\nKH, PH, MM\nTL\n0.6\n0.37\n-2.76\n0.34\n0.54\n\n\nKH, PH, TL\nMM\n0.5\n0.46\n0.01\n0.45\n0.51\n\n\n\nOveral Average\n0.59\n0.32\n-1.06\n0.41\n0.52"
  },
  {
    "objectID": "docs/sprint-2-report.html#sec-exp-1",
    "href": "docs/sprint-2-report.html#sec-exp-1",
    "title": "Cross-country Experiments Summary",
    "section": "Cross-country regressor with raw wealth index",
    "text": "Cross-country regressor with raw wealth index\n📒 Notebook link\n\nLearnings\n\nTraining the model on raw features and wealth index produces inconsistent results which are highly dependent on the left-out country."
  },
  {
    "objectID": "docs/sprint-2-report.html#sec-exp-2",
    "href": "docs/sprint-2-report.html#sec-exp-2",
    "title": "Cross-country Experiments Summary",
    "section": "Cross-country regressor with wealth index recalculated using the pooled data for the four countries",
    "text": "Cross-country regressor with wealth index recalculated using the pooled data for the four countries\n📒 Notebook link\n\nIdea\nRecomputing the wealth index from pooled country data from all countries will help the model predict better across countries\n\n\nExperiment Performed\nCombine raw country data and recompute the wealth index using PCA on a base set of features: drinking water, number of rooms, electrification, mobile telephone, radio, television, cars/trucks, refrigeration, motorcycle, floors, toilet\n\n\nLearnings\n\nAligning features across different countries makes it very difficult to include all features\nRecomputed index has poor correlation with original index\nIndex would likely improve if we recompute using a larger dataset"
  },
  {
    "objectID": "docs/sprint-2-report.html#sec-exp-3",
    "href": "docs/sprint-2-report.html#sec-exp-3",
    "title": "Cross-country Experiments Summary",
    "section": "Cross-country regressor with both wealth index and input features scaled per-country",
    "text": "Cross-country regressor with both wealth index and input features scaled per-country\n📒 Notebook link\n\nIdea\nScaling the features and the DHS wealth index from absolute to relative values corrects country-level variations - Ex. 10 mbps download speed -> top 10% speed in that country\n\n\nExperiment Performed\nTrained a model using a) scaled features, b) scaled wealth index, and c) both, using different scaling methods\n\n\nLearnings\n\nScaling gives us the best cross-country results and works best when both features and labels are scaled\nSimpler method, but is scalable and already reported in other literature\nModel only gives us purely relative predictions without an absolute value"
  },
  {
    "objectID": "docs/sprint-3-report.html",
    "href": "docs/sprint-3-report.html",
    "title": "Model Rollouts Summary",
    "section": "",
    "text": "This page summarizes our findings and learnings from developing a cross-country poverty estimation model and rolling it out for 9 countries in Southeast Asia\n\n\nThe following figure describe our model rollout process for the 9 countries.\n\n\n\nRollout Process showing the four main model rollout steps: generating tiles over country, filtering to populated tiles using High Resolution Settlement Layer (HRSL), feature engineering, and model estimation\n\n\nWe were able to successfully train and use models to estimate wealth over the 9 countries using this approach. The output wealth estimations captures macro-level urbanization, predicting relatively higher wealth at major urban centers and lower wealth at remote and sparsely populated areas. These results qualitatively show good agreement by Meta’s RWI, showing that we can achieve good results in wealth estimation using only openly-available datasets and ground truth DHS data from 4 countries as our training data.\n\n\n\nSnapshots of estimated relative wealth indexes for various areas in SEA\n\n\nResulting wealth estimates for the 9 SEA countries can be downloaded here.\n\n\nWe validated our model rollout results with the best available reference wealth data for 3 countries. We took the mean wealth predictions for both model predictions and the reference data per adminstrative boundary and ranked each area from highest to lowest wealth. From this, we created comparison maps and calculated the spearman rank correlation between the predicted and reference wealth rank.\n\n\n\nCountry\nReference Comparison Data\nGranularity\n# of Evaluation Areas\nSpearman Rank Correlation\n\n\n\n\nIndonesia\nSusenas RWI\nAdmin Level 2 (City/Regency)\n513\n0.72\n\n\nMalaysia\nRelative poverty by State\nAdmin Level 1 (State / Federal Territory)\n16\n0.78\n\n\nLaos\nMICS Survey IWI (Asset-based index)\nAdmin Level 1 (Province)\n17\n0.75\n\n\n\n\n\n\nIndonesia Model Map Comparison with Susenas RWI (reference) (Rank Correlation: 0.72)\n\n\n\n\n\nMalaysia Model Map Comparison with Relative Poverty (reference) (Rank Correlation: 0.78)\n\n\n\n\n\nLaos Model Map Comparison with MICS IWI (Rank Correlation: 0.75)\n\n\n\n\n\n\nAs previously discussed in our cross-country experiments summary, we found that scaling the input features and DHS Wealth Index from absolute to relative values corrects country-level variations. This approach leads to the best cross-country results.\nDuring training, we found that StandardScaler produced the best metrics and chose it as our model. StandardScaler works by centering the data on the mean and using the standard deviation as the “unit”. Our model interprets the data as relative, meaning that if an area has above-average internet speeds or night-time lights, it must also have above-average wealth.\nHowever, during our rollout, we noticed that many countries had above-zero values, which indicated that the model believed that all areas within the country had above-average wealth. This means that our initial approach resulted in overestimation of relative wealth during rollout.\nWe found that the root cause of this issue was that the rollout data had an abundance of remote and sparsely populated areas, with many zero or low values, which pulled down the mean. This meant that the above/below interpretation was significantly different between the training and rollout data.\n\n\n\nComparison between StandardScaler and MinMaxScaler. We found MinMaxScaler to perform best when rolling out to countries without training data.\n\n\nTo address this issue, we decided to switch from StandardScaler to MinMaxScaler. MinMaxScaler fixes the issue by anchoring the scaling on the minimum and maximum values seen in the rollout data, rather than on the mean and standard deviation. This means that the range is not affected by the many remote areas, and the scaling is much more accurate.\n\n\n\nIndonesia posed several challenges due to the scale of the country, which meant that much bigger datasets were required to rollout the model. Indonesia is 3x the size of the second largest country in our target countries (Myanmar), and so processing using the typical workflow used for the other 8 countries ran into memory issues Thus, it was necessary to optimize our existing workflows in order to process data for large countries, most especially batching the data processing in order to fit into memory\n\nQuadkey tile indexes allowes us to query neighboring tiles together and intersect them with Ookla internet speed data without expensive geospatial operations. Quadkey-based optimizations are used in the background when use_aoi_quadkey=True in relevant functions.\nIndonesia OpenStreetMap data is processed in batches based on major islands: Java, Kalimantan, Maluku, Sulawesi, Sumatra, Papua, Nusa-Tenggara\n\nLinks to Indonesia notebooks:\n\nGenerating Rollout Grids\nModel Rollout"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UNICEF AI4D Poverty Mapping",
    "section": "",
    "text": "Funded by UNICEF as part of the AI Research Bank for Development (AI4D) program, this project explored the use of purely open datasets and low-cost Machine Learning models for poverty mapping estimation across 9 Southeast Asian countries:\nWe hope that our work can serve as a baseline for other Data Scientists to further AI x Development research in the region."
  },
  {
    "objectID": "index.html#dhs-countries-cambodia-myanmar-philippines-timor-leste",
    "href": "index.html#dhs-countries-cambodia-myanmar-philippines-timor-leste",
    "title": "UNICEF AI4D Poverty Mapping",
    "section": "DHS Countries: Cambodia, Myanmar, Philippines, Timor-Leste",
    "text": "DHS Countries: Cambodia, Myanmar, Philippines, Timor-Leste\nTraining models and using them to produce wealth estimates for countries with DHS survey data are relatively straightforward. We generate features to characterize the neighborhood of the DHS clusters, which we then use to train a model.\nThe table below shows R^2 values after Repeated 5-fold Cross Validation (5 Repeats; 25 runs in total).\n\n\n\nCountry\n# Samples\nRepeated 5-fold CV\n\n\n\n\nCambodia\n611\n0.70 (±0.06)\n\n\nMyanmar\n441\n0.50 (±0.09)\n\n\nPhilippines\n1,213\n0.57 (±0.03)\n\n\nTimor-Leste\n455\n0.60 (±0.07)\n\n\nAverage\n\n0.59"
  },
  {
    "objectID": "index.html#non-dhs-countries-indonesia-laos-malaysia-thailand-vietnam",
    "href": "index.html#non-dhs-countries-indonesia-laos-malaysia-thailand-vietnam",
    "title": "UNICEF AI4D Poverty Mapping",
    "section": "Non-DHS Countries: Indonesia, Laos, Malaysia, Thailand, Vietnam",
    "text": "Non-DHS Countries: Indonesia, Laos, Malaysia, Thailand, Vietnam\nFor countries with no usable DHS data for training (either data doesn’t exist, no lat/lon coordinates, or data is too old), it wasn’t as straightforward to train models for these.\nThe main challenges were:\n\nHow can we utilize data from the 4 DHS countries to train a model that we can use for these 5 non-DHS countries?\nThe first idea might be to simply combine all the data from each country into one big dataset.\nThe problem here is that both the target variable (the wealth index) and the feature values are not directly comparable between countries:\n\nWealth Index\n\nDHS-calculated relative wealth score based on asset ownership\nThe first principal component after running PCA on asset-related columns/values (e.g. # of cars, # of rooms, etc). In effect, this is a single score that summarizes the other columns and represents the “asset wealth” of a household.\nThe PCA procedure to calculate this is based on different asset-related columns/values for different countries.\n\nFeatures\n\nFeatures may be interpreted differently from country to country.\nFor example, 5mbps internet speed might be considered slow for Country A, while it might be considered fast for Country B .\nIf we used raw values directly, the model might be confused because the mapping of features to relative wealth is different. That is, 5mbps might be correlated with relatively poorer households in Country A, while it might be correlated with relatively wealthier households in Country B.\n\n\nWe found that a simple solution was to normalize the features and the wealth index through a MinMaxScaler. The table below shows results that support this hypothesis. To validate this methodology, we performed leave-one-country-out cross-validation wherein we utilize one country as the test set and use the other 3 as the train set.\n\n\n\n\n\n\n\n\n\n\nTest Country\n# Samples\nRaw Features & Wealth Index\nStandardScaler for Features & Wealth Index\nMinMaxScaler for Features & Wealth Index\n\n\n\n\nCambodia\n611\n-0.19\n0.48\n0.53\n\n\nMyanmar\n441\n0.62\n0.58\n0.49\n\n\nPhilippines\n1,213\n0.37\n0.54\n0.36\n\n\nTimor-Leste\n455\n0.46\n0.51\n0.49\n\n\nAverage\n\n0.32\n0.52\n0.47\n\n\n\nNote that we tried other scalers and other methods like re-calculating the wealth indices, but the MinMaxScaler proved to be the best approach in the end. Read more about it in our Sprint 2 and Sprint 3 reports.\n\n\nHow do we validate if the produced wealth estimates for these 5 countries are sensible?\nOur leave-one-country-out cross-validation procedure simulates the scenario of training on multiple countries and utilizing it on one that it hasn’t seen during training.\nOur next step is to train a final model on all 4 countries’ data, and use it on the 5 non-DHS countries. However, how do we check if the results are actually sensible in the absence of ground truth?\n\nQualitatively, we can see that the results intuitively match known wealthier areas in the countries (e.g. the capitals and major cities).\n\n\n\nQuantitatively, we calculate the agreement between province/city rankings according to our model estimates and some reference wealth-related data. These are not apple-to-apple comparisons since the wealth data are not exactly the same, but they should give us some level of confidence that our estimates aren’t in total disagreement with other government data.\n\n\n\n\n\n\n\n\n\n\n\nCountry\nReference Data\nAdmin Level\nN\nSpearman Rank Correlation\n\n\n\n\nIndonesia\nSUSENAS-derived Relative Wealth Index\nCity / District\n514\n0.72\n\n\nLaos\nInternational Wealth Index\nProvince\n18\n0.75\n\n\nMalaysia\nPoverty Headcount\nState\n16\n0.78\n\n\nAverage\n\n\n\n0.75"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html",
    "title": "Index Recalculation",
    "section": "",
    "text": "import sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data, generate_dhs_household_level_data, DHSDataManager\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score, LeaveOneGroupOut\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#set-up-data-access",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#set-up-data-access",
    "title": "Index Recalculation",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\ndhs_data_manager = DHSDataManager()\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\nUsername? jcnacpil@thinkingmachin.es\nPassword? ········\n\n\n2023-02-06 13:22:02.901 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-02-06 13:22:02.903 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#load-countries-from-dhs-data",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#load-countries-from-dhs-data",
    "title": "Index Recalculation",
    "section": "Load Countries From DHS data",
    "text": "Load Countries From DHS data\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\nCombine cluster features for all four countries\nThis section creates countries_cluster_data (gpd.GeoDataFrame) which combines DHS/Ookla/OSM/VIIRS data for all specified countries.\n\n%%time\n\n# Create list of dataframes per country, and list of all columns appearing in DHS columns\ncountry_cluster_data_list = []\ndhs_columns = ['DHSCLUST']\n\nfor country, config in country_config.items():\n    print(f'Loading data for {country}')\n\n    # Load the DHS cluster data\n    dhs_household_dta_path = config['dhs_household_dta_path']\n    dhs_geographic_shp_path = config['dhs_geographic_shp_path']\n    country_code = config['country_code']\n    dhs_gdf = dhs_data_manager.generate_dhs_cluster_level_data(\n        country,\n        dhs_household_dta_path, \n        dhs_geographic_shp_path, \n        col_rename_config=country_code,\n        convert_geoms_to_bbox=True,\n        bbox_size_km = 2.4,\n        overwrite_cache=True\n    ).reset_index(drop=True)\n\n    dhs_columns = list(set(dhs_columns + list(dhs_gdf.columns)))\n    \n\n    # Generate base features for the dhs dataframe\n    country_cluster_data = dhs_gdf.copy()\n    country_osm = config['country_osm']\n    ookla_year = config['ookla_year']\n    nightlights_year = config['nightlights_year']\n    \n    # Add in OSM features\n    country_cluster_data = osm.add_osm_poi_features(country_cluster_data, country_osm, osm_data_manager)\n    country_cluster_data = osm.add_osm_road_features(country_cluster_data, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    country_cluster_data = ookla.add_ookla_features(country_cluster_data, 'fixed', ookla_year, ookla_data_manager)\n    country_cluster_data = ookla.add_ookla_features(country_cluster_data, 'mobile', ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    country_cluster_data = nightlights.generate_nightlights_feature(country_cluster_data, nightlights_year) \n\n    country_cluster_data_list.append(country_cluster_data)\n\n# Combine all country data into a single dataframe\ncountries_cluster_data = gpd.GeoDataFrame(pd.concat(country_cluster_data_list,ignore_index=True), crs=country_cluster_data_list[0].crs)\n\nLoading data for Philippines\nOverwriting Philippines in cache\n\n\n2023-02-06 13:32:21.835 | DEBUG    | povertymapping.osm:load_pois:139 - OSM POIs for philippines found in cache.\n\n\nOverwriting Philippines in cache\n\n\n2023-02-06 13:32:26.132 | DEBUG    | povertymapping.osm:load_roads:158 - OSM Roads for philippines found in cache.\n2023-02-06 13:32:29.550 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:32:29.552 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in cache.\n2023-02-06 13:32:30.858 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:32:30.860 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in cache.\n2023-02-06 13:32:33.057 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nLoading data for Timor Leste\n\n\n2023-02-06 13:32:52.781 | DEBUG    | povertymapping.osm:load_pois:139 - OSM POIs for east-timor found in cache.\n\n\nOverwriting Timor Leste in cache\nOverwriting Timor Leste in cache\n\n\n2023-02-06 13:32:54.230 | DEBUG    | povertymapping.osm:load_roads:158 - OSM Roads for east-timor found in cache.\n2023-02-06 13:32:54.315 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:32:54.316 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in cache.\n2023-02-06 13:32:54.421 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:32:54.422 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in cache.\n2023-02-06 13:32:54.549 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nLoading data for Cambodia\n\n\n2023-02-06 13:33:01.196 | DEBUG    | povertymapping.osm:load_pois:139 - OSM POIs for cambodia found in cache.\n\n\nOverwriting Cambodia in cache\nOverwriting Cambodia in cache\n\n\n2023-02-06 13:33:02.679 | DEBUG    | povertymapping.osm:load_roads:158 - OSM Roads for cambodia found in cache.\n2023-02-06 13:33:03.002 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:33:03.003 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in cache.\n2023-02-06 13:33:03.240 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:33:03.241 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in cache.\n2023-02-06 13:33:03.465 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nLoading data for Myanmar\n\n\n2023-02-06 13:33:11.654 | DEBUG    | povertymapping.osm:load_pois:139 - OSM POIs for myanmar found in cache.\n\n\nOverwriting Myanmar in cache\nOverwriting Myanmar in cache\n\n\n2023-02-06 13:33:13.186 | DEBUG    | povertymapping.osm:load_roads:158 - OSM Roads for myanmar found in cache.\n2023-02-06 13:33:13.579 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:33:13.579 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in cache.\n2023-02-06 13:33:13.747 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0', '2aff65fdf8072457cba0d42873b7a9c2']\n2023-02-06 13:33:13.748 | DEBUG    | povertymapping.ookla:load_type_year_data:70 - Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in cache.\n2023-02-06 13:33:13.926 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 1min 12s, sys: 8.22 s, total: 1min 21s\nWall time: 1min 21s\n\n\n\n\nInspect the combined target country data\n\ncountries_cluster_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 87 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           2720 non-null   int64   \n 1   Wealth Index                       2720 non-null   float64 \n 2   DHSID                              2720 non-null   object  \n 3   DHSCC                              2720 non-null   object  \n 4   DHSYEAR                            2720 non-null   float64 \n 5   CCFIPS                             2720 non-null   object  \n 6   ADM1FIPS                           2720 non-null   object  \n 7   ADM1FIPSNA                         2720 non-null   object  \n 8   ADM1SALBNA                         2720 non-null   object  \n 9   ADM1SALBCO                         2720 non-null   object  \n 10  ADM1DHS                            2720 non-null   float64 \n 11  ADM1NAME                           2720 non-null   object  \n 12  DHSREGCO                           2720 non-null   float64 \n 13  DHSREGNA                           2720 non-null   object  \n 14  SOURCE                             2720 non-null   object  \n 15  URBAN_RURA                         2720 non-null   object  \n 16  LATNUM                             2720 non-null   float64 \n 17  LONGNUM                            2720 non-null   float64 \n 18  ALT_GPS                            2720 non-null   float64 \n 19  ALT_DEM                            2720 non-null   float64 \n 20  DATUM                              2720 non-null   object  \n 21  geometry                           2720 non-null   geometry\n 22  country_index                      2720 non-null   object  \n 23  poi_count                          2720 non-null   float64 \n 24  atm_count                          2720 non-null   float64 \n 25  atm_nearest                        2720 non-null   float64 \n 26  bank_count                         2720 non-null   float64 \n 27  bank_nearest                       2720 non-null   float64 \n 28  bus_station_count                  2720 non-null   float64 \n 29  bus_station_nearest                2720 non-null   float64 \n 30  cafe_count                         2720 non-null   float64 \n 31  cafe_nearest                       2720 non-null   float64 \n 32  charging_station_count             2720 non-null   float64 \n 33  charging_station_nearest           2720 non-null   float64 \n 34  courthouse_count                   2720 non-null   float64 \n 35  courthouse_nearest                 2720 non-null   float64 \n 36  dentist_count                      2720 non-null   float64 \n 37  dentist_nearest                    2720 non-null   float64 \n 38  fast_food_count                    2720 non-null   float64 \n 39  fast_food_nearest                  2720 non-null   float64 \n 40  fire_station_count                 2720 non-null   float64 \n 41  fire_station_nearest               2720 non-null   float64 \n 42  food_court_count                   2720 non-null   float64 \n 43  food_court_nearest                 2720 non-null   float64 \n 44  fuel_count                         2720 non-null   float64 \n 45  fuel_nearest                       2720 non-null   float64 \n 46  hospital_count                     2720 non-null   float64 \n 47  hospital_nearest                   2720 non-null   float64 \n 48  library_count                      2720 non-null   float64 \n 49  library_nearest                    2720 non-null   float64 \n 50  marketplace_count                  2720 non-null   float64 \n 51  marketplace_nearest                2720 non-null   float64 \n 52  pharmacy_count                     2720 non-null   float64 \n 53  pharmacy_nearest                   2720 non-null   float64 \n 54  police_count                       2720 non-null   float64 \n 55  police_nearest                     2720 non-null   float64 \n 56  post_box_count                     2720 non-null   float64 \n 57  post_box_nearest                   2720 non-null   float64 \n 58  post_office_count                  2720 non-null   float64 \n 59  post_office_nearest                2720 non-null   float64 \n 60  restaurant_count                   2720 non-null   float64 \n 61  restaurant_nearest                 2720 non-null   float64 \n 62  social_facility_count              2720 non-null   float64 \n 63  social_facility_nearest            2720 non-null   float64 \n 64  supermarket_count                  2720 non-null   float64 \n 65  supermarket_nearest                2720 non-null   float64 \n 66  townhall_count                     2720 non-null   float64 \n 67  townhall_nearest                   2720 non-null   float64 \n 68  road_count                         2720 non-null   float64 \n 69  fixed_2019_mean_avg_d_kbps_mean    1443 non-null   float64 \n 70  fixed_2019_mean_avg_u_kbps_mean    1443 non-null   float64 \n 71  fixed_2019_mean_avg_lat_ms_mean    1443 non-null   float64 \n 72  fixed_2019_mean_num_tests_mean     1443 non-null   float64 \n 73  fixed_2019_mean_num_devices_mean   1443 non-null   float64 \n 74  mobile_2019_mean_avg_d_kbps_mean   1707 non-null   float64 \n 75  mobile_2019_mean_avg_u_kbps_mean   1707 non-null   float64 \n 76  mobile_2019_mean_avg_lat_ms_mean   1707 non-null   float64 \n 77  mobile_2019_mean_num_tests_mean    1707 non-null   float64 \n 78  mobile_2019_mean_num_devices_mean  1707 non-null   float64 \n 79  avg_rad_min                        2720 non-null   float64 \n 80  avg_rad_max                        2720 non-null   float64 \n 81  avg_rad_mean                       2720 non-null   float64 \n 82  avg_rad_std                        2720 non-null   float64 \n 83  avg_rad_median                     2720 non-null   float64 \n 84  F21                                0 non-null      object  \n 85  F22                                0 non-null      object  \n 86  F23                                0 non-null      object  \ndtypes: float64(69), geometry(1), int64(1), object(16)\nmemory usage: 1.8+ MB\n\n\n\ncountries_cluster_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n      F21\n      F22\n      F23\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.008752\n      0.008752\n      0.226479\n      0.303841\n      0.257313\n      0.020025\n      0.260396\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.198795\n      0.119334\n      0.261510\n      6.881082\n      1.390439\n      1.719010\n      0.452909\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.075383\n      0.049202\n      0.224655\n      0.865518\n      0.343708\n      0.146519\n      0.288261\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      4\n      -54952.666667\n      PH201700000004\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      0.203245\n      0.264794\n      0.227876\n      0.016931\n      0.226401\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      6\n      -80701.695652\n      PH201700000006\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      0.232324\n      0.285085\n      0.250609\n      0.012259\n      0.246076\n      NaN\n      NaN\n      NaN\n    \n  \n\n5 rows × 87 columns\n\n\n\n\n# Check if DHS CC can be used as a country grouping column\ncountries_cluster_data['DHSCC'].value_counts()\n\nPH    1213\nKH     611\nTL     455\nMM     441\nName: DHSCC, dtype: int64\n\n\n\n# Explore as a map with first 30 columns in tooltip\ncountries_cluster_data.iloc[:, :30].explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#data-preparation",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#data-preparation",
    "title": "Index Recalculation",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nHotfix for Cambodia\nFor the Cambodia data specifically, the drinking water column in the base files is actually separated by wet and dry season. We’ll edit the cached data to add a “drinking water” column as the mean of the dry/wet columns\n\ndhs_kh_household_temp = dhs_data_manager.household_data[\"Cambodia\"].copy()\ndhs_kh_household_temp[['drinking water', 'source of drinking water during the dry season', 'source of drinking water during wet season']]\n\n\n\n\n\n  \n    \n      \n      drinking water\n      source of drinking water during the dry season\n      source of drinking water during wet season\n    \n  \n  \n    \n      0\n      NaN\n      43.0\n      51.0\n    \n    \n      1\n      NaN\n      43.0\n      43.0\n    \n    \n      2\n      NaN\n      51.0\n      51.0\n    \n    \n      3\n      NaN\n      51.0\n      51.0\n    \n    \n      4\n      NaN\n      43.0\n      51.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      15820\n      NaN\n      43.0\n      31.0\n    \n    \n      15821\n      NaN\n      31.0\n      31.0\n    \n    \n      15822\n      NaN\n      32.0\n      32.0\n    \n    \n      15823\n      NaN\n      32.0\n      32.0\n    \n    \n      15824\n      NaN\n      43.0\n      51.0\n    \n  \n\n15825 rows × 3 columns\n\n\n\n\ndhs_data_manager.household_data[\"Cambodia\"][\"drinking water\"] = dhs_kh_household_temp[[\n    'source of drinking water during the dry season', \n    'source of drinking water during wet season']].mean(axis=1)\ndhs_data_manager.household_data[\"Cambodia\"][\"drinking water\"]\n\n0        47.0\n1        43.0\n2        51.0\n3        51.0\n4        47.0\n         ... \n15820    37.0\n15821    31.0\n15822    32.0\n15823    32.0\n15824    47.0\nName: drinking water, Length: 15825, dtype: float64\n\n\n\n\nGet the recomputed wealth index\nAfter loading the DHS data using the DHSDataManager class, we can then run recompute_index_cluster_level to get the recomputed wealth index, pooling together data for all countries specified.\n\nfeatures = [\n    \"rooms\",\n    \"electric\",\n    \"mobile telephone\",\n    \"radio\",\n    \"television\",\n    \"car/truck\",\n    \"refrigerator\",\n    \"motorcycle\",\n    \"floor\",\n    \"toilet\",\n    \"drinking water\",\n]\n\n\n# Get country list from country_config's keys\ncountries = list(country_config.keys())\n\nrecomputed_index_df = dhs_data_manager.recompute_index_cluster_level(countries, index_features=features)\nrecomputed_index_df = recomputed_index_df[['DHSID', 'country_index', 'Wealth Index', 'Recomputed Wealth Index']]\n\nrecomputed_index_df.info()\n\nCombining household data for the ff. countries: ['Philippines', 'Timor Leste', 'Cambodia', 'Myanmar']\nCombining cluster data for the ff. countries: ['Philippines', 'Timor Leste', 'Cambodia', 'Myanmar']\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2720 entries, 0 to 2719\nData columns (total 4 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   DHSID                    2720 non-null   object \n 1   country_index            2720 non-null   object \n 2   Wealth Index             2720 non-null   float64\n 3   Recomputed Wealth Index  2720 non-null   float64\ndtypes: float64(2), object(2)\nmemory usage: 106.2+ KB"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#sense-check-the-index-output",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#sense-check-the-index-output",
    "title": "Index Recalculation",
    "section": "Sense check the index output",
    "text": "Sense check the index output\n\nhousehold_df = dhs_data_manager.get_household_level_data_by_country(countries)\nhousehold_df[[\"country_index\", \"DHSCLUST\"] + features].groupby(['country_index'])[features].count()\n\nCombining household data for the ff. countries: ['Philippines', 'Timor Leste', 'Cambodia', 'Myanmar']\n\n\n\n\n\n\n  \n    \n      \n      rooms\n      electric\n      mobile telephone\n      radio\n      television\n      car/truck\n      refrigerator\n      motorcycle\n      floor\n      toilet\n      drinking water\n    \n    \n      country_index\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Cambodia\n      15806\n      15823\n      15823\n      15823\n      15823\n      15822\n      15823\n      15823\n      15824\n      15821\n      15821\n    \n    \n      Myanmar\n      12491\n      12500\n      12500\n      12500\n      12500\n      12500\n      12500\n      12500\n      12500\n      12500\n      12500\n    \n    \n      Philippines\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n      27496\n    \n    \n      Timor Leste\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n      11502\n    \n  \n\n\n\n\n\n# Check differences between distributions\nsns.set_palette(\"Set3\", 4)\nfig, axes = plt.subplots(2, 1, figsize=(6,6))\nsns.violinplot(data=recomputed_index_df, x=\"Wealth Index\", y=\"country_index\", scale=\"count\", ax=axes[0])\nsns.violinplot(data=recomputed_index_df, x=\"Recomputed Wealth Index\", y=\"country_index\", scale=\"count\", ax=axes[1])\nplt.tight_layout()\n\n\n\n\n\nsns.lmplot(data=recomputed_index_df, x='Wealth Index', y='Recomputed Wealth Index', col='country_index', hue='country_index', col_wrap=2)\n\n<seaborn.axisgrid.FacetGrid at 0x7f256938c520>\n\n\n\n\n\n\nrecomputed_index_df.groupby('country_index')[['Wealth Index','Recomputed Wealth Index']].corr().unstack().iloc[:,1]\n\ncountry_index\nCambodia      -0.064569\nMyanmar        0.607073\nPhilippines    0.583243\nTimor Leste    0.082531\nName: (Wealth Index, Recomputed Wealth Index), dtype: float64\n\n\n\n## Join the wealth index to countries_cluster_data\ncountries_pooled_index_data = countries_cluster_data.merge(recomputed_index_df[['DHSID', 'Recomputed Wealth Index']], on='DHSID')\n\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Recomputed Wealth Index'\n# label_col = 'Wealth Index'\n# normalize_labels = 'single-country' # False, 'cross-country' or 'single_country'\n# normalize_labels = 'cross-country'\nnormalize_labels = False\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = countries_pooled_index_data[[label_col]]\n\n# For features, drop all columns from the input dhs files\n# If you need the cluster data, refer to country_data / country_test\nfeatures = countries_pooled_index_data.drop(dhs_columns + ['Recomputed Wealth Index'], axis=1)\n\nfeatures.shape, labels.shape\n\n((2720, 61), (2720, 1))\n\n\n\n\nNormalize labels\n\nif normalize_labels is not False:\n    scaler = MinMaxScaler(feature_range=(0,1))\n    if normalize_labels == 'cross-country':      \n        labels[labels.columns] = scaler.fit_transform(labels)\n    elif normalize_labels == 'single-country':\n        labels_temp = labels.copy()\n        labels_temp['group_col'] = countries_pooled_index_data['DHSCC']\n        labels_temp[f'{label_col}_scaled'] = labels_temp.groupby('group_col', group_keys=False)[label_col].apply(lambda x: (x-min(x))/(max(x)-min(x)))\n        labels[label_col] = labels_temp[f'{label_col}_scaled']\ndisplay(labels)\n\n\n\n\n\n  \n    \n      \n      Recomputed Wealth Index\n    \n  \n  \n    \n      0\n      18.080350\n    \n    \n      1\n      16.439871\n    \n    \n      2\n      31.709942\n    \n    \n      3\n      22.203231\n    \n    \n      4\n      33.894957\n    \n    \n      ...\n      ...\n    \n    \n      2715\n      44.715195\n    \n    \n      2716\n      25.647813\n    \n    \n      2717\n      42.631003\n    \n    \n      2718\n      31.750987\n    \n    \n      2719\n      55.465443\n    \n  \n\n2720 rows × 1 columns\n\n\n\n\nfeatures.columns\n\nIndex(['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count', 'bus_station_nearest', 'cafe_count',\n       'cafe_nearest', 'charging_station_count', 'charging_station_nearest',\n       'courthouse_count', 'courthouse_nearest', 'dentist_count',\n       'dentist_nearest', 'fast_food_count', 'fast_food_nearest',\n       'fire_station_count', 'fire_station_nearest', 'food_court_count',\n       'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count',\n       'hospital_nearest', 'library_count', 'library_nearest',\n       'marketplace_count', 'marketplace_nearest', 'pharmacy_count',\n       'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count',\n       'post_box_nearest', 'post_office_count', 'post_office_nearest',\n       'restaurant_count', 'restaurant_nearest', 'social_facility_count',\n       'social_facility_nearest', 'supermarket_count', 'supermarket_nearest',\n       'townhall_count', 'townhall_nearest', 'road_count',\n       'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean',\n       'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean',\n       'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean',\n       'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean',\n       'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean',\n       'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std',\n       'avg_rad_median'],\n      dtype='object')\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2720 entries, 0 to 2719\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          2720 non-null   float64\n 1   atm_count                          2720 non-null   float64\n 2   atm_nearest                        2720 non-null   float64\n 3   bank_count                         2720 non-null   float64\n 4   bank_nearest                       2720 non-null   float64\n 5   bus_station_count                  2720 non-null   float64\n 6   bus_station_nearest                2720 non-null   float64\n 7   cafe_count                         2720 non-null   float64\n 8   cafe_nearest                       2720 non-null   float64\n 9   charging_station_count             2720 non-null   float64\n 10  charging_station_nearest           2720 non-null   float64\n 11  courthouse_count                   2720 non-null   float64\n 12  courthouse_nearest                 2720 non-null   float64\n 13  dentist_count                      2720 non-null   float64\n 14  dentist_nearest                    2720 non-null   float64\n 15  fast_food_count                    2720 non-null   float64\n 16  fast_food_nearest                  2720 non-null   float64\n 17  fire_station_count                 2720 non-null   float64\n 18  fire_station_nearest               2720 non-null   float64\n 19  food_court_count                   2720 non-null   float64\n 20  food_court_nearest                 2720 non-null   float64\n 21  fuel_count                         2720 non-null   float64\n 22  fuel_nearest                       2720 non-null   float64\n 23  hospital_count                     2720 non-null   float64\n 24  hospital_nearest                   2720 non-null   float64\n 25  library_count                      2720 non-null   float64\n 26  library_nearest                    2720 non-null   float64\n 27  marketplace_count                  2720 non-null   float64\n 28  marketplace_nearest                2720 non-null   float64\n 29  pharmacy_count                     2720 non-null   float64\n 30  pharmacy_nearest                   2720 non-null   float64\n 31  police_count                       2720 non-null   float64\n 32  police_nearest                     2720 non-null   float64\n 33  post_box_count                     2720 non-null   float64\n 34  post_box_nearest                   2720 non-null   float64\n 35  post_office_count                  2720 non-null   float64\n 36  post_office_nearest                2720 non-null   float64\n 37  restaurant_count                   2720 non-null   float64\n 38  restaurant_nearest                 2720 non-null   float64\n 39  social_facility_count              2720 non-null   float64\n 40  social_facility_nearest            2720 non-null   float64\n 41  supermarket_count                  2720 non-null   float64\n 42  supermarket_nearest                2720 non-null   float64\n 43  townhall_count                     2720 non-null   float64\n 44  townhall_nearest                   2720 non-null   float64\n 45  road_count                         2720 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean    2720 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean    2720 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean    2720 non-null   float64\n 49  fixed_2019_mean_num_tests_mean     2720 non-null   float64\n 50  fixed_2019_mean_num_devices_mean   2720 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean   2720 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean   2720 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean   2720 non-null   float64\n 54  mobile_2019_mean_num_tests_mean    2720 non-null   float64\n 55  mobile_2019_mean_num_devices_mean  2720 non-null   float64\n 56  avg_rad_min                        2720 non-null   float64\n 57  avg_rad_max                        2720 non-null   float64\n 58  avg_rad_mean                       2720 non-null   float64\n 59  avg_rad_std                        2720 non-null   float64\n 60  avg_rad_median                     2720 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.3 MB"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#model-training",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#model-training",
    "title": "Index Recalculation",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ngroupkfold_col = 'DHSCC'\n# cv_num_splits = 5\n# cv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing GroupKFold CV with groups based on DHSCC...\")\ngroups = countries_pooled_index_data[groupkfold_col].values\ncv = GroupKFold(n_splits = len(set(groups)))\n\nprint(cv.split(features, groups=groups))\nprint(f'Number of splits based on DHSCC unique values: {cv.get_n_splits()}')\n\nPerforming GroupKFold CV with groups based on DHSCC...\n<generator object _BaseKFold.split at 0x7f2564373eb0>\nNumber of splits based on DHSCC unique values: 4\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\n\nsns.set_palette(\"tab10\")\nsplit_r2_list = []\n\nfor i, (train, test) in enumerate(cv.split(features, labels,groups=groups)):\n    print(f'Split# {i+1}')\n\n    # Print info about current split\n    train_labels = set(groups[train])\n    test_labels = set(groups[test])\n    print(f'Train countries (num samples): {train_labels} ({len(train)})')\n    print(f'Test countries (num samples): {test_labels} ({len(test)})')\n\n    # Split data into train/test\n    X_train = features.values[train]\n    X_test = features.values[test]\n    y_train = labels.values.ravel()[train]\n    y_test = labels.values.ravel()[test]\n\n    # print('Input shapes (X_train, X_test, y_train, y_test): ',np.shape(X_train), np.shape(X_test), np.shape(y_train), np.shape(y_test))\n\n    # Train model and get r2\n    model.fit(X_train, y_train)\n    split_r2 = r2_score(y_test, model.predict(X_test))\n    split_r2_list.append(split_r2)\n    print(f'Split r^2: {round(split_r2,2)} \\n')\n\n    # Plot histogram of labels\n    fig, ax = plt.subplots(2,1, sharex=True, figsize=(5,4))\n    ax[0].hist(y_train, bins=20)\n    ax[0].set_title(f'train countries: {train_labels}')\n    ax[1].hist(y_test, bins=20)\n    ax[1].set_title(f'test countries: {test_labels}')\n    ax[1].set_xlabel('Wealth Index')\n    fig.suptitle(f'Split# {i+1} Labels (model $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\n    # Plot scatter plot\n    fig, ax = plt.subplots(1,1, figsize=(5,4))\n    ax.scatter(y_train, model.predict(X_train), label=\"train\")\n    ax.scatter(y_test, model.predict(X_test), label=\"test\")\n    ax.plot([0,1],[0,1], transform=ax.transAxes, linestyle='dashed', color='k')\n    ax.set_xlabel(\"True Value\")\n    ax.set_ylabel(\"Predicted Value\")\n    ax.legend()    \n    fig.suptitle(f'Split#{i+1} (test $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\nsplit_r2_mean = round(np.array(split_r2_list).mean(), 2)\nsplit_r2_std = round(np.array(split_r2_list).std(), 2)\nprint(f'Mean split r^2  (std): {split_r2_mean} ({split_r2_std})')\n\n\nSplit# 1\nTrain countries (num samples): {'KH', 'TL', 'MM'} (1507)\nTest countries (num samples): {'PH'} (1213)\nSplit r^2: -0.01 \n\n\n\n\n\n\n\n\n\nSplit# 2\nTrain countries (num samples): {'MM', 'TL', 'PH'} (2109)\nTest countries (num samples): {'KH'} (611)\nSplit r^2: -1.45 \n\n\n\n\n\n\n\n\n\nSplit# 3\nTrain countries (num samples): {'KH', 'MM', 'PH'} (2265)\nTest countries (num samples): {'TL'} (455)\nSplit r^2: -2.74 \n\n\n\n\n\n\n\n\n\nSplit# 4\nTrain countries (num samples): {'KH', 'TL', 'PH'} (2279)\nTest countries (num samples): {'MM'} (441)\nSplit r^2: 0.01 \n\n\n\n\n\n\n\n\n\nMean split r^2  (std): -1.05 (1.14)"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#exploratory-data-analysis",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#exploratory-data-analysis",
    "title": "Index Recalculation",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nPer-country wealth index\n\ncountries_pooled_index_data['Wealth Index'].hist(by=countries_pooled_index_data['DHSCC'], figsize = (4,6),layout=(4,1),  sharex=True, xrot=0, bins=20)\nplt.suptitle('Wealth Index')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\ncountries_pooled_index_data['Recomputed Wealth Index'].hist(by=countries_pooled_index_data['DHSCC'], figsize = (4,6),layout=(4,1),  sharex=True, xrot=0, bins=20)\nplt.suptitle('Recomputed Wealth Index')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#per-country-features",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/2023-02-06_index_recalculation.html#per-country-features",
    "title": "Index Recalculation",
    "section": "Per-country features",
    "text": "Per-country features\n\nfeatures.columns\n\nIndex(['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count', 'bus_station_nearest', 'cafe_count',\n       'cafe_nearest', 'charging_station_count', 'charging_station_nearest',\n       'courthouse_count', 'courthouse_nearest', 'dentist_count',\n       'dentist_nearest', 'fast_food_count', 'fast_food_nearest',\n       'fire_station_count', 'fire_station_nearest', 'food_court_count',\n       'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count',\n       'hospital_nearest', 'library_count', 'library_nearest',\n       'marketplace_count', 'marketplace_nearest', 'pharmacy_count',\n       'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count',\n       'post_box_nearest', 'post_office_count', 'post_office_nearest',\n       'restaurant_count', 'restaurant_nearest', 'social_facility_count',\n       'social_facility_nearest', 'supermarket_count', 'supermarket_nearest',\n       'townhall_count', 'townhall_nearest', 'road_count',\n       'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean',\n       'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean',\n       'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean',\n       'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean',\n       'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean',\n       'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std',\n       'avg_rad_median'],\n      dtype='object')\n\n\n\nfeatures_list = [\n    'avg_rad_mean', \n    'avg_rad_median', \n    'fixed_2019_mean_avg_d_kbps_mean', \n    'fixed_2019_mean_avg_u_kbps_mean',\n    'fixed_2019_mean_avg_lat_ms_mean', \n    'fixed_2019_mean_num_tests_mean',\n    'fixed_2019_mean_num_devices_mean', \n    'mobile_2019_mean_avg_d_kbps_mean',\n    'mobile_2019_mean_avg_u_kbps_mean', \n    'mobile_2019_mean_avg_lat_ms_mean',\n    'mobile_2019_mean_num_tests_mean', \n    'mobile_2019_mean_num_devices_mean',\n]\n\nfor feature in features_list:\n    countries_pooled_index_data[feature].hist(by=countries_pooled_index_data['DHSCC'], figsize = (4,6),layout=(4,1), xrot=0, bins=20)\n    plt.suptitle(f'{feature} per country')\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/dhs_crosscountry_refactor_tests.html",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/dhs_crosscountry_refactor_tests.html",
    "title": "UNICEF AI4D Poverty Mapping Project",
    "section": "",
    "text": "DHS Cross Country Refactor Tests\nThis notebook tests the refactors made to dhs.py to accomodate cross-country operations.\n\nimport sys\nsys.path.append(\"../../\")\n\nfrom povertymapping import settings\nfrom povertymapping.dhs import DHSDataManager\nfrom geowrangler import dhs\n\n\n%reload_ext autoreload\n%autoreload 2\n\n\ndhsmanager = DHSDataManager()\n\n\ndhsmanager.view_cache_keys()\n\nHousehold:  [] Cluster:  []\n\n\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\ndhsmanager.generate_dhs_household_level_data(\n    'Timor Leste',\n    country_config['Timor Leste']['dhs_household_dta_path'],\n    col_rename_config=country_config['Timor Leste']['country_code'], \n    overwrite_cache=True\n)\n\nOverwriting Timor Leste in cache\n\n\n\n\n\n\n  \n    \n      \n      case identification\n      country code and phase\n      DHSCLUST\n      household number\n      respondent's line number (answering household questionnaire)\n      ultimate area unit\n      household sample weight (6 decimals)\n      month of interview\n      year of interview\n      date of interview (cmc)\n      date of interview century day code (cdc)\n      number of household members\n      number of eligible women in household\n      number of eligible men in household\n      number of de jure members\n      number of de facto members\n      number of children 5 and under (de jure)\n      result of household interview\n      day of interview\n      number of visits\n      interviewer identification\n      na - keyer identification\n      ever-married sample\n      primary sampling unit\n      sample strata for sampling errors\n      stratification used in sample design\n      region\n      type of place of residence\n      na - place of residence\n      household selected for male interview\n      household weight for male subsample (6 decimals)\n      field supervisor\n      na - field editor\n      na - office editor\n      number of eligible children for height and weight\n      cluster altitude in meters\n      total adults measured\n      household selected for hemoglobin\n      household selected for domestic violence module\n      language of questionnaire\n      ...\n      net treated since receiving\n      time since last re-treatment (months)\n      insecticide-treated net (itn)\n      number of persons who slept under this net\n      someone slept under this net last night\n      line number of person who slept in this net\n      na - line number of person who slept in this net\n      obtained net from campaign, antenatal or immunization visit\n      place where net was obtained\n      type of mosquito bed net(s) person slept under last night\n      net designation number (hmlidx) for 1st net person slept under last night\n      net designation number (hmlidx) for 2nd net person slept under last night\n      net designation number (hmlidx) for 3rd net person slept under last night\n      corrected age from individual file\n      na - age in months (for children)\n      flag for age from individual file\n      pregnancy status from individual file\n      person slept under an ever-treated net\n      person slept under an llin net\n      na - line number of parent/caretaker (for malaria testing)\n      na - read consent statement for malaria\n      na - final result of malaria from blood smear test\n      na - presence of species: falciparum (pf)\n      na - presence of species: malariae (pm)\n      na - presence of species: ovale (po)\n      na - presence of species: vivax (pv)\n      na - presence of species: cs\n      na - result of malaria measurement\n      na - bar code for blood smear sample\n      na - result of malaria rapid test\n      wear glasses or contact lenses\n      have difficulty seeing\n      wear a hearing aid\n      have difficulty hearing\n      have difficulty communicating using usual language\n      have difficulty remembering or concentrating\n      have difficulty walking or climbing steps\n      have difficulty washing all over or dressing\n      highest degree of difficulty for any of the impairments\n      country_index\n    \n  \n  \n    \n      0\n      1  1\n      TL7\n      1\n      1\n      1\n      1\n      478354\n      9\n      2016\n      1401\n      42632\n      6\n      1\n      2\n      6\n      6\n      0\n      1\n      19\n      1\n      23\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      1\n      481958\n      20\n      NaN\n      NaN\n      0\n      1005\n      2\n      1\n      0\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      4.0\n      1.0\n      1.0\n      NaN\n      1.0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      44\n      NaN\n      1\n      NaN\n      1\n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      1\n      1  2\n      TL7\n      1\n      2\n      2\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      4\n      1\n      0\n      4\n      4\n      0\n      1\n      20\n      1\n      25\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0\n      1005\n      1\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      0\n      NaN\n      NaN\n      98\n      NaN\n      0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      1\n      2\n      NaN\n      1\n      1\n      1\n      1\n      1\n      2\n      Timor Leste\n    \n    \n      2\n      1  3\n      TL7\n      1\n      3\n      1\n      1\n      478354\n      9\n      2016\n      1401\n      42632\n      6\n      2\n      0\n      6\n      6\n      0\n      1\n      19\n      1\n      22\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0\n      1005\n      2\n      0\n      1\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      1.0\n      1.0\n      1.0\n      NaN\n      3.0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      63\n      NaN\n      0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      1\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      3\n      1  4\n      TL7\n      1\n      4\n      4\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      9\n      4\n      1\n      9\n      9\n      0\n      1\n      20\n      1\n      23\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      1\n      481958\n      20\n      NaN\n      NaN\n      0\n      1005\n      5\n      1\n      0\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      2.0\n      1.0\n      6.0\n      NaN\n      1.0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      63\n      NaN\n      0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      1\n      1\n      NaN\n      2\n      1\n      1\n      1\n      1\n      2\n      Timor Leste\n    \n    \n      4\n      1  5\n      TL7\n      1\n      5\n      3\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      5\n      2\n      0\n      5\n      5\n      0\n      1\n      20\n      1\n      21\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0\n      1005\n      2\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      0\n      NaN\n      NaN\n      42\n      NaN\n      0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      1\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      11497\n      455 22\n      TL7\n      455\n      22\n      3\n      455\n      1157683\n      12\n      2016\n      1404\n      42713\n      7\n      1\n      2\n      7\n      7\n      2\n      1\n      9\n      1\n      134\n      NaN\n      0\n      455\n      26\n      26\n      13\n      2\n      NaN\n      1\n      1153875\n      130\n      NaN\n      NaN\n      1\n      16\n      3\n      1\n      0\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      2.0\n      1.0\n      1.0\n      NaN\n      3.0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      63\n      NaN\n      0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      11498\n      455 23\n      TL7\n      455\n      23\n      1\n      455\n      1157683\n      12\n      2016\n      1404\n      42713\n      4\n      1\n      0\n      4\n      4\n      0\n      1\n      9\n      1\n      133\n      NaN\n      0\n      455\n      26\n      26\n      13\n      2\n      NaN\n      0\n      0\n      130\n      NaN\n      NaN\n      0\n      16\n      1\n      0\n      1\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      2.0\n      1.0\n      1.0\n      NaN\n      3.0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      44\n      NaN\n      0\n      NaN\n      1\n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      1\n      NaN\n      1\n      1\n      1\n      2\n      1\n      2\n      Timor Leste\n    \n    \n      11499\n      455 24\n      TL7\n      455\n      24\n      3\n      455\n      1157683\n      12\n      2016\n      1404\n      42713\n      5\n      1\n      0\n      5\n      5\n      0\n      1\n      9\n      1\n      134\n      NaN\n      0\n      455\n      26\n      26\n      13\n      2\n      NaN\n      0\n      0\n      130\n      NaN\n      NaN\n      0\n      16\n      1\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      0\n      NaN\n      NaN\n      53\n      NaN\n      0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      11500\n      455 25\n      TL7\n      455\n      25\n      2\n      455\n      1157683\n      12\n      2016\n      1404\n      42713\n      4\n      1\n      1\n      4\n      4\n      1\n      1\n      9\n      1\n      131\n      NaN\n      0\n      455\n      26\n      26\n      13\n      2\n      NaN\n      1\n      1153875\n      130\n      NaN\n      NaN\n      1\n      16\n      2\n      1\n      0\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      3.0\n      1.0\n      2.0\n      NaN\n      3.0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      29\n      NaN\n      1\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      1\n      NaN\n      1\n      1\n      1\n      1\n      1\n      1\n      Timor Leste\n    \n    \n      11501\n      455 26\n      TL7\n      455\n      26\n      3\n      455\n      1157683\n      12\n      2016\n      1404\n      42713\n      6\n      1\n      0\n      6\n      6\n      2\n      1\n      9\n      1\n      132\n      NaN\n      0\n      455\n      26\n      26\n      13\n      2\n      NaN\n      0\n      0\n      130\n      NaN\n      NaN\n      2\n      16\n      1\n      0\n      1\n      2\n      ...\n      2.0\n      NaN\n      1.0\n      4.0\n      1.0\n      3.0\n      NaN\n      2.0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      70\n      NaN\n      0\n      NaN\n      0\n      0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      \n      NaN\n      0\n      2\n      NaN\n      2\n      1\n      1\n      1\n      1\n      2\n      Timor Leste\n    \n  \n\n11502 rows × 317 columns\n\n\n\n\ndhsmanager.generate_dhs_household_level_data(\n    'Philippines',\n    country_config['Philippines']['dhs_household_dta_path'],\n    col_rename_config=country_config['Philippines']['country_code'], \n    overwrite_cache=True\n)\n\nOverwriting Philippines in cache\n\n\n\n\n\n\n  \n    \n      \n      case identification\n      country code and phase\n      DHSCLUST\n      household number\n      respondent's line number (answering household questionnaire)\n      ultimate area unit\n      household sample weight (6 decimals)\n      month of interview\n      year of interview\n      date of interview (cmc)\n      date of interview century day code (cdc)\n      number of household members\n      number of eligible women in household\n      na - number of eligible men in household\n      number of de jure members\n      number of de facto members\n      number of children 5 and under (de jure)\n      result of household interview\n      day of interview\n      number of visits\n      interviewer identification\n      na - keyer identification\n      ever-married sample\n      primary sampling unit\n      sample strata for sampling errors\n      stratification used in sample design\n      region\n      type of place of residence\n      na - place of residence\n      household selected for male interview\n      household weight for male subsample (6 decimals)\n      field supervisor\n      na - field editor\n      na - office editor\n      na - number of eligible children for height and weight\n      na - cluster altitude in meters\n      na - total adults measured\n      household selected for hemoglobin\n      household selected for domestic violence module\n      language of questionnaire\n      ...\n      no money\n      worried about treatment cost\n      home remedy is available\n      health facility is not philhealth acredited\n      no need/regular checkup only\n      how long took travel from home to health facility: hour\n      how long took travel from home to health facility: minutes\n      cost of travel to health facility in php\n      cost of treatment at facility in php\n      amount in php spent (donations) in consultation, advice or treatment\n      method of payment: salary\n      method of payment: loan\n      method of payment: savings\n      method of payment: donation\n      method of payment: philhealth\n      method of payment: sss/gsis/ecc\n      method of payment: insurance\n      method of payment: other\n      line number from column 1 of hh schedule\n      where was he/she confined\n      why was he/she confined in a hospital/clinic\n      duration of confinement in days\n      where medicines bought from any pharmacy apart from medicine paid for in the hos\n      how much was paid for medicines  (php)\n      where services paid for in any laboratory, apart from the services paid for in t\n      how much was paid for lab services (php)\n      how much for the services/medicine combined was paid using salary/loans/sales (p\n      how much for the services/medicine combined was paid using philhealth  (php)\n      how much was the total hospital bill for last confinement - donations  (php)\n      how much of the total hospital bill was paid for out of salary/loans/sales  (php\n      how much was the total hospital bill for last confinement - cost  (php)\n      why he/she did not get philhealth benefits - not a philhealth member\n      why he/she did not get philhealth benefits - philhealth member but not eligible\n      why he/she did not get philhealth benefits - probably used philhealth cannot rem\n      why he/she did not get philhealth benefits - too many requirements to comply wit\n      why he/she did not get philhealth benefits - limited hospitalization benefits\n      why he/she did not get philhealth benefits - claims processing too long\n      why he/she did not get philhealth benefits - other\n      why he/she did not get philhealth benefits - don't know\n      country_index\n    \n  \n  \n    \n      0\n      00010001\n      PH7\n      1\n      1\n      1\n      1\n      364301\n      8\n      2017\n      1412\n      42961\n      8\n      2\n      NaN\n      8\n      8\n      1\n      1\n      14\n      1\n      8300\n      NaN\n      0\n      1\n      1\n      1\n      15\n      2\n      NaN\n      0\n      0\n      8300\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      0.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      3.0\n      20.0\n      1000.0\n      NaN\n      1.0\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      1\n      00010002\n      PH7\n      1\n      2\n      4\n      1\n      364301\n      8\n      2017\n      1412\n      42964\n      5\n      2\n      NaN\n      5\n      5\n      1\n      1\n      17\n      1\n      8303\n      NaN\n      0\n      1\n      1\n      1\n      15\n      2\n      NaN\n      0\n      0\n      8300\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      2\n      00010004\n      PH7\n      1\n      4\n      2\n      1\n      364301\n      8\n      2017\n      1412\n      42963\n      4\n      1\n      NaN\n      4\n      4\n      0\n      1\n      16\n      1\n      8303\n      NaN\n      0\n      1\n      1\n      1\n      15\n      2\n      NaN\n      0\n      0\n      8300\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      3\n      00010007\n      PH7\n      1\n      7\n      2\n      1\n      364301\n      8\n      2017\n      1412\n      42962\n      5\n      1\n      NaN\n      5\n      5\n      2\n      1\n      15\n      1\n      8302\n      NaN\n      0\n      1\n      1\n      1\n      15\n      2\n      NaN\n      0\n      0\n      8300\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      4\n      00010008\n      PH7\n      1\n      8\n      1\n      1\n      364301\n      8\n      2017\n      1412\n      42961\n      11\n      0\n      NaN\n      11\n      9\n      0\n      1\n      14\n      1\n      8303\n      NaN\n      0\n      1\n      1\n      1\n      15\n      2\n      NaN\n      0\n      0\n      8300\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      27491\n      12500022\n      PH7\n      1250\n      22\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      5\n      1\n      NaN\n      5\n      5\n      3\n      1\n      22\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      27492\n      12500023\n      PH7\n      1250\n      23\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      5\n      1\n      NaN\n      4\n      5\n      0\n      1\n      22\n      1\n      7901\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      3.0\n      3.0\n      0.0\n      5.0\n      NaN\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      33.0\n      1.0\n      1.0\n      1.0\n      1000.0\n      0.0\n      NaN\n      1000.0\n      0.0\n      2000.0\n      2000.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n      Philippines\n    \n    \n      27493\n      12500024\n      PH7\n      1250\n      24\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      4\n      1\n      NaN\n      4\n      4\n      2\n      1\n      22\n      1\n      7901\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      27494\n      12500025\n      PH7\n      1250\n      25\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      7\n      0\n      NaN\n      6\n      3\n      2\n      1\n      22\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n    \n      27495\n      12500026\n      PH7\n      1250\n      26\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42971\n      3\n      1\n      NaN\n      3\n      3\n      1\n      1\n      24\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Philippines\n    \n  \n\n27496 rows × 549 columns\n\n\n\n\ndhsmanager.view_cache_keys()\n\nHousehold:  ['Timor Leste', 'Philippines'] Cluster:  []\n\n\n\ndhsmanager.generate_dhs_cluster_level_data(\n    'Philippines',\n    country_config['Philippines']['dhs_household_dta_path'],\n    country_config['Philippines']['dhs_geographic_shp_path'],\n    col_rename_config=country_config['Philippines']['country_code'], \n    overwrite_cache=True\n)\n\nOverwriting Philippines in cache\nOverwriting Philippines in cache\n\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ADM1DHS\n      ADM1NAME\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n      country_index\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      15.0\n      Autonomous Region in Muslim Mindanao\n      15.0\n      ARMM\n      GPS\n      R\n      6.674652\n      122.109807\n      9999.0\n      10.0\n      WGS84\n      POLYGON ((122.10075 6.68365, 122.11886 6.68365...\n      Philippines\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      15.0\n      Autonomous Region in Muslim Mindanao\n      15.0\n      ARMM\n      GPS\n      R\n      6.662256\n      122.132027\n      9999.0\n      5.0\n      WGS84\n      POLYGON ((122.12297 6.67125, 122.14108 6.67125...\n      Philippines\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      15.0\n      Autonomous Region in Muslim Mindanao\n      15.0\n      ARMM\n      GPS\n      R\n      6.621822\n      122.179496\n      9999.0\n      47.0\n      WGS84\n      POLYGON ((122.17044 6.63082, 122.18855 6.63082...\n      Philippines\n    \n    \n      3\n      4\n      -54952.666667\n      PH201700000004\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      15.0\n      Autonomous Region in Muslim Mindanao\n      15.0\n      ARMM\n      GPS\n      R\n      6.485298\n      122.137965\n      9999.0\n      366.0\n      WGS84\n      POLYGON ((122.12891 6.49429, 122.14702 6.49429...\n      Philippines\n    \n    \n      5\n      6\n      -80701.695652\n      PH201700000006\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      15.0\n      Autonomous Region in Muslim Mindanao\n      15.0\n      ARMM\n      GPS\n      R\n      6.629457\n      121.916094\n      9999.0\n      151.0\n      WGS84\n      POLYGON ((121.90704 6.63845, 121.92515 6.63845...\n      Philippines\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1244\n      1246\n      -45677.120000\n      PH201700001246\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.730436\n      124.552308\n      9999.0\n      34.0\n      WGS84\n      POLYGON ((124.54325 6.73943, 124.56136 6.73943...\n      Philippines\n    \n    \n      1245\n      1247\n      -135111.920000\n      PH201700001247\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.766545\n      124.946740\n      9999.0\n      82.0\n      WGS84\n      POLYGON ((124.93768 6.77554, 124.95580 6.77554...\n      Philippines\n    \n    \n      1246\n      1248\n      -14459.166667\n      PH201700001248\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.643206\n      124.596388\n      9999.0\n      51.0\n      WGS84\n      POLYGON ((124.58733 6.65220, 124.60544 6.65220...\n      Philippines\n    \n    \n      1247\n      1249\n      -51500.272727\n      PH201700001249\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      U\n      6.444719\n      124.619650\n      9999.0\n      128.0\n      WGS84\n      POLYGON ((124.61060 6.45371, 124.62870 6.45371...\n      Philippines\n    \n    \n      1248\n      1250\n      -101887.880000\n      PH201700001250\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.631737\n      124.173571\n      9999.0\n      710.0\n      WGS84\n      POLYGON ((124.16452 6.64073, 124.18262 6.64073...\n      Philippines\n    \n  \n\n1213 rows × 23 columns\n\n\n\n\ndhsmanager.generate_dhs_cluster_level_data(\n    'Timor Leste',\n    country_config['Timor Leste']['dhs_household_dta_path'],\n    country_config['Timor Leste']['dhs_geographic_shp_path'],\n    col_rename_config=country_config['Timor Leste']['country_code'], \n    overwrite_cache=True\n)\n\nOverwriting Timor Leste in cache\nOverwriting Timor Leste in cache\n\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ADM1DHS\n      ADM1NAME\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      F21\n      F22\n      F23\n      geometry\n      country_index\n    \n  \n  \n    \n      0\n      1\n      32166.600000\n      TL201600000001\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.712016\n      125.567381\n      9999.0\n      1005.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.55828 -8.70302, 125.57648 -8.703...\n      Timor Leste\n    \n    \n      1\n      2\n      -34063.923077\n      TL201600000002\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.730226\n      125.590219\n      9999.0\n      1342.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.58112 -8.72123, 125.59932 -8.721...\n      Timor Leste\n    \n    \n      2\n      3\n      39230.590909\n      TL201600000003\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.741340\n      125.556399\n      9999.0\n      1060.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.54730 -8.73235, 125.56550 -8.732...\n      Timor Leste\n    \n    \n      3\n      4\n      -82140.227273\n      TL201600000004\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.811291\n      125.535161\n      9999.0\n      1986.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.52606 -8.80230, 125.54426 -8.802...\n      Timor Leste\n    \n    \n      4\n      5\n      -56203.423077\n      TL201600000005\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.791590\n      125.473219\n      9999.0\n      1491.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.46412 -8.78260, 125.48232 -8.782...\n      Timor Leste\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      450\n      451\n      -71182.600000\n      TL201600000451\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      13.0\n      Viqueque\n      13.0\n      Viqueque\n      GPS\n      R\n      -8.889644\n      126.491371\n      9999.0\n      109.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((126.48227 -8.88065, 126.50047 -8.880...\n      Timor Leste\n    \n    \n      451\n      452\n      -41809.884615\n      TL201600000452\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      13.0\n      Viqueque\n      13.0\n      Viqueque\n      GPS\n      R\n      -8.918866\n      126.290787\n      9999.0\n      42.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((126.28168 -8.90987, 126.29989 -8.909...\n      Timor Leste\n    \n    \n      452\n      453\n      -57314.884615\n      TL201600000453\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      13.0\n      Viqueque\n      13.0\n      Viqueque\n      GPS\n      R\n      -8.878323\n      126.365123\n      9999.0\n      55.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((126.35602 -8.86933, 126.37423 -8.869...\n      Timor Leste\n    \n    \n      453\n      454\n      11714.346154\n      TL201600000454\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      13.0\n      Viqueque\n      13.0\n      Viqueque\n      GPS\n      R\n      -8.867183\n      126.349726\n      9999.0\n      145.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((126.34062 -8.85819, 126.35883 -8.858...\n      Timor Leste\n    \n    \n      454\n      455\n      -72128.576923\n      TL201600000455\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      13.0\n      Viqueque\n      13.0\n      Viqueque\n      GPS\n      R\n      -8.895155\n      126.393027\n      9999.0\n      16.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((126.38392 -8.88616, 126.40213 -8.886...\n      Timor Leste\n    \n  \n\n455 rows × 26 columns\n\n\n\n\ndhsmanager.view_cache_keys()\n\nHousehold:  ['Timor Leste', 'Philippines'] Cluster:  ['Philippines', 'Timor Leste']\n\n\n\ndhsmanager.get_household_level_data_by_country(drop_extra_cols=False)\n\nCombining household data for the ff. countries: ['Timor Leste', 'Philippines']\n\n\n\n\n\n\n  \n    \n      \n      case identification\n      country code and phase\n      DHSCLUST\n      household number\n      respondent's line number (answering household questionnaire)\n      ultimate area unit\n      household sample weight (6 decimals)\n      month of interview\n      year of interview\n      date of interview (cmc)\n      date of interview century day code (cdc)\n      number of household members\n      number of eligible women in household\n      number of eligible men in household\n      number of de jure members\n      number of de facto members\n      number of children 5 and under (de jure)\n      result of household interview\n      day of interview\n      number of visits\n      interviewer identification\n      na - keyer identification\n      ever-married sample\n      primary sampling unit\n      sample strata for sampling errors\n      stratification used in sample design\n      region\n      type of place of residence\n      na - place of residence\n      household selected for male interview\n      household weight for male subsample (6 decimals)\n      field supervisor\n      na - field editor\n      na - office editor\n      number of eligible children for height and weight\n      cluster altitude in meters\n      total adults measured\n      household selected for hemoglobin\n      household selected for domestic violence module\n      language of questionnaire\n      ...\n      facility far - reasons not confined hosp/clinic\n      no money\n      worried about treatment cost\n      home remedy is available\n      health facility is not philhealth acredited\n      no need/regular checkup only\n      how long took travel from home to health facility: hour\n      how long took travel from home to health facility: minutes\n      cost of travel to health facility in php\n      cost of treatment at facility in php\n      amount in php spent (donations) in consultation, advice or treatment\n      method of payment: salary\n      method of payment: loan\n      method of payment: savings\n      method of payment: donation\n      method of payment: philhealth\n      method of payment: sss/gsis/ecc\n      method of payment: insurance\n      method of payment: other\n      line number from column 1 of hh schedule\n      where was he/she confined\n      why was he/she confined in a hospital/clinic\n      duration of confinement in days\n      where medicines bought from any pharmacy apart from medicine paid for in the hos\n      how much was paid for medicines  (php)\n      where services paid for in any laboratory, apart from the services paid for in t\n      how much was paid for lab services (php)\n      how much for the services/medicine combined was paid using salary/loans/sales (p\n      how much for the services/medicine combined was paid using philhealth  (php)\n      how much was the total hospital bill for last confinement - donations  (php)\n      how much of the total hospital bill was paid for out of salary/loans/sales  (php\n      how much was the total hospital bill for last confinement - cost  (php)\n      why he/she did not get philhealth benefits - not a philhealth member\n      why he/she did not get philhealth benefits - philhealth member but not eligible\n      why he/she did not get philhealth benefits - probably used philhealth cannot rem\n      why he/she did not get philhealth benefits - too many requirements to comply wit\n      why he/she did not get philhealth benefits - limited hospitalization benefits\n      why he/she did not get philhealth benefits - claims processing too long\n      why he/she did not get philhealth benefits - other\n      why he/she did not get philhealth benefits - don't know\n    \n  \n  \n    \n      0\n      1  1\n      TL7\n      1\n      1\n      1\n      1\n      478354\n      9\n      2016\n      1401\n      42632\n      6\n      1\n      2.0\n      6\n      6\n      0\n      1\n      19\n      1\n      23\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      1\n      481958\n      20\n      NaN\n      NaN\n      0.0\n      1005.0\n      2.0\n      1\n      0\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      1  2\n      TL7\n      1\n      2\n      2\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      4\n      1\n      0.0\n      4\n      4\n      0\n      1\n      20\n      1\n      25\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0.0\n      1005.0\n      1.0\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      1  3\n      TL7\n      1\n      3\n      1\n      1\n      478354\n      9\n      2016\n      1401\n      42632\n      6\n      2\n      0.0\n      6\n      6\n      0\n      1\n      19\n      1\n      22\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0.0\n      1005.0\n      2.0\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      1  4\n      TL7\n      1\n      4\n      4\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      9\n      4\n      1.0\n      9\n      9\n      0\n      1\n      20\n      1\n      23\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      1\n      481958\n      20\n      NaN\n      NaN\n      0.0\n      1005.0\n      5.0\n      1\n      0\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      1  5\n      TL7\n      1\n      5\n      3\n      1\n      478354\n      9\n      2016\n      1401\n      42633\n      5\n      2\n      0.0\n      5\n      5\n      0\n      1\n      20\n      1\n      21\n      NaN\n      0\n      1\n      2\n      2\n      1\n      2\n      NaN\n      0\n      0\n      20\n      NaN\n      NaN\n      0.0\n      1005.0\n      2.0\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      38993\n      12500022\n      PH7\n      1250\n      22\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      5\n      1\n      NaN\n      5\n      5\n      3\n      1\n      22\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      38994\n      12500023\n      PH7\n      1250\n      23\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      5\n      1\n      NaN\n      4\n      5\n      0\n      1\n      22\n      1\n      7901\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      3.0\n      3.0\n      0.0\n      5.0\n      NaN\n      1.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      33.0\n      1.0\n      1.0\n      1.0\n      1000.0\n      0.0\n      NaN\n      1000.0\n      0.0\n      2000.0\n      2000.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      1.0\n      0.0\n    \n    \n      38995\n      12500024\n      PH7\n      1250\n      24\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      4\n      1\n      NaN\n      4\n      4\n      2\n      1\n      22\n      1\n      7901\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      38996\n      12500025\n      PH7\n      1250\n      25\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42969\n      7\n      0\n      NaN\n      6\n      3\n      2\n      1\n      22\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      2\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      38997\n      12500026\n      PH7\n      1250\n      26\n      2\n      1250\n      1245167\n      8\n      2017\n      1412\n      42971\n      3\n      1\n      NaN\n      3\n      3\n      1\n      1\n      24\n      1\n      7902\n      NaN\n      0\n      1250\n      117\n      117\n      12\n      2\n      NaN\n      0\n      0\n      7900\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      1\n      6\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n38998 rows × 717 columns\n\n\n\n\ndhsmanager.get_cluster_level_data_by_country(drop_extra_cols=True)\n\nCombining cluster data for the ff. countries: ['Timor Leste', 'Philippines']\n\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ADM1DHS\n      ADM1NAME\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n      country_index\n    \n  \n  \n    \n      0\n      1\n      32166.600000\n      TL201600000001\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.712016\n      125.567381\n      9999.0\n      1005.0\n      WGS84\n      POLYGON ((125.55828 -8.70302, 125.57648 -8.703...\n      Timor Leste\n    \n    \n      1\n      2\n      -34063.923077\n      TL201600000002\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.730226\n      125.590219\n      9999.0\n      1342.0\n      WGS84\n      POLYGON ((125.58112 -8.72123, 125.59932 -8.721...\n      Timor Leste\n    \n    \n      2\n      3\n      39230.590909\n      TL201600000003\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.741340\n      125.556399\n      9999.0\n      1060.0\n      WGS84\n      POLYGON ((125.54730 -8.73235, 125.56550 -8.732...\n      Timor Leste\n    \n    \n      3\n      4\n      -82140.227273\n      TL201600000004\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.811291\n      125.535161\n      9999.0\n      1986.0\n      WGS84\n      POLYGON ((125.52606 -8.80230, 125.54426 -8.802...\n      Timor Leste\n    \n    \n      4\n      5\n      -56203.423077\n      TL201600000005\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      1.0\n      Aileu\n      1.0\n      Aileu\n      GPS\n      R\n      -8.791590\n      125.473219\n      9999.0\n      1491.0\n      WGS84\n      POLYGON ((125.46412 -8.78260, 125.48232 -8.782...\n      Timor Leste\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1663\n      1246\n      -45677.120000\n      PH201700001246\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.730436\n      124.552308\n      9999.0\n      34.0\n      WGS84\n      POLYGON ((124.54325 6.73943, 124.56136 6.73943...\n      Philippines\n    \n    \n      1664\n      1247\n      -135111.920000\n      PH201700001247\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.766545\n      124.946740\n      9999.0\n      82.0\n      WGS84\n      POLYGON ((124.93768 6.77554, 124.95580 6.77554...\n      Philippines\n    \n    \n      1665\n      1248\n      -14459.166667\n      PH201700001248\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.643206\n      124.596388\n      9999.0\n      51.0\n      WGS84\n      POLYGON ((124.58733 6.65220, 124.60544 6.65220...\n      Philippines\n    \n    \n      1666\n      1249\n      -51500.272727\n      PH201700001249\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      U\n      6.444719\n      124.619650\n      9999.0\n      128.0\n      WGS84\n      POLYGON ((124.61060 6.45371, 124.62870 6.45371...\n      Philippines\n    \n    \n      1667\n      1250\n      -101887.880000\n      PH201700001250\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      12.0\n      Soccsksargen\n      12.0\n      SOCCSKSARGEN\n      GPS\n      R\n      6.631737\n      124.173571\n      9999.0\n      710.0\n      WGS84\n      POLYGON ((124.16452 6.64073, 124.18262 6.64073...\n      Philippines\n    \n  \n\n1668 rows × 23 columns\n\n\n\n\ndhsmanager.recompute_index_household_level()[['DHSCLUST', 'Wealth Index', 'Recomputed Wealth Index']]\n\nCombining household data for the ff. countries: ['Timor Leste', 'Philippines']\n\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      Recomputed Wealth Index\n    \n  \n  \n    \n      0\n      1\n      25643\n      11.262147\n    \n    \n      1\n      1\n      26545\n      21.185194\n    \n    \n      2\n      1\n      135626\n      33.320456\n    \n    \n      3\n      1\n      64157\n      33.107983\n    \n    \n      4\n      1\n      101871\n      13.504908\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      38993\n      1250\n      -112963\n      14.345640\n    \n    \n      38994\n      1250\n      -59817\n      43.077177\n    \n    \n      38995\n      1250\n      -90503\n      41.449333\n    \n    \n      38996\n      1250\n      -38813\n      12.261886\n    \n    \n      38997\n      1250\n      -65616\n      43.049074\n    \n  \n\n38998 rows × 3 columns\n\n\n\n\ndhsmanager.recompute_index_cluster_level()[[\"country_index\", \"DHSCLUST\", \"Wealth Index\", \"Recomputed Wealth Index\"]].sort_values([\"DHSCLUST\", \"country_index\"]).head(20)\n\nCombining household data for the ff. countries: ['Philippines', 'Timor Leste']\nCombining cluster data for the ff. countries: ['Philippines', 'Timor Leste']\n\n\n\n\n\n\n  \n    \n      \n      country_index\n      DHSCLUST\n      Wealth Index\n      Recomputed Wealth Index\n    \n  \n  \n    \n      0\n      Philippines\n      1\n      -31881.608696\n      18.344515\n    \n    \n      1213\n      Timor Leste\n      1\n      32166.600000\n      27.838472\n    \n    \n      1\n      Philippines\n      2\n      -2855.375000\n      16.777943\n    \n    \n      1214\n      Timor Leste\n      2\n      -34063.923077\n      25.325837\n    \n    \n      2\n      Philippines\n      3\n      -57647.047619\n      31.901361\n    \n    \n      1215\n      Timor Leste\n      3\n      39230.590909\n      21.298537\n    \n    \n      3\n      Philippines\n      4\n      -54952.666667\n      22.347460\n    \n    \n      1216\n      Timor Leste\n      4\n      -82140.227273\n      35.746996\n    \n    \n      1217\n      Timor Leste\n      5\n      -56203.423077\n      24.733723\n    \n    \n      4\n      Philippines\n      6\n      -80701.695652\n      34.146176\n    \n    \n      1218\n      Timor Leste\n      6\n      -24628.782609\n      38.904106\n    \n    \n      5\n      Philippines\n      7\n      -62490.538462\n      33.656503\n    \n    \n      1219\n      Timor Leste\n      7\n      -33729.125000\n      35.140802\n    \n    \n      6\n      Philippines\n      8\n      -80889.666667\n      22.978165\n    \n    \n      1220\n      Timor Leste\n      8\n      15977.076923\n      18.614688\n    \n    \n      7\n      Philippines\n      9\n      -77994.520000\n      35.357400\n    \n    \n      1221\n      Timor Leste\n      9\n      5330.440000\n      13.824022\n    \n    \n      8\n      Philippines\n      10\n      -135511.961538\n      33.195019\n    \n    \n      1222\n      Timor Leste\n      10\n      100213.520000\n      16.869888\n    \n    \n      9\n      Philippines\n      11\n      -107304.250000\n      14.627833\n    \n  \n\n\n\n\n\ndhs.load_column_config('kh')\n\n{'cluster number': 'DHSCLUST',\n 'wealth index factor score (5 decimals)': 'Wealth Index',\n 'country code and phase': 'country code and phase',\n 'number of rooms used for sleeping': 'rooms',\n 'has electricity': 'electric',\n 'has mobile telephone': 'mobile telephone',\n 'has radio': 'radio',\n 'has television': 'television',\n 'has car/truck': 'car/truck',\n 'has refrigerator': 'refrigerator',\n 'has motorcycle/scooter': 'motorcycle',\n 'main floor material': 'floor',\n 'type of toilet facility': 'toilet',\n 'na - source of drinking water': 'drinking water'}"
  },
  {
    "objectID": "notebooks/2023-02-01-index-recalculation-experiments/eda-on-kh-drinking-water-columns.html",
    "href": "notebooks/2023-02-01-index-recalculation-experiments/eda-on-kh-drinking-water-columns.html",
    "title": "UNICEF AI4D Poverty Mapping Project",
    "section": "",
    "text": "This notebook will investigate columns for the household data in cambodia to find the relevant column for index calculation\n\nimport sys\nsys.path.append(\"../../\")\n\nfrom povertymapping import settings\nfrom povertymapping.dhs import DHSDataManager\nfrom geowrangler import dhs\n\n\n%reload_ext autoreload\n%autoreload 2\n\n\ndhsmanager = DHSDataManager()\n\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\n\n\ndhs_kh = dhs.load_dhs_file(country_config[\"Cambodia\"][\"dhs_household_dta_path\"])\n\n\nkh_cols_with_drinking_water = [x for x in dhs_kh.columns if \"drinking water\" in x]\nkh_cols_with_drinking_water\n\n['na - source of drinking water',\n 'na - source of non-drinking water',\n 'source of drinking water during the dry season',\n 'same source of drinking water during wet and dry season',\n 'source of drinking water during wet season']\n\n\n\ndhs_kh[kh_cols_with_drinking_water].info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 15825 entries, 0 to 15824\nData columns (total 5 columns):\n #   Column                                                   Non-Null Count  Dtype  \n---  ------                                                   --------------  -----  \n 0   na - source of drinking water                            0 non-null      float64\n 1   na - source of non-drinking water                        0 non-null      float64\n 2   source of drinking water during the dry season           15820 non-null  float64\n 3   same source of drinking water during wet and dry season  15823 non-null  float64\n 4   source of drinking water during wet season               15811 non-null  float64\ndtypes: float64(5)\nmemory usage: 741.8 KB\n\n\n\n\n\nFrom this cell, it looks like GW converts na - source of drinkign water as its drinking water column, but we know that this column has no values!\n\ndhs.load_column_config('kh')\n\n{'cluster number': 'DHSCLUST',\n 'wealth index factor score (5 decimals)': 'Wealth Index',\n 'country code and phase': 'country code and phase',\n 'number of rooms used for sleeping': 'rooms',\n 'has electricity': 'electric',\n 'has mobile telephone': 'mobile telephone',\n 'has radio': 'radio',\n 'has television': 'television',\n 'has car/truck': 'car/truck',\n 'has refrigerator': 'refrigerator',\n 'has motorcycle/scooter': 'motorcycle',\n 'main floor material': 'floor',\n 'type of toilet facility': 'toilet',\n 'na - source of drinking water': 'drinking water'}\n\n\n\ndhs_kh['na - source of drinking water']\n\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n15820   NaN\n15821   NaN\n15822   NaN\n15823   NaN\n15824   NaN\nName: na - source of drinking water, Length: 15825, dtype: float64\n\n\nUsing same source of drinking water during wet and dry season might be a better choice, but the values are binary (maybe it means yes/no?)\n\ndhs_kh['same source of drinking water during wet and dry season'].value_counts()\n\n1.0    10916\n0.0     4907\nName: same source of drinking water during wet and dry season, dtype: int64\n\n\nLooking at ‘source of drinking water during the dry season’ and ‘source of drinking water during wet season’ seems to make more sense\n\ndhs_kh['source of drinking water during the dry season']\n\n0        43.0\n1        43.0\n2        51.0\n3        51.0\n4        43.0\n         ... \n15820    43.0\n15821    31.0\n15822    32.0\n15823    32.0\n15824    43.0\nName: source of drinking water during the dry season, Length: 15825, dtype: float64\n\n\n\ndhs_kh['source of drinking water during wet season']\n\n0        51.0\n1        43.0\n2        51.0\n3        51.0\n4        51.0\n         ... \n15820    31.0\n15821    31.0\n15822    32.0\n15823    32.0\n15824    51.0\nName: source of drinking water during wet season, Length: 15825, dtype: float64\n\n\n\ndhs_kh[['source of drinking water during the dry season', 'source of drinking water during wet season', 'same source of drinking water during wet and dry season']]\n\n\n\n\n\n  \n    \n      \n      source of drinking water during the dry season\n      source of drinking water during wet season\n      same source of drinking water during wet and dry season\n    \n  \n  \n    \n      0\n      43.0\n      51.0\n      0.0\n    \n    \n      1\n      43.0\n      43.0\n      1.0\n    \n    \n      2\n      51.0\n      51.0\n      1.0\n    \n    \n      3\n      51.0\n      51.0\n      1.0\n    \n    \n      4\n      43.0\n      51.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      15820\n      43.0\n      31.0\n      0.0\n    \n    \n      15821\n      31.0\n      31.0\n      1.0\n    \n    \n      15822\n      32.0\n      32.0\n      1.0\n    \n    \n      15823\n      32.0\n      32.0\n      1.0\n    \n    \n      15824\n      43.0\n      51.0\n      0.0\n    \n  \n\n15825 rows × 3 columns\n\n\n\n\n\n\n\ndhs_ph = dhs.load_dhs_file(country_config[\"Philippines\"][\"dhs_household_dta_path\"])\n\n\nph_cols_with_drinking_water = [x for x in dhs_ph.columns if \"drinking water\" in x]\nph_cols_with_drinking_water\n\n['source of drinking water', 'source of non-drinking water']\n\n\n\ndhs_ph['source of drinking water']\n\n0        11\n1        71\n2        71\n3        13\n4        11\n         ..\n27491    13\n27492    42\n27493    41\n27494    12\n27495    41\nName: source of drinking water, Length: 27496, dtype: int8"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html",
    "title": "Laos Evaluation",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#set-country-specific-parameters",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#set-country-specific-parameters",
    "title": "Laos Evaluation",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nREGION = 'laos'\nADMIN_LVL = 'ADM2'\nZOOM_LEVEL = 14\nGROUP_ZOOM_LEVEL = 8\ncountry_code = get_iso3_code(REGION, code='alpha-2').lower()\n\nThe history saving thread hit an unexpected error (OperationalError('disk I/O error')).History will not be written to the database."
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-bounds",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-bounds",
    "title": "Laos Evaluation",
    "section": "Read bounds",
    "text": "Read bounds\n\nbounds_file = get_geoboundaries(region=REGION, adm='ADM1')\nbounds_gdf = gpd.read_file(bounds_file)\nbounds_gdf = bounds_gdf.sort_values('shapeName')\n\n\nbounds_gdf.sort_values('shapeName')#.explore()\n\n\n\n\n\n  \n    \n      \n      shapeISO\n      shapeName\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n    \n  \n  \n    \n      1\n      LA-AT\n      Attapeu\n      LAO-ADM1-3_0_0-B2\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.59147 14.87336, 107.59141 ...\n    \n    \n      2\n      LA-BK\n      Bokeo\n      LAO-ADM1-3_0_0-B3\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.25529 20.18622, 101.25468 ...\n    \n    \n      3\n      LA-BL\n      Bolikhamsai\n      LAO-ADM1-3_0_0-B4\n      LAO\n      ADM1\n      MULTIPOLYGON (((105.25881 18.23862, 105.25859 ...\n    \n    \n      4\n      LA-CH\n      Champasak\n      LAO-ADM1-3_0_0-B5\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.82797 15.01953, 106.82743 ...\n    \n    \n      5\n      LA-HO\n      Houaphan\n      LAO-ADM1-3_0_0-B6\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.99274 20.09541, 104.99377 ...\n    \n    \n      6\n      LA-KH\n      Khammouane\n      LAO-ADM1-3_0_0-B7\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.42514 17.02408, 106.42598 ...\n    \n    \n      7\n      LA-LM\n      Luang Namtha\n      LAO-ADM1-3_0_0-B8\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.77623 21.12528, 101.77610 ...\n    \n    \n      8\n      LA-LP\n      Luang Prabang\n      LAO-ADM1-3_0_0-B9\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.40047 20.78283, 103.39479 ...\n    \n    \n      9\n      LA-OU\n      Oudomxay\n      LAO-ADM1-3_0_0-B10\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.35779 20.85826, 102.35774 ...\n    \n    \n      10\n      LA-PH\n      Phongsaly\n      LAO-ADM1-3_0_0-B11\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.99287 21.59014, 102.99283 ...\n    \n    \n      11\n      LA-SL\n      Salavan\n      LAO-ADM1-3_0_0-B12\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.15702 16.25670, 107.15709 ...\n    \n    \n      12\n      LA-SV\n      Savannakhet\n      LAO-ADM1-3_0_0-B13\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.79847 16.36384, 106.79878 ...\n    \n    \n      14\n      LA-VI\n      Vientiane\n      LAO-ADM1-3_0_0-B15\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.89857 18.34156, 102.89845 ...\n    \n    \n      13\n      LA-VT\n      Vientiane Capital\n      LAO-ADM1-3_0_0-B14\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.10281 18.14077, 103.10143 ...\n    \n    \n      0\n      LA-XA\n      Xaignabouli\n      LAO-ADM1-3_0_0-B1\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.74539 19.88053, 101.74843 ...\n    \n    \n      15\n      LA-XN\n      Xaisomboun\n      LAO-ADM1-3_0_0-B16\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.89908 18.95856, 103.89927 ...\n    \n    \n      16\n      LA-XE\n      Xekong\n      LAO-ADM1-3_0_0-B17\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.63500 15.31944, 107.63498 ...\n    \n    \n      17\n      LA-XI\n      Xiangkhouang\n      LAO-ADM1-3_0_0-B18\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.28077 19.11118, 104.28054 ..."
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-reference-data",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-reference-data",
    "title": "Laos Evaluation",
    "section": "Read reference data",
    "text": "Read reference data\n\ndata_df = pd.read_csv(\"./la-iwi-2020.csv\")\ndata_df = bounds_gdf.merge(data_df, left_on='shapeName', right_on='province_name', how='left')\ndata_df['rank'] = data_df['mean_iwi_2020'].rank(ascending=False)\ndata_df\n\n\n\n\n\n  \n    \n      \n      shapeISO\n      shapeName\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      province_name\n      mean_iwi_2020\n      rank\n    \n  \n  \n    \n      0\n      LA-AT\n      Attapeu\n      LAO-ADM1-3_0_0-B2\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.59147 14.87336, 107.59141 ...\n      Attapeu\n      74.7\n      10.0\n    \n    \n      1\n      LA-BK\n      Bokeo\n      LAO-ADM1-3_0_0-B3\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.25529 20.18622, 101.25468 ...\n      Bokeo\n      79.8\n      6.0\n    \n    \n      2\n      LA-BL\n      Bolikhamsai\n      LAO-ADM1-3_0_0-B4\n      LAO\n      ADM1\n      MULTIPOLYGON (((105.25881 18.23862, 105.25859 ...\n      Bolikhamsai\n      87.4\n      2.0\n    \n    \n      3\n      LA-CH\n      Champasak\n      LAO-ADM1-3_0_0-B5\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.82797 15.01953, 106.82743 ...\n      Champasak\n      82.5\n      5.0\n    \n    \n      4\n      LA-HO\n      Houaphan\n      LAO-ADM1-3_0_0-B6\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.99274 20.09541, 104.99377 ...\n      Houaphan\n      64.6\n      16.0\n    \n    \n      5\n      LA-KH\n      Khammouane\n      LAO-ADM1-3_0_0-B7\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.42514 17.02408, 106.42598 ...\n      Khammouane\n      77.1\n      8.0\n    \n    \n      6\n      LA-LM\n      Luang Namtha\n      LAO-ADM1-3_0_0-B8\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.77623 21.12528, 101.77610 ...\n      Luang Namtha\n      73.2\n      11.0\n    \n    \n      7\n      LA-LP\n      Luang Prabang\n      LAO-ADM1-3_0_0-B9\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.40047 20.78283, 103.39479 ...\n      Luang Prabang\n      68.3\n      14.0\n    \n    \n      8\n      LA-OU\n      Oudomxay\n      LAO-ADM1-3_0_0-B10\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.35779 20.85826, 102.35774 ...\n      Oudomxay\n      72.1\n      12.0\n    \n    \n      9\n      LA-PH\n      Phongsaly\n      LAO-ADM1-3_0_0-B11\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.99287 21.59014, 102.99283 ...\n      Phongsaly\n      66.4\n      15.0\n    \n    \n      10\n      LA-SL\n      Salavan\n      LAO-ADM1-3_0_0-B12\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.15702 16.25670, 107.15709 ...\n      Salavan\n      60.8\n      17.0\n    \n    \n      11\n      LA-SV\n      Savannakhet\n      LAO-ADM1-3_0_0-B13\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.79847 16.36384, 106.79878 ...\n      Savannakhet\n      75.0\n      9.0\n    \n    \n      12\n      LA-VI\n      Vientiane\n      LAO-ADM1-3_0_0-B15\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.89857 18.34156, 102.89845 ...\n      Vientiane\n      78.4\n      7.0\n    \n    \n      13\n      LA-VT\n      Vientiane Capital\n      LAO-ADM1-3_0_0-B14\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.10281 18.14077, 103.10143 ...\n      Vientiane Capital\n      92.1\n      1.0\n    \n    \n      14\n      LA-XA\n      Xaignabouli\n      LAO-ADM1-3_0_0-B1\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.74539 19.88053, 101.74843 ...\n      Xaignabouli\n      85.2\n      3.0\n    \n    \n      15\n      LA-XN\n      Xaisomboun\n      LAO-ADM1-3_0_0-B16\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.89908 18.95856, 103.89927 ...\n      NaN\n      NaN\n      NaN\n    \n    \n      16\n      LA-XE\n      Xekong\n      LAO-ADM1-3_0_0-B17\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.63500 15.31944, 107.63498 ...\n      Xekong\n      69.7\n      13.0\n    \n    \n      17\n      LA-XI\n      Xiangkhouang\n      LAO-ADM1-3_0_0-B18\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.28077 19.11118, 104.28054 ...\n      Xiangkhouang\n      84.1\n      4.0"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-and-process-model-output",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#read-and-process-model-output",
    "title": "Laos Evaluation",
    "section": "Read and process model output",
    "text": "Read and process model output\n\n!ls\n\n1_la_compare_rank_province.ipynb  la-iwi-2020.csv\n\n\n\nout_gdf = gpd.read_file(\"../../../data/results/la/2023-02-21-la-rollout-output.geojson\")\nout_gdf.head()#explore(column='Predicted Relative Wealth Index')\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n      geometry\n    \n  \n  \n    \n      0\n      13220113003212\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      1139.814456\n      0.536201\n      A\n      POLYGON ((100.06348 20.34463, 100.06348 20.365...\n    \n    \n      1\n      13220113003211\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      18.897820\n      0.501414\n      A\n      POLYGON ((100.08545 20.36523, 100.08545 20.385...\n    \n    \n      2\n      13220113003213\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      467.272466\n      0.624173\n      A\n      POLYGON ((100.08545 20.34463, 100.08545 20.365...\n    \n    \n      3\n      13220113003231\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      457.210483\n      0.614294\n      A\n      POLYGON ((100.08545 20.32402, 100.08545 20.344...\n    \n    \n      4\n      13220113003233\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      484.636913\n      0.557349\n      A\n      POLYGON ((100.08545 20.30342, 100.08545 20.324...\n    \n  \n\n\n\n\n\n# get stats for provinces (ADM1)\nout_gdf = vzs.create_zonal_stats(\n    bounds_gdf,\n    out_gdf,\n    overlap_method=\"intersects\",\n    aggregations=[{\"column\":'Predicted Relative Wealth Index', \"func\": \"mean\", \"output\":\"model_wealth_index_mean\"}]\n)\nout_gdf['rank'] = out_gdf[\"model_wealth_index_mean\"].rank(ascending=False)\nout_gdf\n\n\n\n\n\n  \n    \n      \n      shapeISO\n      shapeName\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      model_wealth_index_mean\n      rank\n    \n  \n  \n    \n      1\n      LA-AT\n      Attapeu\n      LAO-ADM1-3_0_0-B2\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.59147 14.87336, 107.59141 ...\n      0.255860\n      16.0\n    \n    \n      2\n      LA-BK\n      Bokeo\n      LAO-ADM1-3_0_0-B3\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.25529 20.18622, 101.25468 ...\n      0.281993\n      6.0\n    \n    \n      3\n      LA-BL\n      Bolikhamsai\n      LAO-ADM1-3_0_0-B4\n      LAO\n      ADM1\n      MULTIPOLYGON (((105.25881 18.23862, 105.25859 ...\n      0.294027\n      3.0\n    \n    \n      4\n      LA-CH\n      Champasak\n      LAO-ADM1-3_0_0-B5\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.82797 15.01953, 106.82743 ...\n      0.284149\n      5.0\n    \n    \n      5\n      LA-HO\n      Houaphan\n      LAO-ADM1-3_0_0-B6\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.99274 20.09541, 104.99377 ...\n      0.256109\n      15.0\n    \n    \n      6\n      LA-KH\n      Khammouane\n      LAO-ADM1-3_0_0-B7\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.42514 17.02408, 106.42598 ...\n      0.289663\n      4.0\n    \n    \n      7\n      LA-LM\n      Luang Namtha\n      LAO-ADM1-3_0_0-B8\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.77623 21.12528, 101.77610 ...\n      0.273791\n      7.0\n    \n    \n      8\n      LA-LP\n      Luang Prabang\n      LAO-ADM1-3_0_0-B9\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.40047 20.78283, 103.39479 ...\n      0.260783\n      12.0\n    \n    \n      9\n      LA-OU\n      Oudomxay\n      LAO-ADM1-3_0_0-B10\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.35779 20.85826, 102.35774 ...\n      0.260721\n      13.0\n    \n    \n      10\n      LA-PH\n      Phongsaly\n      LAO-ADM1-3_0_0-B11\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.99287 21.59014, 102.99283 ...\n      0.254187\n      17.0\n    \n    \n      11\n      LA-SL\n      Salavan\n      LAO-ADM1-3_0_0-B12\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.15702 16.25670, 107.15709 ...\n      0.258530\n      14.0\n    \n    \n      12\n      LA-SV\n      Savannakhet\n      LAO-ADM1-3_0_0-B13\n      LAO\n      ADM1\n      MULTIPOLYGON (((106.79847 16.36384, 106.79878 ...\n      0.272804\n      8.0\n    \n    \n      14\n      LA-VI\n      Vientiane\n      LAO-ADM1-3_0_0-B15\n      LAO\n      ADM1\n      MULTIPOLYGON (((102.89857 18.34156, 102.89845 ...\n      0.305119\n      2.0\n    \n    \n      13\n      LA-VT\n      Vientiane Capital\n      LAO-ADM1-3_0_0-B14\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.10281 18.14077, 103.10143 ...\n      0.414018\n      1.0\n    \n    \n      0\n      LA-XA\n      Xaignabouli\n      LAO-ADM1-3_0_0-B1\n      LAO\n      ADM1\n      MULTIPOLYGON (((101.74539 19.88053, 101.74843 ...\n      0.271033\n      9.0\n    \n    \n      15\n      LA-XN\n      Xaisomboun\n      LAO-ADM1-3_0_0-B16\n      LAO\n      ADM1\n      MULTIPOLYGON (((103.89908 18.95856, 103.89927 ...\n      0.262833\n      11.0\n    \n    \n      16\n      LA-XE\n      Xekong\n      LAO-ADM1-3_0_0-B17\n      LAO\n      ADM1\n      MULTIPOLYGON (((107.63500 15.31944, 107.63498 ...\n      0.250942\n      18.0\n    \n    \n      17\n      LA-XI\n      Xiangkhouang\n      LAO-ADM1-3_0_0-B18\n      LAO\n      ADM1\n      MULTIPOLYGON (((104.28077 19.11118, 104.28054 ...\n      0.265259\n      10.0"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#compare-model-output-vs-reference",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#compare-model-output-vs-reference",
    "title": "Laos Evaluation",
    "section": "Compare model output vs reference",
    "text": "Compare model output vs reference\n\ncompare_gdf = out_gdf[['shapeISO','shapeName','model_wealth_index_mean','rank', 'geometry']].merge(\\\n                    data_df[['shapeISO','shapeName','mean_iwi_2020','rank']], on='shapeISO', how='outer', suffixes=['_model', '_reference'])#.dropna()\ncompare_gdf\n\n\n\n\n\n  \n    \n      \n      shapeISO\n      shapeName_model\n      model_wealth_index_mean\n      rank_model\n      geometry\n      shapeName_reference\n      mean_iwi_2020\n      rank_reference\n    \n  \n  \n    \n      0\n      LA-AT\n      Attapeu\n      0.255860\n      16.0\n      MULTIPOLYGON (((107.59147 14.87336, 107.59141 ...\n      Attapeu\n      74.7\n      10.0\n    \n    \n      1\n      LA-BK\n      Bokeo\n      0.281993\n      6.0\n      MULTIPOLYGON (((101.25529 20.18622, 101.25468 ...\n      Bokeo\n      79.8\n      6.0\n    \n    \n      2\n      LA-BL\n      Bolikhamsai\n      0.294027\n      3.0\n      MULTIPOLYGON (((105.25881 18.23862, 105.25859 ...\n      Bolikhamsai\n      87.4\n      2.0\n    \n    \n      3\n      LA-CH\n      Champasak\n      0.284149\n      5.0\n      MULTIPOLYGON (((106.82797 15.01953, 106.82743 ...\n      Champasak\n      82.5\n      5.0\n    \n    \n      4\n      LA-HO\n      Houaphan\n      0.256109\n      15.0\n      MULTIPOLYGON (((104.99274 20.09541, 104.99377 ...\n      Houaphan\n      64.6\n      16.0\n    \n    \n      5\n      LA-KH\n      Khammouane\n      0.289663\n      4.0\n      MULTIPOLYGON (((106.42514 17.02408, 106.42598 ...\n      Khammouane\n      77.1\n      8.0\n    \n    \n      6\n      LA-LM\n      Luang Namtha\n      0.273791\n      7.0\n      MULTIPOLYGON (((101.77623 21.12528, 101.77610 ...\n      Luang Namtha\n      73.2\n      11.0\n    \n    \n      7\n      LA-LP\n      Luang Prabang\n      0.260783\n      12.0\n      MULTIPOLYGON (((103.40047 20.78283, 103.39479 ...\n      Luang Prabang\n      68.3\n      14.0\n    \n    \n      8\n      LA-OU\n      Oudomxay\n      0.260721\n      13.0\n      MULTIPOLYGON (((102.35779 20.85826, 102.35774 ...\n      Oudomxay\n      72.1\n      12.0\n    \n    \n      9\n      LA-PH\n      Phongsaly\n      0.254187\n      17.0\n      MULTIPOLYGON (((102.99287 21.59014, 102.99283 ...\n      Phongsaly\n      66.4\n      15.0\n    \n    \n      10\n      LA-SL\n      Salavan\n      0.258530\n      14.0\n      MULTIPOLYGON (((107.15702 16.25670, 107.15709 ...\n      Salavan\n      60.8\n      17.0\n    \n    \n      11\n      LA-SV\n      Savannakhet\n      0.272804\n      8.0\n      MULTIPOLYGON (((106.79847 16.36384, 106.79878 ...\n      Savannakhet\n      75.0\n      9.0\n    \n    \n      12\n      LA-VI\n      Vientiane\n      0.305119\n      2.0\n      MULTIPOLYGON (((102.89857 18.34156, 102.89845 ...\n      Vientiane\n      78.4\n      7.0\n    \n    \n      13\n      LA-VT\n      Vientiane Capital\n      0.414018\n      1.0\n      MULTIPOLYGON (((103.10281 18.14077, 103.10143 ...\n      Vientiane Capital\n      92.1\n      1.0\n    \n    \n      14\n      LA-XA\n      Xaignabouli\n      0.271033\n      9.0\n      MULTIPOLYGON (((101.74539 19.88053, 101.74843 ...\n      Xaignabouli\n      85.2\n      3.0\n    \n    \n      15\n      LA-XN\n      Xaisomboun\n      0.262833\n      11.0\n      MULTIPOLYGON (((103.89908 18.95856, 103.89927 ...\n      Xaisomboun\n      NaN\n      NaN\n    \n    \n      16\n      LA-XE\n      Xekong\n      0.250942\n      18.0\n      MULTIPOLYGON (((107.63500 15.31944, 107.63498 ...\n      Xekong\n      69.7\n      13.0\n    \n    \n      17\n      LA-XI\n      Xiangkhouang\n      0.265259\n      10.0\n      MULTIPOLYGON (((104.28077 19.11118, 104.28054 ...\n      Xiangkhouang\n      84.1\n      4.0\n    \n  \n\n\n\n\n\ndata = compare_gdf.dropna()\ncoef, p = spearmanr(data['mean_iwi_2020'], data['model_wealth_index_mean'])\nprint(f'The spearman rank correlation is: {coef:.4f}')\n\nThe spearman rank correlation is: 0.7525"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#heatmap",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/la/1_la_compare_rank_province.html#heatmap",
    "title": "Laos Evaluation",
    "section": "Heatmap",
    "text": "Heatmap\n\ndef despine(ax):\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\nfig, axs = plt.subplots(1,2, figsize=(9,5))\n\ncompare_gdf.plot(\n    column='rank_reference',\n    ax=axs[0],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3},\n    missing_kwds={\n        \"color\": \"0.4\",\n        \"label\": \"Missing values\",\n    }\n)\ndespine(axs[0])\n\ncompare_gdf.plot(\n    column='rank_model',\n    ax=axs[1],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3},\n    missing_kwds={\n        \"color\": \"0.4\",\n        \"label\": \"Missing values\",\n    }\n)\n\ndespine(axs[1])\naxs[0].set_title('Reference')\naxs[1].set_title('Predicted')\n# leg1 = axs[0].get_legend()\n# leg1.set_title(\"Rank\")\n# leg2 = axs[1].get_legend()\n# leg2.set_title(\"Rank\")# \n#fig.suptitle('Wealth index rank')\nfig.tight_layout()"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html",
    "title": "Malaysia Evaluation",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#set-country-specific-parameters",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#set-country-specific-parameters",
    "title": "Malaysia Evaluation",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nREGION = 'malaysia'\nADMIN_LVL = 'ADM2'\nZOOM_LEVEL = 14\nGROUP_ZOOM_LEVEL = 8\ncountry_code = get_iso3_code(REGION, code='alpha-2').lower()"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-bounds",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-bounds",
    "title": "Malaysia Evaluation",
    "section": "Read bounds",
    "text": "Read bounds\n\nbounds_file = get_geoboundaries(region=REGION, adm='ADM1')\nbounds_gdf = gpd.read_file(bounds_file)\nbounds_gdf = bounds_gdf.sort_values('shapeName')\n\n\nbounds_gdf.sort_values('shapeName')#.explore()\n\n\n\n\n\n  \n    \n      \n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n    \n  \n  \n    \n      1\n      Johor\n      MY-01\n      MYS-ADM1-3_0_0-B2\n      MYS\n      ADM1\n      MULTIPOLYGON (((104.06240 2.21794, 104.06217 2...\n    \n    \n      11\n      Kedah\n      MY-02\n      MYS-ADM1-3_0_0-B12\n      MYS\n      ADM1\n      MULTIPOLYGON (((99.72140 6.20837, 99.72192 6.2...\n    \n    \n      7\n      Kelantan\n      MY-03\n      MYS-ADM1-3_0_0-B8\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33398 4.69564, 101.33467 4...\n    \n    \n      2\n      Kuala Lumpur\n      MY-14\n      MYS-ADM1-3_0_0-B3\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.61508 3.15348, 101.61527 3...\n    \n    \n      15\n      Labuan\n      MY-15\n      MYS-ADM1-3_0_0-B16\n      MYS\n      ADM1\n      MULTIPOLYGON (((115.13150 5.21699, 115.13119 5...\n    \n    \n      3\n      Malacca\n      MY-04\n      MYS-ADM1-3_0_0-B4\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.85494 2.41747, 101.86035 2...\n    \n    \n      4\n      Negeri Sembilan\n      MY-05\n      MYS-ADM1-3_0_0-B5\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.71245 2.59533, 101.71259 2...\n    \n    \n      10\n      Pahang\n      MY-06\n      MYS-ADM1-3_0_0-B11\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33463 4.43296, 101.35839 4...\n    \n    \n      14\n      Penang\n      MY-07\n      MYS-ADM1-3_0_0-B15\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.33822 5.57470, 100.33901 5...\n    \n    \n      13\n      Perak\n      MY-08\n      MYS-ADM1-3_0_0-B14\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.63654 4.15716, 100.63688 4...\n    \n    \n      12\n      Perlis\n      MY-09\n      MYS-ADM1-3_0_0-B13\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.12039 6.42274, 100.12113 6...\n    \n    \n      8\n      Putrajaya\n      MY-16\n      MYS-ADM1-3_0_0-B9\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.65969 2.89914, 101.66036 2...\n    \n    \n      5\n      Sabah\n      MY-12\n      MYS-ADM1-3_0_0-B6\n      MYS\n      ADM1\n      MULTIPOLYGON (((117.62919 4.20156, 117.63091 4...\n    \n    \n      6\n      Sarawak\n      MY-13\n      MYS-ADM1-3_0_0-B7\n      MYS\n      ADM1\n      MULTIPOLYGON (((110.29745 1.66348, 110.29677 1...\n    \n    \n      0\n      Selangor\n      MY-10\n      MYS-ADM1-3_0_0-B1\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.24990 2.90772, 101.24699 2...\n    \n    \n      9\n      Terengganu\n      MY-11\n      MYS-ADM1-3_0_0-B10\n      MYS\n      ADM1\n      MULTIPOLYGON (((103.67313 4.80327, 103.67341 4...\n    \n  \n\n\n\n\n\n#bounds_gdf[bounds_gdf.columns[:-1]].to_csv(\"./my-hes-2020.csv\")"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-reference-data",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-reference-data",
    "title": "Malaysia Evaluation",
    "section": "Read reference data",
    "text": "Read reference data\n\ndata_df = pd.read_csv(\"./my-hes-2020.csv\")\ndata_df = bounds_gdf.merge(data_df, left_on='shapeName', right_on='province_name', how='left')\ndata_df['rank'] = data_df['mean_total_expenditure_2016'].rank(ascending=False)\ndata_df\n\n\n\n\n\n  \n    \n      \n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      province_name\n      mean_total_expenditure_2016\n      rank\n    \n  \n  \n    \n      0\n      Johor\n      MY-01\n      MYS-ADM1-3_0_0-B2\n      MYS\n      ADM1\n      MULTIPOLYGON (((104.06240 2.21794, 104.06217 2...\n      Johor\n      4148.38\n      6.0\n    \n    \n      1\n      Kedah\n      MY-02\n      MYS-ADM1-3_0_0-B12\n      MYS\n      ADM1\n      MULTIPOLYGON (((99.72140 6.20837, 99.72192 6.2...\n      Kedah\n      3061.06\n      14.0\n    \n    \n      2\n      Kelantan\n      MY-03\n      MYS-ADM1-3_0_0-B8\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33398 4.69564, 101.33467 4...\n      Kelantan\n      2874.63\n      15.0\n    \n    \n      3\n      Kuala Lumpur\n      MY-14\n      MYS-ADM1-3_0_0-B3\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.61508 3.15348, 101.61527 3...\n      Kuala Lumpur\n      6214.21\n      2.0\n    \n    \n      4\n      Labuan\n      MY-15\n      MYS-ADM1-3_0_0-B16\n      MYS\n      ADM1\n      MULTIPOLYGON (((115.13150 5.21699, 115.13119 5...\n      Labuan\n      4068.75\n      7.0\n    \n    \n      5\n      Malacca\n      MY-04\n      MYS-ADM1-3_0_0-B4\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.85494 2.41747, 101.86035 2...\n      Malacca\n      4373.80\n      4.0\n    \n    \n      6\n      Negeri Sembilan\n      MY-05\n      MYS-ADM1-3_0_0-B5\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.71245 2.59533, 101.71259 2...\n      Negeri Sembilan\n      3688.39\n      9.0\n    \n    \n      7\n      Pahang\n      MY-06\n      MYS-ADM1-3_0_0-B11\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33463 4.43296, 101.35839 4...\n      Pahang\n      3316.16\n      10.0\n    \n    \n      8\n      Penang\n      MY-07\n      MYS-ADM1-3_0_0-B15\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.33822 5.57470, 100.33901 5...\n      Penang\n      4190.30\n      5.0\n    \n    \n      9\n      Perak\n      MY-08\n      MYS-ADM1-3_0_0-B14\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.63654 4.15716, 100.63688 4...\n      Perak\n      3233.28\n      11.0\n    \n    \n      10\n      Perlis\n      MY-09\n      MYS-ADM1-3_0_0-B13\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.12039 6.42274, 100.12113 6...\n      Perlis\n      3084.92\n      13.0\n    \n    \n      11\n      Putrajaya\n      MY-16\n      MYS-ADM1-3_0_0-B9\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.65969 2.89914, 101.66036 2...\n      Putrajaya\n      6970.93\n      1.0\n    \n    \n      12\n      Sabah\n      MY-12\n      MYS-ADM1-3_0_0-B6\n      MYS\n      ADM1\n      MULTIPOLYGON (((117.62919 4.20156, 117.63091 4...\n      Sabah\n      2594.99\n      16.0\n    \n    \n      13\n      Sarawak\n      MY-13\n      MYS-ADM1-3_0_0-B7\n      MYS\n      ADM1\n      MULTIPOLYGON (((110.29745 1.66348, 110.29677 1...\n      Sarawak\n      3118.34\n      12.0\n    \n    \n      14\n      Selangor\n      MY-10\n      MYS-ADM1-3_0_0-B1\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.24990 2.90772, 101.24699 2...\n      Selangor\n      5182.70\n      3.0\n    \n    \n      15\n      Terengganu\n      MY-11\n      MYS-ADM1-3_0_0-B10\n      MYS\n      ADM1\n      MULTIPOLYGON (((103.67313 4.80327, 103.67341 4...\n      Terengganu\n      3802.22\n      8.0"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-and-process-model-output",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#read-and-process-model-output",
    "title": "Malaysia Evaluation",
    "section": "Read and process model output",
    "text": "Read and process model output\n\nout_gdf = gpd.read_file(\"../../../data/results/my/2023-02-21-my-rollout-output.geojson\")\nout_gdf.head()#explore(column='Predicted Relative Wealth Index')\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n      geometry\n    \n  \n  \n    \n      0\n      13223202222021\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      1948.905696\n      0.376365\n      B\n      POLYGON ((101.27197 2.92110, 101.27197 2.94304...\n    \n    \n      1\n      13223202222023\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      5633.984424\n      0.405243\n      A\n      POLYGON ((101.27197 2.89915, 101.27197 2.92110...\n    \n    \n      2\n      13223202222201\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      919.554096\n      0.323968\n      B\n      POLYGON ((101.27197 2.87721, 101.27197 2.89915...\n    \n    \n      3\n      13223202222010\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      61.761096\n      0.344436\n      B\n      POLYGON ((101.29395 2.96498, 101.29395 2.98693...\n    \n    \n      4\n      13223202222012\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      4659.531576\n      0.456739\n      A\n      POLYGON ((101.29395 2.94304, 101.29395 2.96498...\n    \n  \n\n\n\n\n\n# get stats for provinces (ADM1)\nout_gdf = vzs.create_zonal_stats(\n    bounds_gdf,\n    out_gdf,\n    overlap_method=\"intersects\",\n    aggregations=[{\"column\":'Predicted Relative Wealth Index', \"func\": \"mean\", \"output\":\"model_wealth_index_mean\"}]\n)\nout_gdf['rank'] = out_gdf[\"model_wealth_index_mean\"].rank(ascending=False)\nout_gdf\n\n\n\n\n\n  \n    \n      \n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      model_wealth_index_mean\n      rank\n    \n  \n  \n    \n      1\n      Johor\n      MY-01\n      MYS-ADM1-3_0_0-B2\n      MYS\n      ADM1\n      MULTIPOLYGON (((104.06240 2.21794, 104.06217 2...\n      0.381330\n      9.0\n    \n    \n      11\n      Kedah\n      MY-02\n      MYS-ADM1-3_0_0-B12\n      MYS\n      ADM1\n      MULTIPOLYGON (((99.72140 6.20837, 99.72192 6.2...\n      0.386537\n      8.0\n    \n    \n      7\n      Kelantan\n      MY-03\n      MYS-ADM1-3_0_0-B8\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33398 4.69564, 101.33467 4...\n      0.319396\n      14.0\n    \n    \n      2\n      Kuala Lumpur\n      MY-14\n      MYS-ADM1-3_0_0-B3\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.61508 3.15348, 101.61527 3...\n      0.606565\n      1.0\n    \n    \n      15\n      Labuan\n      MY-15\n      MYS-ADM1-3_0_0-B16\n      MYS\n      ADM1\n      MULTIPOLYGON (((115.13150 5.21699, 115.13119 5...\n      0.478113\n      4.0\n    \n    \n      3\n      Malacca\n      MY-04\n      MYS-ADM1-3_0_0-B4\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.85494 2.41747, 101.86035 2...\n      0.440914\n      6.0\n    \n    \n      4\n      Negeri Sembilan\n      MY-05\n      MYS-ADM1-3_0_0-B5\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.71245 2.59533, 101.71259 2...\n      0.379933\n      10.0\n    \n    \n      10\n      Pahang\n      MY-06\n      MYS-ADM1-3_0_0-B11\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.33463 4.43296, 101.35839 4...\n      0.323656\n      13.0\n    \n    \n      14\n      Penang\n      MY-07\n      MYS-ADM1-3_0_0-B15\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.33822 5.57470, 100.33901 5...\n      0.519304\n      3.0\n    \n    \n      13\n      Perak\n      MY-08\n      MYS-ADM1-3_0_0-B14\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.63654 4.15716, 100.63688 4...\n      0.364201\n      11.0\n    \n    \n      12\n      Perlis\n      MY-09\n      MYS-ADM1-3_0_0-B13\n      MYS\n      ADM1\n      MULTIPOLYGON (((100.12039 6.42274, 100.12113 6...\n      0.417975\n      7.0\n    \n    \n      8\n      Putrajaya\n      MY-16\n      MYS-ADM1-3_0_0-B9\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.65969 2.89914, 101.66036 2...\n      0.554501\n      2.0\n    \n    \n      5\n      Sabah\n      MY-12\n      MYS-ADM1-3_0_0-B6\n      MYS\n      ADM1\n      MULTIPOLYGON (((117.62919 4.20156, 117.63091 4...\n      0.273249\n      15.0\n    \n    \n      6\n      Sarawak\n      MY-13\n      MYS-ADM1-3_0_0-B7\n      MYS\n      ADM1\n      MULTIPOLYGON (((110.29745 1.66348, 110.29677 1...\n      0.255029\n      16.0\n    \n    \n      0\n      Selangor\n      MY-10\n      MYS-ADM1-3_0_0-B1\n      MYS\n      ADM1\n      MULTIPOLYGON (((101.24990 2.90772, 101.24699 2...\n      0.454382\n      5.0\n    \n    \n      9\n      Terengganu\n      MY-11\n      MYS-ADM1-3_0_0-B10\n      MYS\n      ADM1\n      MULTIPOLYGON (((103.67313 4.80327, 103.67341 4...\n      0.347883\n      12.0"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#compare-model-output-vs-reference",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#compare-model-output-vs-reference",
    "title": "Malaysia Evaluation",
    "section": "Compare model output vs reference",
    "text": "Compare model output vs reference\n\ncompare_gdf = out_gdf[['shapeISO','shapeName','model_wealth_index_mean','rank', 'geometry']].merge(\\\n                    data_df[['shapeISO','shapeName','mean_total_expenditure_2016','rank']], on='shapeISO', how='outer', suffixes=['_reference', '_model']).dropna()\ncompare_gdf\n\n\n\n\n\n  \n    \n      \n      shapeISO\n      shapeName_reference\n      model_wealth_index_mean\n      rank_reference\n      geometry\n      shapeName_model\n      mean_total_expenditure_2016\n      rank_model\n    \n  \n  \n    \n      0\n      MY-01\n      Johor\n      0.381330\n      9.0\n      MULTIPOLYGON (((104.06240 2.21794, 104.06217 2...\n      Johor\n      4148.38\n      6.0\n    \n    \n      1\n      MY-02\n      Kedah\n      0.386537\n      8.0\n      MULTIPOLYGON (((99.72140 6.20837, 99.72192 6.2...\n      Kedah\n      3061.06\n      14.0\n    \n    \n      2\n      MY-03\n      Kelantan\n      0.319396\n      14.0\n      MULTIPOLYGON (((101.33398 4.69564, 101.33467 4...\n      Kelantan\n      2874.63\n      15.0\n    \n    \n      3\n      MY-14\n      Kuala Lumpur\n      0.606565\n      1.0\n      MULTIPOLYGON (((101.61508 3.15348, 101.61527 3...\n      Kuala Lumpur\n      6214.21\n      2.0\n    \n    \n      4\n      MY-15\n      Labuan\n      0.478113\n      4.0\n      MULTIPOLYGON (((115.13150 5.21699, 115.13119 5...\n      Labuan\n      4068.75\n      7.0\n    \n    \n      5\n      MY-04\n      Malacca\n      0.440914\n      6.0\n      MULTIPOLYGON (((101.85494 2.41747, 101.86035 2...\n      Malacca\n      4373.80\n      4.0\n    \n    \n      6\n      MY-05\n      Negeri Sembilan\n      0.379933\n      10.0\n      MULTIPOLYGON (((101.71245 2.59533, 101.71259 2...\n      Negeri Sembilan\n      3688.39\n      9.0\n    \n    \n      7\n      MY-06\n      Pahang\n      0.323656\n      13.0\n      MULTIPOLYGON (((101.33463 4.43296, 101.35839 4...\n      Pahang\n      3316.16\n      10.0\n    \n    \n      8\n      MY-07\n      Penang\n      0.519304\n      3.0\n      MULTIPOLYGON (((100.33822 5.57470, 100.33901 5...\n      Penang\n      4190.30\n      5.0\n    \n    \n      9\n      MY-08\n      Perak\n      0.364201\n      11.0\n      MULTIPOLYGON (((100.63654 4.15716, 100.63688 4...\n      Perak\n      3233.28\n      11.0\n    \n    \n      10\n      MY-09\n      Perlis\n      0.417975\n      7.0\n      MULTIPOLYGON (((100.12039 6.42274, 100.12113 6...\n      Perlis\n      3084.92\n      13.0\n    \n    \n      11\n      MY-16\n      Putrajaya\n      0.554501\n      2.0\n      MULTIPOLYGON (((101.65969 2.89914, 101.66036 2...\n      Putrajaya\n      6970.93\n      1.0\n    \n    \n      12\n      MY-12\n      Sabah\n      0.273249\n      15.0\n      MULTIPOLYGON (((117.62919 4.20156, 117.63091 4...\n      Sabah\n      2594.99\n      16.0\n    \n    \n      13\n      MY-13\n      Sarawak\n      0.255029\n      16.0\n      MULTIPOLYGON (((110.29745 1.66348, 110.29677 1...\n      Sarawak\n      3118.34\n      12.0\n    \n    \n      14\n      MY-10\n      Selangor\n      0.454382\n      5.0\n      MULTIPOLYGON (((101.24990 2.90772, 101.24699 2...\n      Selangor\n      5182.70\n      3.0\n    \n    \n      15\n      MY-11\n      Terengganu\n      0.347883\n      12.0\n      MULTIPOLYGON (((103.67313 4.80327, 103.67341 4...\n      Terengganu\n      3802.22\n      8.0\n    \n  \n\n\n\n\n\ncoef, p = spearmanr(compare_gdf['mean_total_expenditure_2016'], compare_gdf['model_wealth_index_mean'])\ncoef\n\n0.7823529411764706"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#heatmap",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/my/1_my_compare_rank_province.html#heatmap",
    "title": "Malaysia Evaluation",
    "section": "Heatmap",
    "text": "Heatmap\n\ndef despine(ax):\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\nfig, axs = plt.subplots(1,2, figsize=(9,5))\n\ncompare_gdf.plot(\n    column='rank_reference',\n    ax=axs[0],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3},\n)\ndespine(axs[0])\n\ncompare_gdf.plot(\n    column='rank_model',\n    ax=axs[1],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3},\n)\ndespine(axs[1])\naxs[0].set_title('Reference')\naxs[1].set_title('Predicted')\n# leg1 = axs[0].get_legend()\n# leg1.set_title(\"Rank\")\n# leg2 = axs[1].get_legend()\n# leg2.set_title(\"Rank\")# \n#fig.suptitle('Wealth index rank')\nfig.tight_layout()"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html",
    "title": "Indonesia Evaluation",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-boundaries",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-boundaries",
    "title": "Indonesia Evaluation",
    "section": "Load boundaries",
    "text": "Load boundaries\n\nid_hdx_adm2_filepath = Path('../../../data/idn_admbnda_adm2_bps_20200401.shp')\nid_adm2_gdf = gpd.read_file(id_hdx_adm2_filepath)\n\n# Get only the number in PCODE to match the comparison data\nid_adm2_gdf['ADM2_PCODE'] = id_adm2_gdf['ADM2_PCODE'].str[2:].astype(str)\nid_adm2_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      Shape_Leng\n      Shape_Area\n      ADM2_EN\n      ADM2_PCODE\n      ADM2_REF\n      ADM2ALT1EN\n      ADM2ALT2EN\n      ADM1_EN\n      ADM1_PCODE\n      ADM0_EN\n      ADM0_PCODE\n      date\n      validOn\n      validTo\n      geometry\n    \n  \n  \n    \n      0\n      2.360029\n      0.228968\n      Aceh Barat\n      1107\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((96.26836 4.76800, 96.26822 4.76250, ...\n    \n    \n      1\n      1.963994\n      0.154136\n      Aceh Barat Daya\n      1112\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      MULTIPOLYGON (((96.80559 3.71758, 96.80444 3.7..."
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-indonesia-model-output",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-indonesia-model-output",
    "title": "Indonesia Evaluation",
    "section": "Load Indonesia model output",
    "text": "Load Indonesia model output\n\nid_rollout_output_filepath = Path('../../2023-02-21-cross-country-rollouts/id/2023-02-21-id-rollout-output.geojson')\nid_rollout_output_gdf = gpd.read_file(id_rollout_output_filepath)\n\n\nid_rollout_output_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 161230 entries, 0 to 161229\nData columns (total 12 columns):\n #   Column                                Non-Null Count   Dtype   \n---  ------                                --------------   -----   \n 0   quadkey                               161230 non-null  object  \n 1   shapeName                             161230 non-null  object  \n 2   shapeISO                              161230 non-null  object  \n 3   shapeID                               161230 non-null  object  \n 4   shapeGroup                            161230 non-null  object  \n 5   shapeType                             161230 non-null  object  \n 6   quadkey_level8                        161230 non-null  object  \n 7   pop_count                             161230 non-null  float64 \n 8   osm_region                            161230 non-null  object  \n 9   Predicted Relative Wealth Index       161230 non-null  float64 \n 10  Predicted Wealth Category (quintile)  161230 non-null  object  \n 11  geometry                              161230 non-null  geometry\ndtypes: float64(2), geometry(1), object(9)\nmemory usage: 14.8+ MB\n\n\n\nid_rollout_output_gdf['pop_count'].describe()\n\ncount    161230.000000\nmean       1696.344622\nstd        5556.739326\nmin           1.279359\n25%          41.478981\n50%         275.124374\n75%        1296.864624\nmax      162671.421875\nName: pop_count, dtype: float64\n\n\n\nid_rollout_output_gdf['pop_count'].hist(bins=100)\n\n<AxesSubplot: >\n\n\n\n\n\n\nAggregate the rollout output grids by ADM2\n\nid_rollout_agg_by_adm2 = vzs.create_zonal_stats(\n    id_adm2_gdf,\n    id_rollout_output_gdf,\n    overlap_method=\"intersects\",\n    aggregations=[\n        {\n            \"column\": \"Predicted Relative Wealth Index\",\n            \"func\": \"mean\",\n            \"output\": \"model_wealth_index_mean\",\n        },\n        {\n            \"column\": \"Predicted Relative Wealth Index\",\n            \"func\": \"median\",\n            \"output\": \"model_wealth_index_median\",\n        },\n\n    ],\n)\n\n\nid_rollout_agg_by_adm2[\"model_wealth_index_mean\"].hist()\n\n<AxesSubplot: >\n\n\n\n\n\n\n# id_rollout_agg_by_adm2 = aggregate_grids_by_admin_bounds(\n#     id_rollout_output_gdf, \"indonesia\", adm=\"ADM2\", aggregations=aggregation\n# )\n# id_rollout_agg_by_adm2['rank'] = id_rollout_agg_by_adm2['model_wealth_index_median'].rank(ascending=False)"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-comparison-data-for-indonesia",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#load-comparison-data-for-indonesia",
    "title": "Indonesia Evaluation",
    "section": "Load comparison data for Indonesia",
    "text": "Load comparison data for Indonesia\nNote: The csv provided is dirty (has quotations for each line) so we have to clean it before loading as a dataframe\n\nid_susenas_csv_filepath = Path('../../../data/20220706-IDN-Susenas Relative Wealth Index.csv')\n\n\n# Input data is misformatted\n# Read data line per line and store as dataframe\ndata_lines = []\nwith open(id_susenas_csv_filepath, 'r') as csvfile:\n    datareader = csv.reader(csvfile)\n    for i, row in enumerate(datareader):\n        line = row[0]\n        line = line.split(',')[1:]\n        if i == 0:\n            header = line\n        else:\n            data_lines.append(line)\n\nid_susenas_df = pd.DataFrame(columns=header, data=data_lines)\nid_susenas_df['ADM2_PCODE'] = id_susenas_df['ADM2_PCODE'].astype(str)\nnum_cols = ['wi_est_weighted', 'FWT', 'decile', 'percentile']\nfor col in num_cols:\n    id_susenas_df[col] = pd.to_numeric(id_susenas_df[col])\nid_susenas_df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 513 entries, 0 to 512\nData columns (total 5 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   ADM2_PCODE       513 non-null    object \n 1   wi_est_weighted  513 non-null    float64\n 2   FWT              513 non-null    float64\n 3   decile           513 non-null    int64  \n 4   percentile       513 non-null    int64  \ndtypes: float64(2), int64(2), object(1)\nmemory usage: 20.2+ KB\n\n\n\n# Sense check\nid_susenas_df.sort_values(\"wi_est_weighted\", ascending=False).head(10)\n\n\n\n\n\n  \n    \n      \n      ADM2_PCODE\n      wi_est_weighted\n      FWT\n      decile\n      percentile\n    \n  \n  \n    \n      181\n      3275\n      2.976982\n      822795.057168\n      9\n      99\n    \n    \n      280\n      5171\n      2.845034\n      291766.005047\n      9\n      99\n    \n    \n      182\n      3276\n      2.831525\n      666770.841333\n      9\n      99\n    \n    \n      146\n      1971\n      2.822536\n      59100.144617\n      9\n      99\n    \n    \n      271\n      3674\n      2.769406\n      462216.548087\n      9\n      99\n    \n    \n      18\n      1171\n      2.744420\n      78648.391220\n      9\n      99\n    \n    \n      269\n      3672\n      2.728934\n      105039.098669\n      9\n      98\n    \n    \n      363\n      6474\n      2.703631\n      47393.633010\n      9\n      98\n    \n    \n      268\n      3671\n      2.698627\n      604716.086515\n      9\n      98\n    \n    \n      261\n      3577\n      2.651625\n      51633.042267\n      9\n      98\n    \n  \n\n\n\n\n\nTemporary Fix: Use HDX admin bounds file to attach the proper PCODE\nThe Indonesia comparison data has no geoms but has a PCODE, which we can use with the official admin boundaries from HDX\n\nid_susenas_geoms_df = id_susenas_df.merge(id_adm2_gdf, how='left', on='ADM2_PCODE')\nid_susenas_geoms_gdf = gpd.GeoDataFrame(id_susenas_geoms_df, geometry=\"geometry\")\nid_susenas_geoms_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 513 entries, 0 to 512\nData columns (total 19 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   ADM2_PCODE       513 non-null    object  \n 1   wi_est_weighted  513 non-null    float64 \n 2   FWT              513 non-null    float64 \n 3   decile           513 non-null    int64   \n 4   percentile       513 non-null    int64   \n 5   Shape_Leng       513 non-null    float64 \n 6   Shape_Area       513 non-null    float64 \n 7   ADM2_EN          513 non-null    object  \n 8   ADM2_REF         0 non-null      object  \n 9   ADM2ALT1EN       0 non-null      object  \n 10  ADM2ALT2EN       0 non-null      object  \n 11  ADM1_EN          513 non-null    object  \n 12  ADM1_PCODE       513 non-null    object  \n 13  ADM0_EN          513 non-null    object  \n 14  ADM0_PCODE       513 non-null    object  \n 15  date             513 non-null    object  \n 16  validOn          513 non-null    object  \n 17  validTo          0 non-null      object  \n 18  geometry         513 non-null    geometry\ndtypes: float64(4), geometry(1), int64(2), object(12)\nmemory usage: 80.2+ KB\n\n\n\nid_susenas_geoms_df['wi_est_weighted'].hist()\n\n<AxesSubplot: >\n\n\n\n\n\n\n## Get rank"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#check-adm2_en-matches",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#check-adm2_en-matches",
    "title": "Indonesia Evaluation",
    "section": "Check ADM2_EN matches",
    "text": "Check ADM2_EN matches\n\nid_susenas_area_names = id_susenas_geoms_gdf['ADM2_EN'].values.tolist()\nid_rollout_agg_area_names = id_rollout_agg_by_adm2['ADM2_EN'].values.tolist()\n\n\nno_matches = list(set(id_rollout_agg_area_names).difference(id_susenas_area_names))\nno_matches\n\n['Danau Toba',\n 'Kepulauan Seribu',\n 'Waduk Cirata',\n 'Wadung Kedungombo',\n 'Danau',\n 'Hutan']\n\n\n\ndef returnNotMatches(a, b):\n    return [[x for x in a if x not in b], [x for x in b if x not in a]]\n\n\n# 6 items in the rollout data (out of 519) don't have matches in the comparison data \n# We'll drop them in the final comparison\nreturnNotMatches(id_susenas_area_names, id_rollout_agg_area_names)\n\n[[],\n ['Danau',\n  'Danau',\n  'Danau',\n  'Danau',\n  'Danau Toba',\n  'Hutan',\n  'Kepulauan Seribu',\n  'Waduk Cirata',\n  'Wadung Kedungombo']]"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#get-rank-correlation",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#get-rank-correlation",
    "title": "Indonesia Evaluation",
    "section": "Get rank correlation",
    "text": "Get rank correlation\n\n# id_susenas_geoms_gdf['shapeName'] = id_susenas_geoms_gdf['ADM2_EN']\n# id_susenas_geoms_gdf.head()\n\n\nid_rollout_agg_by_adm2 = id_rollout_agg_by_adm2[~id_rollout_agg_by_adm2['ADM2_EN'].isin(no_matches)]\nid_rollout_agg_by_adm2\n\n\n\n\n\n  \n    \n      \n      Shape_Leng\n      Shape_Area\n      ADM2_EN\n      ADM2_PCODE\n      ADM2_REF\n      ADM2ALT1EN\n      ADM2ALT2EN\n      ADM1_EN\n      ADM1_PCODE\n      ADM0_EN\n      ADM0_PCODE\n      date\n      validOn\n      validTo\n      geometry\n      model_wealth_index_mean\n      model_wealth_index_median\n    \n  \n  \n    \n      0\n      2.360029\n      0.228968\n      Aceh Barat\n      1107\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((96.26836 4.76800, 96.26822 4.76250, ...\n      0.306049\n      0.288863\n    \n    \n      1\n      1.963994\n      0.154136\n      Aceh Barat Daya\n      1112\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      MULTIPOLYGON (((96.80559 3.71758, 96.80444 3.7...\n      0.344363\n      0.329475\n    \n    \n      2\n      4.590182\n      0.236396\n      Aceh Besar\n      1108\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      MULTIPOLYGON (((95.20544 5.28072, 95.20563 5.2...\n      0.346366\n      0.326697\n    \n    \n      3\n      3.287754\n      0.316161\n      Aceh Jaya\n      1116\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      MULTIPOLYGON (((95.58431 4.61495, 95.58379 4.6...\n      0.298649\n      0.289465\n    \n    \n      4\n      4.448584\n      0.343038\n      Aceh Selatan\n      1103\n      None\n      None\n      None\n      Aceh\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      MULTIPOLYGON (((97.59461 2.80777, 97.59365 2.8...\n      0.313407\n      0.311266\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      517\n      3.508874\n      0.297509\n      Way Kanan\n      1807\n      None\n      None\n      None\n      Lampung\n      ID18\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((104.92793 -4.19234, 104.92823 -4.192...\n      0.312501\n      0.311106\n    \n    \n      518\n      2.718402\n      0.157671\n      Wonogiri\n      3312\n      None\n      None\n      None\n      Jawa Tengah\n      ID33\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((111.18204 -7.71237, 111.18242 -7.712...\n      0.389461\n      0.385794\n    \n    \n      519\n      1.828518\n      0.081405\n      Wonosobo\n      3307\n      None\n      None\n      None\n      Jawa Tengah\n      ID33\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((109.93000 -7.19465, 109.93017 -7.194...\n      0.385478\n      0.382874\n    \n    \n      520\n      5.771801\n      1.190892\n      Yahukimo\n      9416\n      None\n      None\n      None\n      Papua\n      ID94\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((139.96223 -3.60980, 139.96314 -3.609...\n      0.269791\n      0.258099\n    \n    \n      521\n      3.014997\n      0.325953\n      Yalimo\n      9432\n      None\n      None\n      None\n      Papua\n      ID94\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n      POLYGON ((139.47632 -3.45826, 139.47820 -3.459...\n      0.265563\n      0.258099\n    \n  \n\n513 rows × 17 columns\n\n\n\n\ncompare_gdf = (\n    id_rollout_agg_by_adm2[\n        [\"ADM2_EN\", \"ADM2_PCODE\", \"model_wealth_index_mean\", \"geometry\"]\n    ]\n    .merge(\n        id_susenas_geoms_gdf[[\"ADM2_EN\", \"ADM2_PCODE\", \"wi_est_weighted\"]],\n        on=\"ADM2_PCODE\",\n        how=\"inner\",\n        suffixes=[\"_model\", \"_reference\"],\n    )\n    .dropna()\n)\ncompare_gdf\n\n\n\n\n\n  \n    \n      \n      ADM2_EN_model\n      ADM2_PCODE\n      model_wealth_index_mean\n      geometry\n      ADM2_EN_reference\n      wi_est_weighted\n    \n  \n  \n    \n      0\n      Aceh Barat\n      1107\n      0.306049\n      POLYGON ((96.26836 4.76800, 96.26822 4.76250, ...\n      Aceh Barat\n      1.212825\n    \n    \n      1\n      Aceh Barat Daya\n      1112\n      0.344363\n      MULTIPOLYGON (((96.80559 3.71758, 96.80444 3.7...\n      Aceh Barat Daya\n      0.445685\n    \n    \n      2\n      Aceh Besar\n      1108\n      0.346366\n      MULTIPOLYGON (((95.20544 5.28072, 95.20563 5.2...\n      Aceh Besar\n      1.449827\n    \n    \n      3\n      Aceh Jaya\n      1116\n      0.298649\n      MULTIPOLYGON (((95.58431 4.61495, 95.58379 4.6...\n      Aceh Jaya\n      0.495084\n    \n    \n      4\n      Aceh Selatan\n      1103\n      0.313407\n      MULTIPOLYGON (((97.59461 2.80777, 97.59365 2.8...\n      Aceh Selatan\n      0.767717\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      508\n      Way Kanan\n      1807\n      0.312501\n      POLYGON ((104.92793 -4.19234, 104.92823 -4.192...\n      Way Kanan\n      -1.824709\n    \n    \n      509\n      Wonogiri\n      3312\n      0.389461\n      POLYGON ((111.18204 -7.71237, 111.18242 -7.712...\n      Wonogiri\n      0.501210\n    \n    \n      510\n      Wonosobo\n      3307\n      0.385478\n      POLYGON ((109.93000 -7.19465, 109.93017 -7.194...\n      Wonosobo\n      -1.914835\n    \n    \n      511\n      Yahukimo\n      9416\n      0.269791\n      POLYGON ((139.96223 -3.60980, 139.96314 -3.609...\n      Yahukimo\n      -6.374596\n    \n    \n      512\n      Yalimo\n      9432\n      0.265563\n      POLYGON ((139.47632 -3.45826, 139.47820 -3.459...\n      Yalimo\n      -4.269237\n    \n  \n\n513 rows × 6 columns\n\n\n\n\ncompare_gdf['rank_reference'] = compare_gdf['wi_est_weighted'].rank(ascending=False)\ncompare_gdf['rank_model'] = compare_gdf['model_wealth_index_mean'].rank(ascending=False)\n\n\ncoef, p = spearmanr(compare_gdf['rank_reference'], compare_gdf['rank_model'])\ncoef, p\n\n(0.7201497684711131, 3.68129491113764e-83)\n\n\n\n# Top 10 based on reference\ntop10_adm2_reference = compare_gdf[['ADM2_EN_model', 'ADM2_PCODE','rank_reference', 'rank_model']].sort_values('rank_reference').head(10)\ntop10_adm2_reference\n\n\n\n\n\n  \n    \n      \n      ADM2_EN_model\n      ADM2_PCODE\n      rank_reference\n      rank_model\n    \n  \n  \n    \n      181\n      Kota Bekasi\n      3275\n      1.0\n      8.0\n    \n    \n      193\n      Kota Denpasar\n      5171\n      2.0\n      12.0\n    \n    \n      194\n      Kota Depok\n      3276\n      3.0\n      13.0\n    \n    \n      229\n      Kota Pangkal Pinang\n      1971\n      4.0\n      50.0\n    \n    \n      256\n      Kota Tangerang Selatan\n      3674\n      5.0\n      10.0\n    \n    \n      171\n      Kota Banda Aceh\n      1171\n      6.0\n      18.0\n    \n    \n      190\n      Kota Cilegon\n      3672\n      7.0\n      66.0\n    \n    \n      188\n      Kota Bontang\n      6474\n      8.0\n      95.0\n    \n    \n      255\n      Kota Tangerang\n      3671\n      9.0\n      7.0\n    \n    \n      212\n      Kota Madiun\n      3577\n      10.0\n      34.0\n    \n  \n\n\n\n\n\n# Top 10 based on model\ntop10_adm2_reference = compare_gdf[['ADM2_EN_model', 'ADM2_PCODE', 'rank_model','rank_reference']].sort_values('rank_model').head(10)\ntop10_adm2_reference\n\n\n\n\n\n  \n    \n      \n      ADM2_EN_model\n      ADM2_PCODE\n      rank_model\n      rank_reference\n    \n  \n  \n    \n      199\n      Kota Jakarta Pusat\n      3173\n      1.0\n      18.0\n    \n    \n      200\n      Kota Jakarta Selatan\n      3171\n      2.0\n      15.0\n    \n    \n      198\n      Kota Jakarta Barat\n      3174\n      3.0\n      14.0\n    \n    \n      267\n      Kota Yogyakarta\n      3471\n      4.0\n      87.0\n    \n    \n      201\n      Kota Jakarta Timur\n      3172\n      5.0\n      11.0\n    \n    \n      202\n      Kota Jakarta Utara\n      3175\n      6.0\n      20.0\n    \n    \n      255\n      Kota Tangerang\n      3671\n      7.0\n      9.0\n    \n    \n      181\n      Kota Bekasi\n      3275\n      8.0\n      1.0\n    \n    \n      254\n      Kota Surakarta\n      3372\n      9.0\n      62.0\n    \n    \n      256\n      Kota Tangerang Selatan\n      3674\n      10.0\n      5.0\n    \n  \n\n\n\n\n\n# Bottom 10 based on reference\nbottom10_adm2_reference = compare_gdf[['ADM2_EN_model', 'ADM2_PCODE','rank_reference', 'rank_model']].sort_values('rank_reference').tail(10)\n\n\n# Bottom 10 based on model\ncompare_gdf[['ADM2_EN_model', 'ADM2_PCODE', 'rank_model','rank_reference']].sort_values('rank_model').tail(10)\n\n\n\n\n\n  \n    \n      \n      ADM2_EN_model\n      ADM2_PCODE\n      rank_model\n      rank_reference\n    \n  \n  \n    \n      321\n      Mamberamo Tengah\n      9431\n      504.0\n      512.0\n    \n    \n      413\n      Puncak Jaya\n      9411\n      505.0\n      506.0\n    \n    \n      71\n      Boven Digoel\n      9413\n      506.0\n      387.0\n    \n    \n      412\n      Puncak\n      9433\n      507.0\n      503.0\n    \n    \n      391\n      Pegunungan Bintang\n      9417\n      508.0\n      500.0\n    \n    \n      124\n      Intan Jaya\n      9435\n      509.0\n      510.0\n    \n    \n      360\n      Nduga\n      9429\n      510.0\n      513.0\n    \n    \n      331\n      Mappi\n      9414\n      511.0\n      499.0\n    \n    \n      14\n      Asmat\n      9415\n      512.0\n      504.0\n    \n    \n      320\n      Mamberamo Raya\n      9428\n      513.0\n      491.0"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#heatmap",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#heatmap",
    "title": "Indonesia Evaluation",
    "section": "Heatmap",
    "text": "Heatmap\n\ndef despine(ax):\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\nfig, axs = plt.subplots(2,1, figsize=(7.5,9))\n\ncompare_gdf.plot(\n    column='rank_reference',\n    ax=axs[0],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3, \"label\":\"rank\"},\n)\ndespine(axs[0])\n\ncompare_gdf.plot(\n    column='rank_model',\n    ax=axs[1],\n    cmap=\"RdYlGn_r\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.3, \"label\":\"rank\"},\n)\ndespine(axs[1])\naxs[0].set_title('Reference')\naxs[1].set_title('Predicted')\nfig.tight_layout()"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#get-scatter-plot",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#get-scatter-plot",
    "title": "Indonesia Evaluation",
    "section": "Get scatter plot",
    "text": "Get scatter plot\n\ndef custom_round(x, base=5):\n    return int(base * round(float(x)/base))\n\n\nn=10\nranks_rounded_gdf = compare_gdf.copy()\nranks_rounded_gdf['rank_model'] = ranks_rounded_gdf['rank_model'].apply(lambda x: custom_round(x, base=n))\nranks_rounded_gdf['rank_reference'] = ranks_rounded_gdf['rank_reference'].apply(lambda x: custom_round(x, base=n))\nax = ranks_rounded_gdf.plot.scatter('rank_reference', 'rank_model', c='r', alpha=0.2)\nax.set_aspect('equal')\nax.set_xlabel(\"Reference Wealth Rank\")\nax.set_ylabel(\"Model Wealth Rank\")\n\nText(0, 0.5, 'Model Wealth Rank')\n\n\n\n\n\n\ncompare_gdf.plot.scatter('rank_model', 'rank_reference', c='r', alpha=0.4)\n\n<AxesSubplot: xlabel='rank_model', ylabel='rank_reference'>\n\n\n\n\n\n\nbottom_adm2_reference = compare_gdf[['ADM2_EN_model', 'ADM2_PCODE','rank_reference', 'rank_model']].sort_values('rank_reference').tail(30)\n\n\nax = bottom_adm2_reference.plot.scatter('rank_model', 'rank_reference', c='r', alpha=0.4)\n# ax.set_xlim([450, 530])\n# ax.set_ylim([450, 530])"
  },
  {
    "objectID": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#explore-per-subarea-ranking",
    "href": "notebooks/2023-03-15-rollout-output-comparisons/id/1_id_compare_rank_province.html#explore-per-subarea-ranking",
    "title": "Indonesia Evaluation",
    "section": "Explore per subarea ranking",
    "text": "Explore per subarea ranking\n\nlen(id_rollout_agg_by_adm2['ADM1_EN'].unique())\n\n34\n\n\n\nimport gc\n\narea_list = list(id_rollout_agg_by_adm2['ADM1_EN'].unique())\narea_spearmanr_list = []\nfor area in area_list:\n    area_rollout_output = id_rollout_agg_by_adm2[id_rollout_agg_by_adm2['ADM1_EN'] == area].copy()\n    # area_rollout_output['rank'] = area_rollout_output['model_wealth_index_mean'].rank(ascending=False)\n    area_susenas_gdf = id_susenas_geoms_gdf[id_susenas_geoms_gdf['ADM1_EN'] == area].copy()\n    # area_susenas_gdf['rank'] = area_susenas_gdf['wi_est_weighted'].rank(ascending=False)\n    \n    area_compare_gdf = (\n        area_rollout_output[\n            [\"ADM2_EN\", \"ADM2_PCODE\", \"model_wealth_index_median\", \"geometry\"]\n        ]\n        .merge(\n            area_susenas_gdf[[\"ADM2_EN\", \"ADM2_PCODE\", \"wi_est_weighted\"]],\n            on=\"ADM2_PCODE\",\n            how=\"inner\",\n            suffixes=[\"_model\", \"_reference\"],\n        )\n        .dropna()\n    )\n\n    area_compare_gdf['rank_reference'] = area_compare_gdf['wi_est_weighted'].rank(ascending=False)\n    area_compare_gdf['rank_model'] = area_compare_gdf['model_wealth_index_mean'].rank(ascending=False)    \n\n    coef, p = spearmanr(area_compare_gdf['rank_reference'], area_compare_gdf['rank_model'])\n    print(f'{area} ({len(area_compare_gdf)}) -- Spearman Rank Correlation: {coef:.2} (p-value = {p:.2}) ')\n    area_spearmanr_list.append(coef)\ngc.collect()\n# area_spearmanr_arr = np.array(area_spearmanr_list)\n# plt.hist(area_spearmanr_arr)\n\nspearman_by_area = pd.DataFrame({\n    'ADM1_EN': area_list,\n    'spearman_r': area_spearmanr_list\n})\nspearman_by_area= spearman_by_area.merge(id_adm2_gdf.dissolve('ADM1_EN'), how='left', on='ADM1_EN')\nspearman_by_area = gpd.GeoDataFrame(spearman_by_area, geometry=\"geometry\")\nspearman_by_area['spearman_r'].hist(bins=10)\n\nspearman_by_area.head()\n\nKeyError: 'model_wealth_index_mean'\n\n\n\nspearman_by_area.loc[spearman_by_area['spearman_r'] < 0.5].sort_values('spearman_r')\n\n\n\n\n\n  \n    \n      \n      ADM1_EN\n      spearman_r\n      geometry\n      Shape_Leng\n      Shape_Area\n      ADM2_EN\n      ADM2_PCODE\n      ADM2_REF\n      ADM2ALT1EN\n      ADM2ALT2EN\n      ADM1_PCODE\n      ADM0_EN\n      ADM0_PCODE\n      date\n      validOn\n      validTo\n    \n  \n  \n    \n      32\n      Dki Jakarta\n      0.000000\n      MULTIPOLYGON (((106.52018 -5.96011, 106.51991 ...\n      1.278015\n      0.000880\n      Kepulauan Seribu\n      3101\n      None\n      None\n      None\n      ID31\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      19\n      Bengkulu\n      0.115152\n      MULTIPOLYGON (((102.38683 -5.47139, 102.38707 ...\n      1.598399\n      0.099968\n      Bengkulu Selatan\n      1701\n      None\n      None\n      None\n      ID17\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      25\n      Sulawesi Tenggara\n      0.250000\n      MULTIPOLYGON (((121.93669 -5.49323, 121.93652 ...\n      5.421894\n      0.271792\n      Bombana\n      7406\n      None\n      None\n      None\n      ID74\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      33\n      Sulawesi Barat\n      0.314286\n      MULTIPOLYGON (((119.00584 -3.53308, 119.00442 ...\n      2.141557\n      0.072523\n      Majene\n      7601\n      None\n      None\n      None\n      ID76\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      2\n      Nusa Tenggara Timur\n      0.341615\n      MULTIPOLYGON (((119.54236 -9.75303, 119.54145 ...\n      5.513097\n      0.241630\n      Alor\n      5307\n      None\n      None\n      None\n      ID53\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      6\n      Kalimantan Selatan\n      0.362637\n      MULTIPOLYGON (((115.66627 -4.73677, 115.66653 ...\n      2.106946\n      0.154674\n      Balangan\n      6311\n      None\n      None\n      None\n      ID63\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      12\n      Sulawesi Selatan\n      0.373913\n      MULTIPOLYGON (((117.20300 -7.75854, 117.20286 ...\n      1.009615\n      0.032547\n      Bantaeng\n      7303\n      None\n      None\n      None\n      ID73\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n  \n\n\n\n\n\nspearman_by_area\n\n\n\n\n\n  \n    \n      \n      ADM1_EN\n      spearman_r\n      geometry\n      Shape_Leng\n      Shape_Area\n      ADM2_EN\n      ADM2_PCODE\n      ADM2_REF\n      ADM2ALT1EN\n      ADM2ALT2EN\n      ADM1_PCODE\n      ADM0_EN\n      ADM0_PCODE\n      date\n      validOn\n      validTo\n    \n  \n  \n    \n      0\n      Aceh\n      0.500000\n      MULTIPOLYGON (((95.28787 5.12890, 95.28796 5.1...\n      2.360029\n      0.228968\n      Aceh Barat\n      1107\n      None\n      None\n      None\n      ID11\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      1\n      Sumatera Barat\n      0.685965\n      MULTIPOLYGON (((99.53782 -2.22114, 99.53735 -2...\n      2.648821\n      0.181812\n      Agam\n      1307\n      None\n      None\n      None\n      ID13\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      2\n      Nusa Tenggara Timur\n      0.341615\n      MULTIPOLYGON (((119.54236 -9.75303, 119.54145 ...\n      5.513097\n      0.241630\n      Alor\n      5307\n      None\n      None\n      None\n      ID53\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      3\n      Sumatera Utara\n      0.729612\n      MULTIPOLYGON (((97.89210 -0.07667, 97.89186 -0...\n      3.592370\n      0.307542\n      Asahan\n      1208\n      None\n      None\n      None\n      ID12\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      4\n      Papua\n      0.580296\n      MULTIPOLYGON (((134.86427 -3.24425, 134.86404 ...\n      7.478910\n      2.041799\n      Asmat\n      9415\n      None\n      None\n      None\n      ID94\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      5\n      Bali\n      0.833333\n      MULTIPOLYGON (((115.12494 -8.84731, 115.12502 ...\n      2.337003\n      0.032441\n      Badung\n      5103\n      None\n      None\n      None\n      ID51\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      6\n      Kalimantan Selatan\n      0.362637\n      MULTIPOLYGON (((115.66627 -4.73677, 115.66653 ...\n      2.106946\n      0.154674\n      Balangan\n      6311\n      None\n      None\n      None\n      ID63\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      7\n      Jawa Barat\n      0.741148\n      MULTIPOLYGON (((107.42275 -7.50549, 107.42249 ...\n      3.093005\n      0.143607\n      Bandung\n      3204\n      None\n      None\n      None\n      ID32\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      8\n      Sulawesi Tengah\n      0.681319\n      MULTIPOLYGON (((121.36343 -1.94469, 121.36332 ...\n      7.415261\n      0.675995\n      Banggai\n      7202\n      None\n      None\n      None\n      ID72\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      9\n      Kepulauan Bangka Belitung\n      0.964286\n      MULTIPOLYGON (((106.51615 -3.13537, 106.51605 ...\n      3.607618\n      0.245180\n      Bangka\n      1901\n      None\n      None\n      None\n      ID19\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      10\n      Jawa Timur\n      0.832148\n      MULTIPOLYGON (((111.51168 -8.37022, 111.51203 ...\n      1.902703\n      0.106667\n      Bangkalan\n      3526\n      None\n      None\n      None\n      ID35\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      11\n      Jawa Tengah\n      0.647059\n      MULTIPOLYGON (((108.88336 -7.74827, 108.88348 ...\n      2.326238\n      0.094114\n      Banjarnegara\n      3304\n      None\n      None\n      None\n      ID33\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      12\n      Sulawesi Selatan\n      0.373913\n      MULTIPOLYGON (((117.20300 -7.75854, 117.20286 ...\n      1.009615\n      0.032547\n      Bantaeng\n      7303\n      None\n      None\n      None\n      ID73\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      13\n      Daerah Istimewa Yogyakarta\n      0.900000\n      MULTIPOLYGON (((110.60430 -8.14786, 110.60444 ...\n      1.832076\n      0.042281\n      Bantul\n      3402\n      None\n      None\n      None\n      ID34\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      14\n      Sumatera Selatan\n      0.696078\n      MULTIPOLYGON (((103.93264 -4.88620, 103.93189 ...\n      10.707962\n      0.902916\n      Banyu Asin\n      1607\n      None\n      None\n      None\n      ID16\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      15\n      Kalimantan Tengah\n      0.828571\n      MULTIPOLYGON (((113.36194 -3.28663, 113.36193 ...\n      4.518498\n      0.539201\n      Barito Selatan\n      6204\n      None\n      None\n      None\n      ID62\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      16\n      Jambi\n      0.736364\n      MULTIPOLYGON (((101.55667 -2.44936, 101.55640 ...\n      4.598857\n      0.444096\n      Batang Hari\n      1504\n      None\n      None\n      None\n      ID15\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      17\n      Riau\n      0.678322\n      MULTIPOLYGON (((101.03799 -0.35730, 101.03694 ...\n      7.302387\n      0.691464\n      Bengkalis\n      1408\n      None\n      None\n      None\n      ID14\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      18\n      Kalimantan Barat\n      0.837363\n      MULTIPOLYGON (((108.74682 -1.70011, 108.74714 ...\n      5.398739\n      0.457681\n      Bengkayang\n      6102\n      None\n      None\n      None\n      ID61\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      19\n      Bengkulu\n      0.115152\n      MULTIPOLYGON (((102.38683 -5.47139, 102.38707 ...\n      1.598399\n      0.099968\n      Bengkulu Selatan\n      1701\n      None\n      None\n      None\n      ID17\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      20\n      Kalimantan Timur\n      0.733333\n      MULTIPOLYGON (((116.42979 -2.20352, 116.50644 ...\n      18.412760\n      1.831452\n      Berau\n      6405\n      None\n      None\n      None\n      ID64\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      21\n      Nusa Tenggara Barat\n      0.551515\n      MULTIPOLYGON (((115.98652 -8.89059, 115.98627 ...\n      9.154924\n      0.345607\n      Bima\n      5206\n      None\n      None\n      None\n      ID52\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      22\n      Kepulauan Riau\n      0.821429\n      MULTIPOLYGON (((103.62747 0.48003, 103.62742 0...\n      8.316409\n      0.108571\n      Bintan\n      2102\n      None\n      None\n      None\n      ID21\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      23\n      Gorontalo\n      0.771429\n      MULTIPOLYGON (((121.42485 0.41554, 121.42594 0...\n      3.552539\n      0.149502\n      Boalemo\n      7501\n      None\n      None\n      None\n      ID75\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      24\n      Sulawesi Utara\n      0.825000\n      MULTIPOLYGON (((124.35330 0.41773, 124.35316 0...\n      3.396802\n      0.263044\n      Bolaang Mongondow\n      7101\n      None\n      None\n      None\n      ID71\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      25\n      Sulawesi Tenggara\n      0.250000\n      MULTIPOLYGON (((121.93669 -5.49323, 121.93652 ...\n      5.421894\n      0.271792\n      Bombana\n      7406\n      None\n      None\n      None\n      ID74\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      26\n      Kalimantan Utara\n      0.700000\n      MULTIPOLYGON (((117.49016 3.66952, 117.49028 3...\n      18.165091\n      1.033893\n      Bulungan\n      6502\n      None\n      None\n      None\n      ID65\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      27\n      Maluku\n      0.645455\n      MULTIPOLYGON (((128.22516 -8.23555, 128.22592 ...\n      3.398326\n      0.362856\n      Buru\n      8104\n      None\n      None\n      None\n      ID81\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      28\n      Papua Barat\n      0.780220\n      MULTIPOLYGON (((129.72514 -1.85501, 129.72377 ...\n      9.412293\n      0.893839\n      Fakfak\n      9101\n      None\n      None\n      None\n      ID91\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      29\n      Maluku Utara\n      0.903030\n      MULTIPOLYGON (((124.39346 -2.03358, 124.39360 ...\n      5.301558\n      0.176879\n      Halmahera Barat\n      8201\n      None\n      None\n      None\n      ID82\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      30\n      Lampung\n      0.692857\n      MULTIPOLYGON (((104.81786 -5.78283, 104.81885 ...\n      0.319862\n      0.002357\n      Danau\n      1888\n      None\n      None\n      None\n      ID18\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      31\n      Banten\n      0.809524\n      MULTIPOLYGON (((105.23979 -6.83767, 105.23988 ...\n      0.980957\n      0.013418\n      Kota Cilegon\n      3672\n      None\n      None\n      None\n      ID36\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      32\n      Dki Jakarta\n      0.000000\n      MULTIPOLYGON (((106.52018 -5.96011, 106.51991 ...\n      1.278015\n      0.000880\n      Kepulauan Seribu\n      3101\n      None\n      None\n      None\n      ID31\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n    \n      33\n      Sulawesi Barat\n      0.314286\n      MULTIPOLYGON (((119.00584 -3.53308, 119.00442 ...\n      2.141557\n      0.072523\n      Majene\n      7601\n      None\n      None\n      None\n      ID76\n      Indonesia\n      ID\n      2019-12-20\n      2020-04-01\n      None\n    \n  \n\n\n\n\n\nspearman_by_area['spearman_r'].describe()\n\ncount    34.000000\nmean      0.643037\nstd       0.232603\nmin       0.000000\n25%       0.558710\n50%       0.698039\n75%       0.818452\nmax       0.964286\nName: spearman_r, dtype: float64\n\n\n\n# spearman_by_area.explore(\n#     'spearman_r',\n#     vmin=-0.7,\n#     vmax=0.7,\n#     cmap='RdYlGn'\n# )"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"la\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2017\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-la-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"../{rollout_date}-cross-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_la_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\naoi.info()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scaled_only=False,\n    sklearn_scaler=scaler,\n    features_only=True,\n    use_aoi_quadkey=True,\n)\n\n2023-04-03 08:12:16.563 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for laos at /home/jace/.geowrangler/osm/laos? True\n2023-04-03 08:12:16.563 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for laos being loaded from /home/jace/.geowrangler/osm/laos/gis_osm_pois_free_1.shp\n2023-04-03 08:12:21.088 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for laos at /home/jace/.geowrangler/osm/laos? True\n2023-04-03 08:12:21.090 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for laos being loaded from /home/jace/.geowrangler/osm/laos/gis_osm_roads_free_1.shp\n2023-04-03 08:12:26.487 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-03 08:12:26.488 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jace/.geowrangler/ookla/processed/63e5da2e8a7b57f0ef7942656eb89e11.csv? True\n2023-04-03 08:12:26.489 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 63e5da2e8a7b57f0ef7942656eb89e11) found in filesystem. Loading in cache.\n2023-04-03 08:12:27.163 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['63e5da2e8a7b57f0ef7942656eb89e11']\n2023-04-03 08:12:27.165 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jace/.geowrangler/ookla/processed/a1bc2e352417533b160e37996521193d.csv? True\n2023-04-03 08:12:27.166 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: a1bc2e352417533b160e37996521193d) found in filesystem. Loading in cache.\n2023-04-03 08:12:28.109 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/736d0303579e70d5160f88bbb93f4986.tif\n\n\nCPU times: user 52.6 s, sys: 25.4 s, total: 1min 17s\nWall time: 1min 18s\n\n\n\n# Save raw features, can be used for validation\nraw_features = features[[col for col in features.columns if \"_scaled\" not in col]]\n# Then keep only scaled columns\nfeatures = features[[col for col in features.columns if \"_scaled\" in col]]"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 22133 entries, 0 to 22132\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          22133 non-null  float64\n 1   atm_count_scaled                          22133 non-null  float64\n 2   atm_nearest_scaled                        22133 non-null  float64\n 3   bank_count_scaled                         22133 non-null  float64\n 4   bank_nearest_scaled                       22133 non-null  float64\n 5   bus_station_count_scaled                  22133 non-null  float64\n 6   bus_station_nearest_scaled                22133 non-null  float64\n 7   cafe_count_scaled                         22133 non-null  float64\n 8   cafe_nearest_scaled                       22133 non-null  float64\n 9   charging_station_count_scaled             22133 non-null  float64\n 10  charging_station_nearest_scaled           22133 non-null  float64\n 11  courthouse_count_scaled                   22133 non-null  float64\n 12  courthouse_nearest_scaled                 22133 non-null  float64\n 13  dentist_count_scaled                      22133 non-null  float64\n 14  dentist_nearest_scaled                    22133 non-null  float64\n 15  fast_food_count_scaled                    22133 non-null  float64\n 16  fast_food_nearest_scaled                  22133 non-null  float64\n 17  fire_station_count_scaled                 22133 non-null  float64\n 18  fire_station_nearest_scaled               22133 non-null  float64\n 19  food_court_count_scaled                   22133 non-null  float64\n 20  food_court_nearest_scaled                 22133 non-null  float64\n 21  fuel_count_scaled                         22133 non-null  float64\n 22  fuel_nearest_scaled                       22133 non-null  float64\n 23  hospital_count_scaled                     22133 non-null  float64\n 24  hospital_nearest_scaled                   22133 non-null  float64\n 25  library_count_scaled                      22133 non-null  float64\n 26  library_nearest_scaled                    22133 non-null  float64\n 27  marketplace_count_scaled                  22133 non-null  float64\n 28  marketplace_nearest_scaled                22133 non-null  float64\n 29  pharmacy_count_scaled                     22133 non-null  float64\n 30  pharmacy_nearest_scaled                   22133 non-null  float64\n 31  police_count_scaled                       22133 non-null  float64\n 32  police_nearest_scaled                     22133 non-null  float64\n 33  post_box_count_scaled                     22133 non-null  float64\n 34  post_box_nearest_scaled                   22133 non-null  float64\n 35  post_office_count_scaled                  22133 non-null  float64\n 36  post_office_nearest_scaled                22133 non-null  float64\n 37  restaurant_count_scaled                   22133 non-null  float64\n 38  restaurant_nearest_scaled                 22133 non-null  float64\n 39  social_facility_count_scaled              22133 non-null  float64\n 40  social_facility_nearest_scaled            22133 non-null  float64\n 41  supermarket_count_scaled                  22133 non-null  float64\n 42  supermarket_nearest_scaled                22133 non-null  float64\n 43  townhall_count_scaled                     22133 non-null  float64\n 44  townhall_nearest_scaled                   22133 non-null  float64\n 45  road_count_scaled                         22133 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    22133 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    22133 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    22133 non-null  float64\n 49  fixed_2019_mean_num_tests_mean_scaled     22133 non-null  float64\n 50  fixed_2019_mean_num_devices_mean_scaled   22133 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   22133 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   22133 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   22133 non-null  float64\n 54  mobile_2019_mean_num_tests_mean_scaled    22133 non-null  float64\n 55  mobile_2019_mean_num_devices_mean_scaled  22133 non-null  float64\n 56  avg_rad_min_scaled                        22133 non-null  float64\n 57  avg_rad_max_scaled                        22133 non-null  float64\n 58  avg_rad_mean_scaled                       22133 non-null  float64\n 59  avg_rad_std_scaled                        22133 non-null  float64\n 60  avg_rad_median_scaled                     22133 non-null  float64\ndtypes: float64(61)\nmemory usage: 11.0 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nrollout_aoi.info()\n\n\nrollout_aoi.head(2)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#save-output",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#save-output",
    "title": "Predict on rollout grids",
    "section": "Save output",
    "text": "Save output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 3.47 s, sys: 93.8 ms, total: 3.56 s\nWall time: 3.63 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(raw_features).join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/3_la_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<Axes: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"la\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-04-02 23:30:36.854 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/laos_14_ADM2_populated_admin_grids.geojson\n2023-04-02 23:30:36.855 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region laos and admin level ADM2\n2023-04-02 23:30:37.048 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region laos and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n\n\n\n2023-04-02 23:30:59.997 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 44335 grids for region laos and admin level ADM2 at quadkey level 14\n2023-04-02 23:31:00.004 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-04-02 23:31:03.953 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting laos population data for filtering grids\n2023-04-02 23:31:05.289 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-04-02 23:31:05.291 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 44335 grids for file size 8294976524\n2023-04-02 23:36:07.744 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-04-02 23:36:07.764 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 22133\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 22133 entries, 0 to 44334\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    22133 non-null  geometry\n 1   quadkey     22133 non-null  object  \n 2   shapeName   22133 non-null  object  \n 3   shapeISO    22133 non-null  object  \n 4   shapeID     22133 non-null  object  \n 5   shapeGroup  22133 non-null  object  \n 6   shapeType   22133 non-null  object  \n 7   pop_count   22133 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 1.5+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      0\n      POLYGON ((100.06348 20.34463, 100.06348 20.365...\n      13220113003212\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      1139.814456\n    \n    \n      1\n      POLYGON ((100.08545 20.36523, 100.08545 20.385...\n      13220113003211\n      Tonpheung\n      None\n      LAO-ADM2-3_0_0-B114\n      LAO\n      ADM2\n      18.897820\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-cross-country-rollouts/la/2_la_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html",
    "title": "Generate training data",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport getpass\nimport json\nfrom pathlib import Path\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom povertymapping import dhs, feature_engineering, nightlights, settings\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html#set-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html#set-parameters",
    "title": "Generate training data",
    "section": "Set Parameters",
    "text": "Set Parameters\n\n# Set country-specific variables\ncountry_config = {\n    \"Philippines\": {\n        \"country_code\": \"ph\",\n        \"country_osm\": \"philippines\",\n        \"ookla_year\": 2019,\n        \"nightlights_year\": 2017,\n        \"dhs_household_dta_path\": settings.DATA_DIR / \"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        \"dhs_geographic_shp_path\": settings.DATA_DIR / \"dhs/ph/PHGE71FL/PHGE71FL.shp\",\n    },\n    \"Timor Leste\": {\n        \"country_code\": \"tl\",\n        \"country_osm\": \"east-timor\",\n        \"ookla_year\": 2019,\n        \"nightlights_year\": 2016,\n        \"dhs_household_dta_path\": settings.DATA_DIR / \"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        \"dhs_geographic_shp_path\": settings.DATA_DIR / \"dhs/tl/TLGE71FL/TLGE71FL.shp\",\n    },\n    \"Cambodia\": {\n        \"country_code\": \"kh\",\n        \"country_osm\": \"cambodia\",\n        \"ookla_year\": 2019,\n        \"nightlights_year\": 2014,\n        \"dhs_household_dta_path\": settings.DATA_DIR / \"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        \"dhs_geographic_shp_path\": settings.DATA_DIR / \"dhs/kh/KHGE71FL/KHGE71FL.shp\",\n    },\n    \"Myanmar\": {\n        \"country_code\": \"mm\",\n        \"country_osm\": \"myanmar\",\n        \"ookla_year\": 2019,\n        \"nightlights_year\": 2015,\n        \"dhs_household_dta_path\": settings.DATA_DIR / \"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        \"dhs_geographic_shp_path\": settings.DATA_DIR / \"dhs/mm/MMGE71FL/MMGE71FL.shp\",\n    },\n}\n\n# Indicate name of column from dhs data that will be used as the label for training\nDHS_LABEL_COL = \"Wealth Index\"\nOUTPUT_LABEL_COL = \"Wealth Index - Scaled\"\n\n# Tile size for the area around a DHS household cluster to generate features for.\n# We set this to 2.4km to match target rollout size of Bing Tile Zoom Level 14 (~2.4km)\nTILE_SIZE_KM = 2.4\n\n# For convenience, consider the rollout version as the date of the root notebook folder.\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-1].split(\"-\")[:3])"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html#set-up-eog-api-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/0_generate_training_data.html#set-up-eog-api-access",
    "title": "Generate training data",
    "section": "Set up EOG API Access",
    "text": "Set up EOG API Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-24 13:02:41.056 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-24 13:02:41.058 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-17 14:10:56.559 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-17 14:10:56.573 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"my\"\nCOUNTRY_OSM = \"malaysia-singapore-brunei\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2019\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-my-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"../{rollout_date}-cross-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_my_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\naoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 30202 entries, 0 to 30201\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   quadkey     30202 non-null  object  \n 1   shapeName   30202 non-null  object  \n 2   shapeISO    30202 non-null  object  \n 3   shapeID     30202 non-null  object  \n 4   shapeGroup  30202 non-null  object  \n 5   shapeType   30202 non-null  object  \n 6   pop_count   30202 non-null  float64 \n 7   geometry    30202 non-null  geometry\ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 1.8+ MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scaled_only=False,\n    sklearn_scaler=scaler,\n    features_only=True,\n    use_aoi_quadkey=True,\n)\n\n2023-04-17 14:10:59.517 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for malaysia-singapore-brunei at /home/alron/.geowrangler/osm/malaysia-singapore-brunei? True\n2023-04-17 14:10:59.518 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for malaysia-singapore-brunei being loaded from /home/alron/.geowrangler/osm/malaysia-singapore-brunei/gis_osm_pois_free_1.shp\n2023-04-17 14:11:11.067 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for malaysia-singapore-brunei at /home/alron/.geowrangler/osm/malaysia-singapore-brunei? True\n2023-04-17 14:11:11.068 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for malaysia-singapore-brunei being loaded from /home/alron/.geowrangler/osm/malaysia-singapore-brunei/gis_osm_roads_free_1.shp\n2023-04-17 14:12:43.204 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-17 14:12:43.205 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/65e70aee4527563c2836aecfcd8237b7.csv? True\n2023-04-17 14:12:43.206 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 65e70aee4527563c2836aecfcd8237b7) found in filesystem. Loading in cache.\n2023-04-17 14:12:48.056 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['65e70aee4527563c2836aecfcd8237b7']\n2023-04-17 14:12:48.058 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/fa94782c9eac0bd8c079462755ed90ee.csv? True\n2023-04-17 14:12:48.060 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: fa94782c9eac0bd8c079462755ed90ee) found in filesystem. Loading in cache.\n2023-04-17 14:12:55.235 | INFO     | povertymapping.nightlights:get_clipped_raster:451 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/dc93f1a2987dd701d395d06b798d3feb.tif\n\n\nCPU times: user 3min 36s, sys: 11.3 s, total: 3min 47s\nWall time: 3min 48s\n\n\n\n# Save raw features, can be used for validation\nraw_features = features[[col for col in features.columns if \"_scaled\" not in col]]\n# Then keep only scaled columns\nfeatures = features[[col for col in features.columns if \"_scaled\" in col]]"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 30202 entries, 0 to 30201\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          30202 non-null  float64\n 1   atm_count_scaled                          30202 non-null  float64\n 2   atm_nearest_scaled                        30202 non-null  float64\n 3   bank_count_scaled                         30202 non-null  float64\n 4   bank_nearest_scaled                       30202 non-null  float64\n 5   bus_station_count_scaled                  30202 non-null  float64\n 6   bus_station_nearest_scaled                30202 non-null  float64\n 7   cafe_count_scaled                         30202 non-null  float64\n 8   cafe_nearest_scaled                       30202 non-null  float64\n 9   charging_station_count_scaled             30202 non-null  float64\n 10  charging_station_nearest_scaled           30202 non-null  float64\n 11  courthouse_count_scaled                   30202 non-null  float64\n 12  courthouse_nearest_scaled                 30202 non-null  float64\n 13  dentist_count_scaled                      30202 non-null  float64\n 14  dentist_nearest_scaled                    30202 non-null  float64\n 15  fast_food_count_scaled                    30202 non-null  float64\n 16  fast_food_nearest_scaled                  30202 non-null  float64\n 17  fire_station_count_scaled                 30202 non-null  float64\n 18  fire_station_nearest_scaled               30202 non-null  float64\n 19  food_court_count_scaled                   30202 non-null  float64\n 20  food_court_nearest_scaled                 30202 non-null  float64\n 21  fuel_count_scaled                         30202 non-null  float64\n 22  fuel_nearest_scaled                       30202 non-null  float64\n 23  hospital_count_scaled                     30202 non-null  float64\n 24  hospital_nearest_scaled                   30202 non-null  float64\n 25  library_count_scaled                      30202 non-null  float64\n 26  library_nearest_scaled                    30202 non-null  float64\n 27  marketplace_count_scaled                  30202 non-null  float64\n 28  marketplace_nearest_scaled                30202 non-null  float64\n 29  pharmacy_count_scaled                     30202 non-null  float64\n 30  pharmacy_nearest_scaled                   30202 non-null  float64\n 31  police_count_scaled                       30202 non-null  float64\n 32  police_nearest_scaled                     30202 non-null  float64\n 33  post_box_count_scaled                     30202 non-null  float64\n 34  post_box_nearest_scaled                   30202 non-null  float64\n 35  post_office_count_scaled                  30202 non-null  float64\n 36  post_office_nearest_scaled                30202 non-null  float64\n 37  restaurant_count_scaled                   30202 non-null  float64\n 38  restaurant_nearest_scaled                 30202 non-null  float64\n 39  social_facility_count_scaled              30202 non-null  float64\n 40  social_facility_nearest_scaled            30202 non-null  float64\n 41  supermarket_count_scaled                  30202 non-null  float64\n 42  supermarket_nearest_scaled                30202 non-null  float64\n 43  townhall_count_scaled                     30202 non-null  float64\n 44  townhall_nearest_scaled                   30202 non-null  float64\n 45  road_count_scaled                         30202 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    30202 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    30202 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    30202 non-null  float64\n 49  fixed_2019_mean_num_tests_mean_scaled     30202 non-null  float64\n 50  fixed_2019_mean_num_devices_mean_scaled   30202 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   30202 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   30202 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   30202 non-null  float64\n 54  mobile_2019_mean_num_tests_mean_scaled    30202 non-null  float64\n 55  mobile_2019_mean_num_devices_mean_scaled  30202 non-null  float64\n 56  avg_rad_min_scaled                        30202 non-null  float64\n 57  avg_rad_max_scaled                        30202 non-null  float64\n 58  avg_rad_mean_scaled                       30202 non-null  float64\n 59  avg_rad_std_scaled                        30202 non-null  float64\n 60  avg_rad_median_scaled                     30202 non-null  float64\ndtypes: float64(61)\nmemory usage: 15.3 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nrollout_aoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 30202 entries, 0 to 30201\nData columns (total 10 columns):\n #   Column                                Non-Null Count  Dtype   \n---  ------                                --------------  -----   \n 0   quadkey                               30202 non-null  object  \n 1   shapeName                             30202 non-null  object  \n 2   shapeISO                              30202 non-null  object  \n 3   shapeID                               30202 non-null  object  \n 4   shapeGroup                            30202 non-null  object  \n 5   shapeType                             30202 non-null  object  \n 6   pop_count                             30202 non-null  float64 \n 7   geometry                              30202 non-null  geometry\n 8   Predicted Relative Wealth Index       30202 non-null  float64 \n 9   Predicted Wealth Category (quintile)  30202 non-null  object  \ndtypes: float64(2), geometry(1), object(7)\nmemory usage: 2.3+ MB\n\n\n\nrollout_aoi.head(2)\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n    \n  \n  \n    \n      0\n      13223202222021\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      1948.905696\n      POLYGON ((101.27197 2.92110, 101.27197 2.94304...\n      0.366662\n      B\n    \n    \n      1\n      13223202222023\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      5633.984424\n      POLYGON ((101.27197 2.89915, 101.27197 2.92110...\n      0.412123\n      A"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#save-output",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#save-output",
    "title": "Predict on rollout grids",
    "section": "Save output",
    "text": "Save output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 9.16 s, sys: 140 ms, total: 9.3 s\nWall time: 9.31 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(raw_features).join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/3_my_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"my\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#generate-grids",
    "title": "Predict on rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-03-09 21:41:01.871 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/malaysia_14_ADM2_populated_admin_grids.geojson\n2023-03-09 21:41:01.872 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region malaysia and admin level ADM2\n2023-03-09 21:41:01.872 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region malaysia and admin level ADM2\n2023-03-09 21:41:02.708 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region malaysia and admin level ADM2 at quadkey level 14\n\n\n2023-03-09 21:42:01.196 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 58058 grids for region malaysia and admin level ADM2 at quadkey level 14\n2023-03-09 21:42:01.232 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-03-09 21:42:17.729 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting malaysia population data for filtering grids\n2023-03-09 21:42:18.839 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-03-09 21:42:18.840 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 58058 grids for file size 17418701324\n2023-03-09 22:02:34.393 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-03-09 22:02:34.409 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 30202\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#explore-populated-grids",
    "title": "Predict on rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 30202 entries, 11 to 58050\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    30202 non-null  geometry\n 1   quadkey     30202 non-null  object  \n 2   shapeName   30202 non-null  object  \n 3   shapeISO    30202 non-null  object  \n 4   shapeID     30202 non-null  object  \n 5   shapeGroup  30202 non-null  object  \n 6   shapeType   30202 non-null  object  \n 7   pop_count   30202 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 2.1+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      11\n      POLYGON ((101.27197 2.92110, 101.27197 2.94304...\n      13223202222021\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      1948.905696\n    \n    \n      12\n      POLYGON ((101.27197 2.89915, 101.27197 2.92110...\n      13223202222023\n      Klang\n      None\n      MYS-ADM2-3_0_0-B57\n      MYS\n      ADM2\n      5633.984424\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-cross-country-rollouts/my/2_my_generate_grids.html#save-to-file",
    "title": "Predict on rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-17 14:57:14.356 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-17 14:57:14.357 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"th\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2019\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-th-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"../{rollout_date}-cross-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_th_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\naoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 78254 entries, 0 to 78253\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   quadkey     78254 non-null  object  \n 1   shapeName   78254 non-null  object  \n 2   shapeISO    78254 non-null  object  \n 3   shapeID     78254 non-null  object  \n 4   shapeGroup  78254 non-null  object  \n 5   shapeType   78254 non-null  object  \n 6   pop_count   78254 non-null  float64 \n 7   geometry    78254 non-null  geometry\ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 4.8+ MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scaled_only=False,\n    sklearn_scaler=scaler,\n    features_only=True,\n    use_aoi_quadkey=True,\n)\n\n2023-04-17 14:57:24.672 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for thailand at /home/alron/.geowrangler/osm/thailand? True\n2023-04-17 14:57:24.673 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for thailand being loaded from /home/alron/.geowrangler/osm/thailand/gis_osm_pois_free_1.shp\n2023-04-17 14:57:44.037 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for thailand at /home/alron/.geowrangler/osm/thailand? True\n2023-04-17 14:57:44.038 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for thailand being loaded from /home/alron/.geowrangler/osm/thailand/gis_osm_roads_free_1.shp\n2023-04-17 15:02:17.256 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-17 15:02:17.356 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/91ac47594d88c4215f6abb62a7caad8e.csv? False\n2023-04-17 15:02:17.358 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-17 15:02:18.732 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for fixed and 2019: 4\n2023-04-17 15:02:18.735 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for fixed and 2019 at /home/alron/.geowrangler/ookla/fixed/2019? True\n2023-04-17 15:02:18.736 | DEBUG    | povertymapping.ookla:load_type_year_data:123 - use_quadkey = True. Using columns in quadkey to pull intersecting Ookla data.\n2023-04-17 15:02:18.784 | DEBUG    | povertymapping.ookla:load_type_year_data:140 - Quadkeys in quadkey are at zoom level 14.\n2023-04-17 15:02:18.788 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 1 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-01-01_performance_fixed_tiles.parquet\n2023-04-17 15:02:34.584 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 2 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-04-01_performance_fixed_tiles.parquet\n2023-04-17 15:02:47.877 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 3 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-07-01_performance_fixed_tiles.parquet\n2023-04-17 15:03:03.392 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 4 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-10-01_performance_fixed_tiles.parquet\n2023-04-17 15:03:19.769 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for fixed and 2019 into one dataframe\n2023-04-17 15:03:47.187 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['91ac47594d88c4215f6abb62a7caad8e']\n2023-04-17 15:03:47.188 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/2324e2d1c890c01ddebf415548c97046.csv? False\n2023-04-17 15:03:47.189 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-17 15:03:47.190 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for mobile and 2019: 4\n2023-04-17 15:03:47.192 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for mobile and 2019 at /home/alron/.geowrangler/ookla/mobile/2019? True\n2023-04-17 15:03:47.193 | DEBUG    | povertymapping.ookla:load_type_year_data:123 - use_quadkey = True. Using columns in quadkey to pull intersecting Ookla data.\n2023-04-17 15:03:47.226 | DEBUG    | povertymapping.ookla:load_type_year_data:140 - Quadkeys in quadkey are at zoom level 14.\n2023-04-17 15:03:47.227 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 1 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-01-01_performance_mobile_tiles.parquet\n2023-04-17 15:03:53.770 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 2 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-04-01_performance_mobile_tiles.parquet\n2023-04-17 15:04:00.524 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 3 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-07-01_performance_mobile_tiles.parquet\n2023-04-17 15:04:08.605 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 4 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-10-01_performance_mobile_tiles.parquet\n2023-04-17 15:04:16.977 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for mobile and 2019 into one dataframe\n2023-04-17 15:04:39.497 | INFO     | povertymapping.nightlights:generate_clipped_raster:376 - Using viirs global file as source raster: /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2019_global_vcmslcfg_c202205302300.average.dat.tif\n2023-04-17 15:04:39.500 | INFO     | povertymapping.nightlights:clip_raster:248 - Generating clipped raster file from /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2019_global_vcmslcfg_c202205302300.average.dat.tif to /home/alron/.geowrangler/nightlights/clip/9a869ad6d259ea7145ba9d446d2e74fd.tif with bounds [ 97.36083982   5.63785259 105.64453122  20.46818922] and buffer 0.1\n2023-04-17 15:04:43.207 | INFO     | povertymapping.nightlights:generate_clipped_metadata:421 - Adding metadata.json file /home/alron/.geowrangler/nightlights/clip/9a869ad6d259ea7145ba9d446d2e74fd.metadata.json\n\n\nCPU times: user 9min 50s, sys: 56.4 s, total: 10min 46s\nWall time: 12min 37s\n\n\n\n# Save raw features, can be used for validation\nraw_features = features[[col for col in features.columns if \"_scaled\" not in col]]\n# Then keep only scaled columns\nfeatures = features[[col for col in features.columns if \"_scaled\" in col]]"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 78254 entries, 0 to 78253\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          78254 non-null  float64\n 1   atm_count_scaled                          78254 non-null  float64\n 2   atm_nearest_scaled                        78254 non-null  float64\n 3   bank_count_scaled                         78254 non-null  float64\n 4   bank_nearest_scaled                       78254 non-null  float64\n 5   bus_station_count_scaled                  78254 non-null  float64\n 6   bus_station_nearest_scaled                78254 non-null  float64\n 7   cafe_count_scaled                         78254 non-null  float64\n 8   cafe_nearest_scaled                       78254 non-null  float64\n 9   charging_station_count_scaled             78254 non-null  float64\n 10  charging_station_nearest_scaled           78254 non-null  float64\n 11  courthouse_count_scaled                   78254 non-null  float64\n 12  courthouse_nearest_scaled                 78254 non-null  float64\n 13  dentist_count_scaled                      78254 non-null  float64\n 14  dentist_nearest_scaled                    78254 non-null  float64\n 15  fast_food_count_scaled                    78254 non-null  float64\n 16  fast_food_nearest_scaled                  78254 non-null  float64\n 17  fire_station_count_scaled                 78254 non-null  float64\n 18  fire_station_nearest_scaled               78254 non-null  float64\n 19  food_court_count_scaled                   78254 non-null  float64\n 20  food_court_nearest_scaled                 78254 non-null  float64\n 21  fuel_count_scaled                         78254 non-null  float64\n 22  fuel_nearest_scaled                       78254 non-null  float64\n 23  hospital_count_scaled                     78254 non-null  float64\n 24  hospital_nearest_scaled                   78254 non-null  float64\n 25  library_count_scaled                      78254 non-null  float64\n 26  library_nearest_scaled                    78254 non-null  float64\n 27  marketplace_count_scaled                  78254 non-null  float64\n 28  marketplace_nearest_scaled                78254 non-null  float64\n 29  pharmacy_count_scaled                     78254 non-null  float64\n 30  pharmacy_nearest_scaled                   78254 non-null  float64\n 31  police_count_scaled                       78254 non-null  float64\n 32  police_nearest_scaled                     78254 non-null  float64\n 33  post_box_count_scaled                     78254 non-null  float64\n 34  post_box_nearest_scaled                   78254 non-null  float64\n 35  post_office_count_scaled                  78254 non-null  float64\n 36  post_office_nearest_scaled                78254 non-null  float64\n 37  restaurant_count_scaled                   78254 non-null  float64\n 38  restaurant_nearest_scaled                 78254 non-null  float64\n 39  social_facility_count_scaled              78254 non-null  float64\n 40  social_facility_nearest_scaled            78254 non-null  float64\n 41  supermarket_count_scaled                  78254 non-null  float64\n 42  supermarket_nearest_scaled                78254 non-null  float64\n 43  townhall_count_scaled                     78254 non-null  float64\n 44  townhall_nearest_scaled                   78254 non-null  float64\n 45  road_count_scaled                         78254 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    78254 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    78254 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    78254 non-null  float64\n 49  fixed_2019_mean_num_tests_mean_scaled     78254 non-null  float64\n 50  fixed_2019_mean_num_devices_mean_scaled   78254 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   78254 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   78254 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   78254 non-null  float64\n 54  mobile_2019_mean_num_tests_mean_scaled    78254 non-null  float64\n 55  mobile_2019_mean_num_devices_mean_scaled  78254 non-null  float64\n 56  avg_rad_min_scaled                        78254 non-null  float64\n 57  avg_rad_max_scaled                        78254 non-null  float64\n 58  avg_rad_mean_scaled                       78254 non-null  float64\n 59  avg_rad_std_scaled                        78254 non-null  float64\n 60  avg_rad_median_scaled                     78254 non-null  float64\ndtypes: float64(61)\nmemory usage: 39.0 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nrollout_aoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 78254 entries, 0 to 78253\nData columns (total 10 columns):\n #   Column                                Non-Null Count  Dtype   \n---  ------                                --------------  -----   \n 0   quadkey                               78254 non-null  object  \n 1   shapeName                             78254 non-null  object  \n 2   shapeISO                              78254 non-null  object  \n 3   shapeID                               78254 non-null  object  \n 4   shapeGroup                            78254 non-null  object  \n 5   shapeType                             78254 non-null  object  \n 6   pop_count                             78254 non-null  float64 \n 7   geometry                              78254 non-null  geometry\n 8   Predicted Relative Wealth Index       78254 non-null  float64 \n 9   Predicted Wealth Category (quintile)  78254 non-null  object  \ndtypes: float64(2), geometry(1), object(7)\nmemory usage: 6.0+ MB\n\n\n\nrollout_aoi.head(2)\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n    \n  \n  \n    \n      0\n      13222121311300\n      Mueang Phuket\n      None\n      THA-ADM2-3_0_0-B565\n      THA\n      ADM2\n      755.127425\n      POLYGON ((98.34961 7.60211, 98.34961 7.62389, ...\n      0.386850\n      B\n    \n    \n      1\n      13222121311301\n      Mueang Phuket\n      None\n      THA-ADM2-3_0_0-B565\n      THA\n      ADM2\n      449.253025\n      POLYGON ((98.37158 7.60211, 98.37158 7.62389, ...\n      0.386002\n      B"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#save-output",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#save-output",
    "title": "Predict on rollout grids",
    "section": "Save output",
    "text": "Save output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 22.5 s, sys: 488 ms, total: 23 s\nWall time: 23.6 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(raw_features).join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/3_th_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"th\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-03-09 18:01:04.437 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/thailand_14_ADM2_populated_admin_grids.geojson\n2023-03-09 18:01:04.440 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region thailand and admin level ADM2\n2023-03-09 18:01:08.440 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region thailand and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n2023-03-09 18:02:20.157 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 96111 grids for region thailand and admin level ADM2 at quadkey level 14\n2023-03-09 18:02:20.176 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-03-09 18:02:37.709 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting thailand population data for filtering grids\n2023-03-09 18:02:38.985 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-03-09 18:02:38.986 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 96111 grids for file size 14930842124\n2023-03-09 18:24:51.892 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-03-09 18:24:52.009 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 78254\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 78254 entries, 4 to 96110\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    78254 non-null  geometry\n 1   quadkey     78254 non-null  object  \n 2   shapeName   78254 non-null  object  \n 3   shapeISO    78254 non-null  object  \n 4   shapeID     78254 non-null  object  \n 5   shapeGroup  78254 non-null  object  \n 6   shapeType   78254 non-null  object  \n 7   pop_count   78254 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 5.4+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      4\n      POLYGON ((98.34961 7.60211, 98.34961 7.62389, ...\n      13222121311300\n      Mueang Phuket\n      None\n      THA-ADM2-3_0_0-B565\n      THA\n      ADM2\n      755.127425\n    \n    \n      6\n      POLYGON ((98.37158 7.60211, 98.37158 7.62389, ...\n      13222121311301\n      Mueang Phuket\n      None\n      THA-ADM2-3_0_0-B565\n      THA\n      ADM2\n      449.253025\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-cross-country-rollouts/th/2_th_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/1_cross_country_model_train_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/1_cross_country_model_train_model.html",
    "title": "Train model",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../\")\n\nimport json\nimport pickle\n\nimport fasttreeshap\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import GroupKFold\n\n%reload_ext autoreload\n%autoreload 2\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/1_cross_country_model_train_model.html#save-model",
    "href": "notebooks/2023-02-21-cross-country-rollouts/1_cross_country_model_train_model.html#save-model",
    "title": "Train model",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = f\"./{ROLLOUT_DATE}-cross-country-model.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-17 15:58:18.815 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-17 15:58:18.818 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"vn\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2021\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-vn-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"../{rollout_date}-cross-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_vn_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\n# aoi.explore() # Uncomment to view data in a map"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scaled_only=False,\n    sklearn_scaler=scaler,\n    features_only=True,\n    use_aoi_quadkey=True,\n)\n\n2023-04-17 15:58:25.434 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for vietnam at /home/alron/.geowrangler/osm/vietnam? False\n2023-04-17 15:58:25.435 | INFO     | povertymapping.osm:download_osm_country_data:204 - OSM Data: Re-initializing OSM country cache dir at /home/alron/.geowrangler/osm/vietnam...\n2023-04-17 15:58:25.436 | INFO     | povertymapping.osm:download_osm_country_data:213 - OSM Data: Downloading Geofabrik zip file...\n2023-04-17 15:58:25.435 | INFO     | povertymapping.osm:download_osm_country_data:204 - OSM Data: Re-initializing OSM country cache dir at /home/alron/.geowrangler/osm/vietnam...\n2023-04-17 15:58:25.436 | INFO     | povertymapping.osm:download_osm_country_data:213 - OSM Data: Downloading Geofabrik zip file...\n\n\n2023-04-17 16:00:18.898 | INFO     | povertymapping.osm:download_osm_country_data:232 - OSM Data: Unzipping the zip file...\n2023-04-17 16:00:27.169 | INFO     | povertymapping.osm:download_osm_country_data:239 - OSM Data: Successfully downloaded and cached OSM data for vietnam at /home/alron/.geowrangler/osm/vietnam!\n2023-04-17 16:00:27.171 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for vietnam being loaded from /home/alron/.geowrangler/osm/vietnam/gis_osm_pois_free_1.shp\n2023-04-17 16:00:41.992 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for vietnam at /home/alron/.geowrangler/osm/vietnam? True\n2023-04-17 16:00:41.992 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for vietnam being loaded from /home/alron/.geowrangler/osm/vietnam/gis_osm_roads_free_1.shp\n2023-04-17 16:03:17.875 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-17 16:03:17.878 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/5591b477264360fb7097153cd3331b3d.csv? False\n2023-04-17 16:03:17.879 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-17 16:03:18.951 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for fixed and 2019: 4\n2023-04-17 16:03:18.953 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for fixed and 2019 at /home/alron/.geowrangler/ookla/fixed/2019? True\n2023-04-17 16:03:18.954 | DEBUG    | povertymapping.ookla:load_type_year_data:123 - use_quadkey = True. Using columns in quadkey to pull intersecting Ookla data.\n2023-04-17 16:03:18.997 | DEBUG    | povertymapping.ookla:load_type_year_data:140 - Quadkeys in quadkey are at zoom level 14.\n2023-04-17 16:03:18.999 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 1 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-01-01_performance_fixed_tiles.parquet\n2023-04-17 16:03:27.944 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 2 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-04-01_performance_fixed_tiles.parquet\n2023-04-17 16:03:36.147 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 3 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-07-01_performance_fixed_tiles.parquet\n2023-04-17 16:03:46.124 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 4 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-10-01_performance_fixed_tiles.parquet\n2023-04-17 16:03:56.314 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for fixed and 2019 into one dataframe\n2023-04-17 16:04:08.646 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['5591b477264360fb7097153cd3331b3d']\n2023-04-17 16:04:08.647 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/67c59b59baa5708f4a8f1f2c1f5a99b9.csv? False\n2023-04-17 16:04:08.648 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-17 16:04:08.649 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for mobile and 2019: 4\n2023-04-17 16:04:08.650 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for mobile and 2019 at /home/alron/.geowrangler/ookla/mobile/2019? True\n2023-04-17 16:04:08.651 | DEBUG    | povertymapping.ookla:load_type_year_data:123 - use_quadkey = True. Using columns in quadkey to pull intersecting Ookla data.\n2023-04-17 16:04:08.672 | DEBUG    | povertymapping.ookla:load_type_year_data:140 - Quadkeys in quadkey are at zoom level 14.\n2023-04-17 16:04:08.674 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 1 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-01-01_performance_mobile_tiles.parquet\n2023-04-17 16:04:13.794 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 2 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-04-01_performance_mobile_tiles.parquet\n2023-04-17 16:04:18.913 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 3 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-07-01_performance_mobile_tiles.parquet\n2023-04-17 16:04:25.035 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 4 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-10-01_performance_mobile_tiles.parquet\n2023-04-17 16:04:30.576 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for mobile and 2019 into one dataframe\n2023-04-17 16:04:38.461 | INFO     | povertymapping.nightlights:generate_clipped_raster:376 - Using viirs global file as source raster: /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2021_global_vcmslcfg_c202205302300.average.dat.tif\n2023-04-17 16:04:38.462 | INFO     | povertymapping.nightlights:download_url:161 - Using access token from environment var EOG_ACCESS_TOKEN\n\n\n2023-04-17 16:19:58.887 | INFO     | povertymapping.nightlights:unzip_eog_gzip:224 - Unzipping /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2021_global_vcmslcfg_c202205302300.average.dat.tif.gz into /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2021_global_vcmslcfg_c202205302300.average.dat.tif\n2023-04-17 16:21:23.534 | INFO     | povertymapping.nightlights:unzip_eog_gzip:235 - Deleting /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2021_global_vcmslcfg_c202205302300.average.dat.tif.gz\n2023-04-17 16:21:23.924 | INFO     | povertymapping.nightlights:clip_raster:248 - Generating clipped raster file from /home/alron/.geowrangler/nightlights/global/VNL_v21_npp_2021_global_vcmslcfg_c202205302300.average.dat.tif to /home/alron/.geowrangler/nightlights/clip/d4fabb4208ec7ad172935fe0cff0922d.tif with bounds [102.15087888   8.5592939  109.46777341  23.38259828] and buffer 0.1\n2023-04-17 16:21:26.743 | INFO     | povertymapping.nightlights:generate_clipped_metadata:421 - Adding metadata.json file /home/alron/.geowrangler/nightlights/clip/d4fabb4208ec7ad172935fe0cff0922d.metadata.json\n\n\nCPU times: user 7min 40s, sys: 57 s, total: 8min 37s\nWall time: 25min 18s\n\n\n\n# Save raw features, can be used for validation\nraw_features = features[[col for col in features.columns if \"_scaled\" not in col]]\n# Then keep only scaled columns\nfeatures = features[[col for col in features.columns if \"_scaled\" in col]]"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 50880 entries, 0 to 50879\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          50880 non-null  float64\n 1   atm_count_scaled                          50880 non-null  float64\n 2   atm_nearest_scaled                        50880 non-null  float64\n 3   bank_count_scaled                         50880 non-null  float64\n 4   bank_nearest_scaled                       50880 non-null  float64\n 5   bus_station_count_scaled                  50880 non-null  float64\n 6   bus_station_nearest_scaled                50880 non-null  float64\n 7   cafe_count_scaled                         50880 non-null  float64\n 8   cafe_nearest_scaled                       50880 non-null  float64\n 9   charging_station_count_scaled             50880 non-null  float64\n 10  charging_station_nearest_scaled           50880 non-null  float64\n 11  courthouse_count_scaled                   50880 non-null  float64\n 12  courthouse_nearest_scaled                 50880 non-null  float64\n 13  dentist_count_scaled                      50880 non-null  float64\n 14  dentist_nearest_scaled                    50880 non-null  float64\n 15  fast_food_count_scaled                    50880 non-null  float64\n 16  fast_food_nearest_scaled                  50880 non-null  float64\n 17  fire_station_count_scaled                 50880 non-null  float64\n 18  fire_station_nearest_scaled               50880 non-null  float64\n 19  food_court_count_scaled                   50880 non-null  float64\n 20  food_court_nearest_scaled                 50880 non-null  float64\n 21  fuel_count_scaled                         50880 non-null  float64\n 22  fuel_nearest_scaled                       50880 non-null  float64\n 23  hospital_count_scaled                     50880 non-null  float64\n 24  hospital_nearest_scaled                   50880 non-null  float64\n 25  library_count_scaled                      50880 non-null  float64\n 26  library_nearest_scaled                    50880 non-null  float64\n 27  marketplace_count_scaled                  50880 non-null  float64\n 28  marketplace_nearest_scaled                50880 non-null  float64\n 29  pharmacy_count_scaled                     50880 non-null  float64\n 30  pharmacy_nearest_scaled                   50880 non-null  float64\n 31  police_count_scaled                       50880 non-null  float64\n 32  police_nearest_scaled                     50880 non-null  float64\n 33  post_box_count_scaled                     50880 non-null  float64\n 34  post_box_nearest_scaled                   50880 non-null  float64\n 35  post_office_count_scaled                  50880 non-null  float64\n 36  post_office_nearest_scaled                50880 non-null  float64\n 37  restaurant_count_scaled                   50880 non-null  float64\n 38  restaurant_nearest_scaled                 50880 non-null  float64\n 39  social_facility_count_scaled              50880 non-null  float64\n 40  social_facility_nearest_scaled            50880 non-null  float64\n 41  supermarket_count_scaled                  50880 non-null  float64\n 42  supermarket_nearest_scaled                50880 non-null  float64\n 43  townhall_count_scaled                     50880 non-null  float64\n 44  townhall_nearest_scaled                   50880 non-null  float64\n 45  road_count_scaled                         50880 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    50880 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    50880 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    50880 non-null  float64\n 49  fixed_2019_mean_num_tests_mean_scaled     50880 non-null  float64\n 50  fixed_2019_mean_num_devices_mean_scaled   50880 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   50880 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   50880 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   50880 non-null  float64\n 54  mobile_2019_mean_num_tests_mean_scaled    50880 non-null  float64\n 55  mobile_2019_mean_num_devices_mean_scaled  50880 non-null  float64\n 56  avg_rad_min_scaled                        50880 non-null  float64\n 57  avg_rad_max_scaled                        50880 non-null  float64\n 58  avg_rad_mean_scaled                       50880 non-null  float64\n 59  avg_rad_std_scaled                        50880 non-null  float64\n 60  avg_rad_median_scaled                     50880 non-null  float64\ndtypes: float64(61)\nmemory usage: 26.1 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nrollout_aoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 50880 entries, 0 to 50879\nData columns (total 10 columns):\n #   Column                                Non-Null Count  Dtype   \n---  ------                                --------------  -----   \n 0   quadkey                               50880 non-null  object  \n 1   shapeName                             50880 non-null  object  \n 2   shapeISO                              50880 non-null  object  \n 3   shapeID                               50880 non-null  object  \n 4   shapeGroup                            50880 non-null  object  \n 5   shapeType                             50880 non-null  object  \n 6   pop_count                             50880 non-null  float64 \n 7   geometry                              50880 non-null  geometry\n 8   Predicted Relative Wealth Index       50880 non-null  float64 \n 9   Predicted Wealth Category (quintile)  50880 non-null  object  \ndtypes: float64(2), geometry(1), object(7)\nmemory usage: 3.9+ MB\n\n\n\nrollout_aoi.head(2)\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n    \n  \n  \n    \n      0\n      13223003120321\n      Phu Quoc\n      None\n      VNM-ADM2-3_0_0-B967\n      VNM\n      ADM2\n      500.753008\n      POLYGON ((103.46924 9.29731, 103.46924 9.31899...\n      0.375743\n      B\n    \n    \n      1\n      13223003120320\n      Phu Quoc\n      None\n      VNM-ADM2-3_0_0-B967\n      VNM\n      ADM2\n      6.106744\n      POLYGON ((103.44727 9.29731, 103.44727 9.31899...\n      0.283086\n      D"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#save-output",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#save-output",
    "title": "Predict on rollout grids",
    "section": "Save output",
    "text": "Save output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 10.8 s, sys: 257 ms, total: 11.1 s\nWall time: 11.2 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(raw_features).join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/3_vn_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"vn\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION,\n    admin_lvl=ADMIN_LVL,\n    quadkey_lvl=ZOOM_LEVEL,\n    use_cache=True,\n    n_workers=4,\n    max_batch_size=1000,\n)\n\n2023-04-17 18:07:35.408 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/alron/.cache/geowrangler/quadkey_grids/vietnam_14_ADM2_populated_admin_grids.geojson\n2023-04-17 18:07:35.421 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region vietnam and admin level ADM2\n2023-04-17 18:07:35.956 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region vietnam and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n\n\n\n2023-04-17 18:08:26.716 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 64782 grids for region vietnam and admin level ADM2 at quadkey level 14\n2023-04-17 18:08:26.723 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-04-17 18:08:31.630 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting vietnam population data for filtering grids\n2023-04-17 18:08:32.883 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-04-17 18:08:32.884 | INFO     | povertymapping.rollout_grids:compute_raster_stats:108 - Batching call to create raster_zonal stats for 64782 grids for file size 13271.962124 Mb\n2023-04-17 18:08:33.000 | INFO     | povertymapping.rollout_grids:compute_raster_stats:119 - Created 64 for 64 splits of 1000\n2023-04-17 18:08:33.001 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 0 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n/home/alron/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/rasterio/features.py:362: NotGeoreferencedWarning: Dataset has no geotransform, gcps, or rpcs. The identity matrix will be returned.\n  _rasterize(valid_shapes, out, transform, all_touched, merge_alg)\n2023-04-17 18:08:41.351 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:08:41.353 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:08:41.355 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 1 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:08:49.855 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:08:49.858 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:08:49.859 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 2 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:08:57.994 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:08:57.997 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:08:57.999 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 3 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:06.275 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:06.279 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:06.281 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 4 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:14.411 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:14.413 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:14.415 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 5 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:22.479 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:22.482 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:22.484 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 6 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:30.553 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:30.557 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:30.558 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 7 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:39.018 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:39.021 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:39.023 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 8 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:47.367 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:47.370 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:47.372 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 9 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:09:55.978 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:09:55.982 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:09:55.983 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 10 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:04.515 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:04.518 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:04.520 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 11 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:13.884 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:13.891 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:13.892 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 12 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:23.237 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:23.260 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:23.261 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 13 with index (0/1012 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:32.218 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:32.234 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:32.236 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 14 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:40.979 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:40.982 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:40.983 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 15 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:10:50.852 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:10:50.855 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:10:50.856 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 16 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:01.266 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:01.269 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:01.270 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 17 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:10.850 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:10.862 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:10.863 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 18 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:20.934 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:20.945 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:20.947 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 19 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:31.512 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:31.515 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:31.517 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 20 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:47.768 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:47.785 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:47.786 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 21 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:11:59.898 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:11:59.912 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:11:59.913 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 22 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:12:13.258 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:12:13.276 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:12:13.277 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 23 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:12:30.714 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:12:30.729 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:12:30.730 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 24 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:12:49.527 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:12:49.533 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:12:49.535 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 25 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:13:09.819 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:13:09.834 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:13:09.835 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 26 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:13:34.034 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:13:34.050 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:13:34.052 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 27 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:14:01.120 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:14:01.132 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:14:01.134 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 28 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:15:54.425 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:15:54.450 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:15:54.452 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 29 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:17:13.779 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:17:13.785 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:17:13.787 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 30 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:08.960 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:08.965 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:08.967 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 31 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:23.363 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:23.366 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:23.367 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 32 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:33.718 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:33.721 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:33.722 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 33 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:42.450 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:42.452 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:42.454 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 34 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:50.678 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:50.681 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:50.683 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 35 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:18:59.055 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:18:59.058 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:18:59.059 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 36 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:07.339 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:07.344 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:07.345 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 37 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:15.773 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:15.775 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:15.777 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 38 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:23.853 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:23.856 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:23.857 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 39 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:31.950 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:31.953 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:31.954 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 40 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:40.082 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:40.084 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:40.086 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 41 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:48.225 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:48.227 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:48.229 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 42 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:19:56.776 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:19:56.779 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:19:56.780 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 43 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:05.695 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:05.697 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:05.699 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 44 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:14.460 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:14.462 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:14.464 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 45 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:23.497 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:23.511 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:23.513 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 46 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:31.731 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:31.733 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:31.734 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 47 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:39.885 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:39.888 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:39.889 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 48 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:47.888 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:47.891 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:47.892 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 49 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:20:56.146 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:20:56.148 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:20:56.150 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 50 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:04.089 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:04.091 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:04.093 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 51 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:12.336 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:12.339 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:12.340 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 52 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:20.426 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:20.429 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:20.430 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 53 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:28.468 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:28.471 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:28.473 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 54 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:36.649 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:36.651 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:36.653 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 55 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:44.808 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:44.811 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:44.813 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 56 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:21:53.091 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:21:53.094 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:21:53.095 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 57 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:01.314 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:01.317 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:01.319 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 58 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:09.467 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:09.469 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:09.471 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 59 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:17.614 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:17.617 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:17.618 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 60 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:25.675 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:25.678 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:25.680 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 61 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:33.866 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:33.869 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:33.870 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 62 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:40.917 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:40.920 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:40.921 | INFO     | povertymapping.rollout_grids:compute_raster_stats:132 - Creating raster zonal stats for batch 63 with index (0/1011 in 4 parallel threads\n\n\n\n\n\n\n\n\n\n2023-04-17 18:22:47.041 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:207 - Completed parallel raster zonal stats for 4 threads\n2023-04-17 18:22:47.047 | INFO     | povertymapping.rollout_grids:compute_parallel_raster_zonal_stats:209 - Concatenated parallel raster zonal stats for 4 threads\n2023-04-17 18:22:47.068 | INFO     | povertymapping.rollout_grids:compute_raster_stats:145 - Completed raster zonal stats for 64 batches\n2023-04-17 18:22:47.115 | INFO     | povertymapping.rollout_grids:compute_raster_stats:147 - Concatenated raster zonal stats for 64 batches\n2023-04-17 18:22:47.146 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-04-17 18:22:47.269 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 50880"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 50880 entries, 6 to 63293\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    50880 non-null  geometry\n 1   quadkey     50880 non-null  object  \n 2   shapeName   50880 non-null  object  \n 3   shapeISO    50880 non-null  object  \n 4   shapeID     50880 non-null  object  \n 5   shapeGroup  50880 non-null  object  \n 6   shapeType   50880 non-null  object  \n 7   pop_count   50880 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 3.5+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      6\n      POLYGON ((103.46924 9.29731, 103.46924 9.31899...\n      13223003120321\n      Phu Quoc\n      None\n      VNM-ADM2-3_0_0-B967\n      VNM\n      ADM2\n      500.753008\n    \n    \n      11\n      POLYGON ((103.44727 9.29731, 103.44727 9.31899...\n      13223003120320\n      Phu Quoc\n      None\n      VNM-ADM2-3_0_0-B967\n      VNM\n      ADM2\n      6.106744\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-cross-country-rollouts/vn/2_vn_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\nFor Indonesia, we need to process the OSM data per subregion, listed in country_subareas_osm\n\nCOUNTRY_CODE = \"id\"\nCOUNTRY_SUBAREAS_OSM = [\n    \"maluku\",\n    \"sulawesi\",\n    \"sumatra\",\n    \"java\",\n    \"kalimantan\",\n    \"nusa-tenggara\",\n    \"papua\",\n]\n\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2019\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-id-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"../{rollout_date}-cross-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_id_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\naoi.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 161230 entries, 0 to 161229\nData columns (total 9 columns):\n #   Column          Non-Null Count   Dtype   \n---  ------          --------------   -----   \n 0   quadkey         161230 non-null  object  \n 1   shapeName       161230 non-null  object  \n 2   shapeISO        161230 non-null  object  \n 3   shapeID         161230 non-null  object  \n 4   shapeGroup      161230 non-null  object  \n 5   shapeType       161230 non-null  object  \n 6   quadkey_level8  161230 non-null  object  \n 7   pop_count       161230 non-null  float64 \n 8   geometry        161230 non-null  geometry\ndtypes: float64(1), geometry(1), object(7)\nmemory usage: 11.1+ MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\nRetrieve base data\nUnlike the rollouts for the other countries, we need to generate the features in batches for Indonesia. We will first get the data per subarea, combine them, then scale them afterwards to get the final features set.\n\n%%time\nsubarea_data_list = []\nfor subarea_osm in COUNTRY_SUBAREAS_OSM:\n    subarea_extent = get_osm_extent(subarea_osm)\n    aoi_in_subarea = (\n        gpd.sjoin(aoi, subarea_extent, how=\"inner\", predicate=\"intersects\")\n        .drop(columns=[\"index_right\"])\n        .reset_index(drop=True)\n    )\n    logger.info(\n        f\"Processing aoi grids in osm_region: {subarea_osm} (n = {len(aoi_in_subarea)})\"\n    )\n\n    aoi_in_subarea = generate_features(\n        aoi_in_subarea,\n        subarea_osm,\n        ookla_year=OOKLA_YEAR,\n        nightlights_year=NIGHTLIGHTS_YEAR,\n        scale=False,\n        features_only=False,\n        use_aoi_quadkey=True,\n        aoi_quadkey_col=\"quadkey\",\n    )\n    subarea_data_list.append(aoi_in_subarea)\n\n# Combine all country data into a single dataframe\naoi_data = gpd.GeoDataFrame(\n    pd.concat(subarea_data_list, ignore_index=True), crs=subarea_data_list[0].crs\n)\n\n# There may be duplicates for rows that are in between two subareas.\n# For now we will just keep the first occurence\naoi_data = aoi_data.drop_duplicates(\"quadkey\")\n\n2023-03-27 13:59:24.581 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: maluku (n = 5382)\n2023-03-27 13:59:24.604 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for maluku at /home/jc_tm/.geowrangler/osm/maluku? True\n2023-03-27 13:59:24.605 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for maluku being loaded from /home/jc_tm/.geowrangler/osm/maluku/gis_osm_pois_free_1.shp\n2023-03-27 13:59:26.544 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for maluku at /home/jc_tm/.geowrangler/osm/maluku? True\n2023-03-27 13:59:26.545 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for maluku being loaded from /home/jc_tm/.geowrangler/osm/maluku/gis_osm_roads_free_1.shp\n2023-03-27 13:59:28.400 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 13:59:28.401 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/f27d4125b0af2f25de5887b97337dda8.csv? True\n2023-03-27 13:59:28.401 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: f27d4125b0af2f25de5887b97337dda8) found in filesystem. Loading in cache.\n2023-03-27 13:59:28.615 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['f27d4125b0af2f25de5887b97337dda8']\n2023-03-27 13:59:28.616 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/4c62be18f1160e4a59f99103821087e0.csv? True\n2023-03-27 13:59:28.617 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 4c62be18f1160e4a59f99103821087e0) found in filesystem. Loading in cache.\n2023-03-27 13:59:28.942 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/ed850f7ba44fd077cd10cd6e138b61e6.tif\n2023-03-27 13:59:44.766 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: sulawesi (n = 19539)\n2023-03-27 13:59:44.784 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for sulawesi at /home/jc_tm/.geowrangler/osm/sulawesi? True\n2023-03-27 13:59:44.785 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for sulawesi being loaded from /home/jc_tm/.geowrangler/osm/sulawesi/gis_osm_pois_free_1.shp\n2023-03-27 13:59:49.619 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for sulawesi at /home/jc_tm/.geowrangler/osm/sulawesi? True\n2023-03-27 13:59:49.620 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for sulawesi being loaded from /home/jc_tm/.geowrangler/osm/sulawesi/gis_osm_roads_free_1.shp\n2023-03-27 14:00:03.940 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:00:03.941 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/5622e1dd0f31372638f661bbaea40135.csv? True\n2023-03-27 14:00:03.941 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 5622e1dd0f31372638f661bbaea40135) found in filesystem. Loading in cache.\n2023-03-27 14:00:04.724 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['5622e1dd0f31372638f661bbaea40135']\n2023-03-27 14:00:04.725 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/d84ecb4698fdd8b7451981e2186f43fd.csv? True\n2023-03-27 14:00:04.726 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: d84ecb4698fdd8b7451981e2186f43fd) found in filesystem. Loading in cache.\n2023-03-27 14:00:06.252 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/6011900184199ef125c4b43eb293c9ce.tif\n2023-03-27 14:00:58.617 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: sumatra (n = 53233)\n2023-03-27 14:00:58.648 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for sumatra at /home/jc_tm/.geowrangler/osm/sumatra? True\n2023-03-27 14:00:58.650 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for sumatra being loaded from /home/jc_tm/.geowrangler/osm/sumatra/gis_osm_pois_free_1.shp\n2023-03-27 14:01:14.211 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for sumatra at /home/jc_tm/.geowrangler/osm/sumatra? True\n2023-03-27 14:01:14.212 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for sumatra being loaded from /home/jc_tm/.geowrangler/osm/sumatra/gis_osm_roads_free_1.shp\n2023-03-27 14:02:32.869 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:02:32.870 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/aa6272cfeac1d385e496cbf9801c587b.csv? True\n2023-03-27 14:02:32.871 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: aa6272cfeac1d385e496cbf9801c587b) found in filesystem. Loading in cache.\n2023-03-27 14:02:36.728 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['aa6272cfeac1d385e496cbf9801c587b']\n2023-03-27 14:02:36.730 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/6b857fb260ce23ac9d2ccce000c97236.csv? True\n2023-03-27 14:02:36.731 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 6b857fb260ce23ac9d2ccce000c97236) found in filesystem. Loading in cache.\n2023-03-27 14:02:42.486 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/462205ec17044884a7f2947f4a9c234d.tif\n2023-03-27 14:05:50.721 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: java (n = 22410)\n2023-03-27 14:05:50.729 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for java at /home/jc_tm/.geowrangler/osm/java? True\n2023-03-27 14:05:50.730 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for java being loaded from /home/jc_tm/.geowrangler/osm/java/gis_osm_pois_free_1.shp\n2023-03-27 14:05:59.508 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for java at /home/jc_tm/.geowrangler/osm/java? True\n2023-03-27 14:05:59.509 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for java being loaded from /home/jc_tm/.geowrangler/osm/java/gis_osm_roads_free_1.shp\n2023-03-27 14:09:44.680 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:09:44.745 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/ea8a6bb7251081d7365303983f947520.csv? True\n2023-03-27 14:09:44.746 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: ea8a6bb7251081d7365303983f947520) found in filesystem. Loading in cache.\n2023-03-27 14:09:55.710 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['ea8a6bb7251081d7365303983f947520']\n2023-03-27 14:09:55.713 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/f3c66a0775e1c5a4af8c43ac6dca90b5.csv? True\n2023-03-27 14:09:55.716 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: f3c66a0775e1c5a4af8c43ac6dca90b5) found in filesystem. Loading in cache.\n2023-03-27 14:10:06.291 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/3bccf87f95c849414e612bb8612a3133.tif\n2023-03-27 14:11:40.387 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: kalimantan (n = 38920)\n2023-03-27 14:11:40.404 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for kalimantan at /home/jc_tm/.geowrangler/osm/kalimantan? True\n2023-03-27 14:11:40.404 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for kalimantan being loaded from /home/jc_tm/.geowrangler/osm/kalimantan/gis_osm_pois_free_1.shp\n2023-03-27 14:11:52.585 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for kalimantan at /home/jc_tm/.geowrangler/osm/kalimantan? True\n2023-03-27 14:11:52.587 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for kalimantan being loaded from /home/jc_tm/.geowrangler/osm/kalimantan/gis_osm_roads_free_1.shp\n2023-03-27 14:12:23.971 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:12:23.972 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/29811a88971fa6c1a87fe17b2cffa8e9.csv? True\n2023-03-27 14:12:23.974 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 29811a88971fa6c1a87fe17b2cffa8e9) found in filesystem. Loading in cache.\n2023-03-27 14:12:25.523 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['29811a88971fa6c1a87fe17b2cffa8e9']\n2023-03-27 14:12:25.526 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/e9271eff2c0ac6181bd4de2879629cd9.csv? True\n2023-03-27 14:12:25.528 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: e9271eff2c0ac6181bd4de2879629cd9) found in filesystem. Loading in cache.\n2023-03-27 14:12:28.114 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/25512b5099d25dbebc72b632ac347d15.tif\n2023-03-27 14:14:39.138 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: nusa-tenggara (n = 10460)\n2023-03-27 14:14:39.144 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for nusa-tenggara at /home/jc_tm/.geowrangler/osm/nusa-tenggara? True\n2023-03-27 14:14:39.146 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for nusa-tenggara being loaded from /home/jc_tm/.geowrangler/osm/nusa-tenggara/gis_osm_pois_free_1.shp\n2023-03-27 14:14:46.071 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for nusa-tenggara at /home/jc_tm/.geowrangler/osm/nusa-tenggara? True\n2023-03-27 14:14:46.072 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for nusa-tenggara being loaded from /home/jc_tm/.geowrangler/osm/nusa-tenggara/gis_osm_roads_free_1.shp\n2023-03-27 14:15:03.166 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:15:03.167 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/c3496f562826bb68fc2387652c1abcd4.csv? True\n2023-03-27 14:15:03.168 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: c3496f562826bb68fc2387652c1abcd4) found in filesystem. Loading in cache.\n2023-03-27 14:15:03.842 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['c3496f562826bb68fc2387652c1abcd4']\n2023-03-27 14:15:03.843 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/e5ce887b5648fec776e45071c5c9de7d.csv? True\n2023-03-27 14:15:03.843 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: e5ce887b5648fec776e45071c5c9de7d) found in filesystem. Loading in cache.\n2023-03-27 14:15:04.930 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/d96c1f5ca075585b2b98d3a6133208f6.tif\n2023-03-27 14:15:38.716 | INFO     | __main__:<module>:10 - Processing aoi grids in osm_region: papua (n = 11295)\n2023-03-27 14:15:38.723 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for papua at /home/jc_tm/.geowrangler/osm/papua? True\n2023-03-27 14:15:38.724 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for papua being loaded from /home/jc_tm/.geowrangler/osm/papua/gis_osm_pois_free_1.shp\n2023-03-27 14:15:42.485 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for papua at /home/jc_tm/.geowrangler/osm/papua? True\n2023-03-27 14:15:42.486 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for papua being loaded from /home/jc_tm/.geowrangler/osm/papua/gis_osm_roads_free_1.shp\n2023-03-27 14:15:45.547 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-03-27 14:15:45.549 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/c324fe4c202355c02f43820ab90e7e8e.csv? True\n2023-03-27 14:15:45.550 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: c324fe4c202355c02f43820ab90e7e8e) found in filesystem. Loading in cache.\n2023-03-27 14:15:45.845 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['c324fe4c202355c02f43820ab90e7e8e']\n2023-03-27 14:15:45.846 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jc_tm/.geowrangler/ookla/processed/92b3ee712b9e11813b76cad2700fd9fe.csv? True\n2023-03-27 14:15:45.847 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 92b3ee712b9e11813b76cad2700fd9fe) found in filesystem. Loading in cache.\n2023-03-27 14:15:46.223 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/37b7ad633aa40929271999e019b70b8c.tif\n\n\nCPU times: user 14min 56s, sys: 1min 51s, total: 16min 48s\nWall time: 17min 15s\n\n\n\naoi_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 161230 entries, 0 to 161238\nData columns (total 71 columns):\n #   Column                             Non-Null Count   Dtype   \n---  ------                             --------------   -----   \n 0   quadkey                            161230 non-null  object  \n 1   shapeName                          161230 non-null  object  \n 2   shapeISO                           161230 non-null  object  \n 3   shapeID                            161230 non-null  object  \n 4   shapeGroup                         161230 non-null  object  \n 5   shapeType                          161230 non-null  object  \n 6   quadkey_level8                     161230 non-null  object  \n 7   pop_count                          161230 non-null  float64 \n 8   geometry                           161230 non-null  geometry\n 9   osm_region                         161230 non-null  object  \n 10  poi_count                          161230 non-null  float64 \n 11  atm_count                          161230 non-null  float64 \n 12  atm_nearest                        161230 non-null  float64 \n 13  bank_count                         161230 non-null  float64 \n 14  bank_nearest                       161230 non-null  float64 \n 15  bus_station_count                  161230 non-null  float64 \n 16  bus_station_nearest                161230 non-null  float64 \n 17  cafe_count                         161230 non-null  float64 \n 18  cafe_nearest                       161230 non-null  float64 \n 19  charging_station_count             161230 non-null  float64 \n 20  charging_station_nearest           161230 non-null  float64 \n 21  courthouse_count                   161230 non-null  float64 \n 22  courthouse_nearest                 161230 non-null  float64 \n 23  dentist_count                      161230 non-null  float64 \n 24  dentist_nearest                    161230 non-null  float64 \n 25  fast_food_count                    161230 non-null  float64 \n 26  fast_food_nearest                  161230 non-null  float64 \n 27  fire_station_count                 161230 non-null  float64 \n 28  fire_station_nearest               161230 non-null  float64 \n 29  food_court_count                   161230 non-null  float64 \n 30  food_court_nearest                 161230 non-null  float64 \n 31  fuel_count                         161230 non-null  float64 \n 32  fuel_nearest                       161230 non-null  float64 \n 33  hospital_count                     161230 non-null  float64 \n 34  hospital_nearest                   161230 non-null  float64 \n 35  library_count                      161230 non-null  float64 \n 36  library_nearest                    161230 non-null  float64 \n 37  marketplace_count                  161230 non-null  float64 \n 38  marketplace_nearest                161230 non-null  float64 \n 39  pharmacy_count                     161230 non-null  float64 \n 40  pharmacy_nearest                   161230 non-null  float64 \n 41  police_count                       161230 non-null  float64 \n 42  police_nearest                     161230 non-null  float64 \n 43  post_box_count                     161230 non-null  float64 \n 44  post_box_nearest                   161230 non-null  float64 \n 45  post_office_count                  161230 non-null  float64 \n 46  post_office_nearest                161230 non-null  float64 \n 47  restaurant_count                   161230 non-null  float64 \n 48  restaurant_nearest                 161230 non-null  float64 \n 49  social_facility_count              161230 non-null  float64 \n 50  social_facility_nearest            161230 non-null  float64 \n 51  supermarket_count                  161230 non-null  float64 \n 52  supermarket_nearest                161230 non-null  float64 \n 53  townhall_count                     161230 non-null  float64 \n 54  townhall_nearest                   161230 non-null  float64 \n 55  road_count                         161230 non-null  float64 \n 56  fixed_2019_mean_avg_d_kbps_mean    161230 non-null  float64 \n 57  fixed_2019_mean_avg_u_kbps_mean    161230 non-null  float64 \n 58  fixed_2019_mean_avg_lat_ms_mean    161230 non-null  float64 \n 59  fixed_2019_mean_num_tests_mean     161230 non-null  float64 \n 60  fixed_2019_mean_num_devices_mean   161230 non-null  float64 \n 61  mobile_2019_mean_avg_d_kbps_mean   161230 non-null  float64 \n 62  mobile_2019_mean_avg_u_kbps_mean   161230 non-null  float64 \n 63  mobile_2019_mean_avg_lat_ms_mean   161230 non-null  float64 \n 64  mobile_2019_mean_num_tests_mean    161230 non-null  float64 \n 65  mobile_2019_mean_num_devices_mean  161230 non-null  float64 \n 66  avg_rad_min                        161230 non-null  float64 \n 67  avg_rad_max                        161230 non-null  float64 \n 68  avg_rad_mean                       161230 non-null  float64 \n 69  avg_rad_std                        161230 non-null  float64 \n 70  avg_rad_median                     161230 non-null  float64 \ndtypes: float64(62), geometry(1), object(8)\nmemory usage: 88.6+ MB\n\n\n\n\nScale and clean features\n\n# Get list of raw features generated\nfeature_cols = [\n    x for x in aoi_data.columns if x not in list(aoi.columns) + [\"osm_region\"]\n]\n\n\n%%time\nscaler = MinMaxScaler()\nrollout_aoi = aoi_data[\n    [col for col in aoi_data.columns if col not in feature_cols]\n].copy()\nfeatures = aoi_data[feature_cols].copy()\n\nfor col in feature_cols:\n    max_val = features[[col]].max()\n    features[col + \"_scaled\"] = scaler.fit_transform(\n        features[[col]].clip(upper=max_val, axis=1)\n    )\n\nCPU times: user 3.4 s, sys: 0 ns, total: 3.4 s\nWall time: 3.4 s\n\n\n\n# Save raw features, can be used for validation\nraw_features = features[[col for col in features.columns if \"_scaled\" not in col]]\n# Then keep only scaled columns\nfeatures = features[[col for col in features.columns if \"_scaled\" in col]]"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 161230 entries, 0 to 161238\nData columns (total 61 columns):\n #   Column                                    Non-Null Count   Dtype  \n---  ------                                    --------------   -----  \n 0   poi_count_scaled                          161230 non-null  float64\n 1   atm_count_scaled                          161230 non-null  float64\n 2   atm_nearest_scaled                        161230 non-null  float64\n 3   bank_count_scaled                         161230 non-null  float64\n 4   bank_nearest_scaled                       161230 non-null  float64\n 5   bus_station_count_scaled                  161230 non-null  float64\n 6   bus_station_nearest_scaled                161230 non-null  float64\n 7   cafe_count_scaled                         161230 non-null  float64\n 8   cafe_nearest_scaled                       161230 non-null  float64\n 9   charging_station_count_scaled             161230 non-null  float64\n 10  charging_station_nearest_scaled           161230 non-null  float64\n 11  courthouse_count_scaled                   161230 non-null  float64\n 12  courthouse_nearest_scaled                 161230 non-null  float64\n 13  dentist_count_scaled                      161230 non-null  float64\n 14  dentist_nearest_scaled                    161230 non-null  float64\n 15  fast_food_count_scaled                    161230 non-null  float64\n 16  fast_food_nearest_scaled                  161230 non-null  float64\n 17  fire_station_count_scaled                 161230 non-null  float64\n 18  fire_station_nearest_scaled               161230 non-null  float64\n 19  food_court_count_scaled                   161230 non-null  float64\n 20  food_court_nearest_scaled                 161230 non-null  float64\n 21  fuel_count_scaled                         161230 non-null  float64\n 22  fuel_nearest_scaled                       161230 non-null  float64\n 23  hospital_count_scaled                     161230 non-null  float64\n 24  hospital_nearest_scaled                   161230 non-null  float64\n 25  library_count_scaled                      161230 non-null  float64\n 26  library_nearest_scaled                    161230 non-null  float64\n 27  marketplace_count_scaled                  161230 non-null  float64\n 28  marketplace_nearest_scaled                161230 non-null  float64\n 29  pharmacy_count_scaled                     161230 non-null  float64\n 30  pharmacy_nearest_scaled                   161230 non-null  float64\n 31  police_count_scaled                       161230 non-null  float64\n 32  police_nearest_scaled                     161230 non-null  float64\n 33  post_box_count_scaled                     161230 non-null  float64\n 34  post_box_nearest_scaled                   161230 non-null  float64\n 35  post_office_count_scaled                  161230 non-null  float64\n 36  post_office_nearest_scaled                161230 non-null  float64\n 37  restaurant_count_scaled                   161230 non-null  float64\n 38  restaurant_nearest_scaled                 161230 non-null  float64\n 39  social_facility_count_scaled              161230 non-null  float64\n 40  social_facility_nearest_scaled            161230 non-null  float64\n 41  supermarket_count_scaled                  161230 non-null  float64\n 42  supermarket_nearest_scaled                161230 non-null  float64\n 43  townhall_count_scaled                     161230 non-null  float64\n 44  townhall_nearest_scaled                   161230 non-null  float64\n 45  road_count_scaled                         161230 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    161230 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    161230 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    161230 non-null  float64\n 49  fixed_2019_mean_num_tests_mean_scaled     161230 non-null  float64\n 50  fixed_2019_mean_num_devices_mean_scaled   161230 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   161230 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   161230 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   161230 non-null  float64\n 54  mobile_2019_mean_num_tests_mean_scaled    161230 non-null  float64\n 55  mobile_2019_mean_num_devices_mean_scaled  161230 non-null  float64\n 56  avg_rad_min_scaled                        161230 non-null  float64\n 57  avg_rad_max_scaled                        161230 non-null  float64\n 58  avg_rad_mean_scaled                       161230 non-null  float64\n 59  avg_rad_std_scaled                        161230 non-null  float64\n 60  avg_rad_median_scaled                     161230 non-null  float64\ndtypes: float64(61)\nmemory usage: 76.3 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nrollout_aoi.info()\n\n\nrollout_aoi.head(2)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#save-output",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#save-output",
    "title": "Predict on rollout grids",
    "section": "Save output",
    "text": "Save output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 39.8 s, sys: 851 ms, total: 40.7 s\nWall time: 40.7 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(raw_features).join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/3_id_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"id\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14\nGROUP_ZOOM_LEVEL = 8"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION,\n    admin_lvl=ADMIN_LVL,\n    quadkey_lvl=ZOOM_LEVEL,\n    use_cache=True,\n    filter_population=False,  # We set this to False for Indonesia\n)\n\n2023-03-15 01:22:53.354 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/indonesia_14_ADM2_admin_grids.geojson\n2023-03-15 01:22:53.362 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region indonesia and admin level ADM2\n2023-03-15 01:22:53.369 | INFO     | povertymapping.geoboundaries:get_geoboundaries:41 - Downloading geoboundaries for IDN at admin level ADM2 at https://www.geoboundaries.org/gbRequest.html?ISO=IDN&ADM=ADM2\n2023-03-15 01:22:53.362 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region indonesia and admin level ADM2\n2023-03-15 01:22:53.369 | INFO     | povertymapping.geoboundaries:get_geoboundaries:41 - Downloading geoboundaries for IDN at admin level ADM2 at https://www.geoboundaries.org/gbRequest.html?ISO=IDN&ADM=ADM2\n2023-03-15 01:22:55.255 | INFO     | povertymapping.geoboundaries:get_geoboundaries:50 - Download path for IDN at admin level ADM2 found at https://geoboundaries.org/data/geoBoundaries-3_0_0/IDN/ADM2/geoBoundaries-3_0_0-IDN-ADM2.geojson\n\n\n2023-03-15 01:41:14.769 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region indonesia and admin level ADM2 at quadkey level 14\n\n\n2023-03-15 01:46:44.171 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 340122 grids for region indonesia and admin level ADM2 at quadkey level 14\n2023-03-15 01:46:44.182 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/geodataframe.py:2196: UserWarning: `keep_geom_type=True` in overlay resulted in 2 dropped geometries of different geometry types than df1 has. Set `keep_geom_type=False` to retain all geometries\n  return geopandas.overlay(\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#explore-generated-grids",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#explore-generated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Generated Grids",
    "text": "Explore Generated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 340122 entries, 0 to 340121\nData columns (total 7 columns):\n #   Column      Non-Null Count   Dtype   \n---  ------      --------------   -----   \n 0   geometry    340122 non-null  geometry\n 1   quadkey     340122 non-null  object  \n 2   shapeName   340122 non-null  object  \n 3   shapeISO    340122 non-null  object  \n 4   shapeID     340122 non-null  object  \n 5   shapeGroup  340122 non-null  object  \n 6   shapeType   340122 non-null  object  \ndtypes: geometry(1), object(6)\nmemory usage: 20.8+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n    \n  \n  \n    \n      0\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n    \n    \n      1\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# Set a limit to plotted grids as loading all grids can become very slow\n# n = 10000\n# start_idx = 10000\n# admin_grids_gdf.iloc[start_idx:start_idx+n].explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#compute-population-per-grid",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#compute-population-per-grid",
    "title": "Generate rollout grids",
    "section": "Compute Population Per Grid",
    "text": "Compute Population Per Grid\nFor this calculation, we will calculate the population, batched based on groups calculated from the quadkey. By getting the first n digits of the quadkey, we are able to get the zoom level n quadkey to which that tile belongs to.\nEx. if we group based on zoom level 8 the quadkey 31000101131223 belongs to the grouping 31000101.\nThis grouping ensures that the tile groupings are geographically close to one another, which reduces the raster window size that we needed to calculate the population count.\nFor more information about quadkeys, see Bing Maps Tile System.\n\nGet groupings based on quadkey\n\nquadkey_group_col = f\"quadkey_level{GROUP_ZOOM_LEVEL}\"\nadmin_grids_gdf[quadkey_group_col] = admin_grids_gdf[\"quadkey\"].str[:GROUP_ZOOM_LEVEL]\nadmin_grids_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      quadkey_level8\n    \n  \n  \n    \n      0\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n    \n    \n      1\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n    \n    \n      2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n    \n  \n\n\n\n\n\n# Demonstrate how the quadkey grouping gives us geographically close grids\nquadkey_groups = list(admin_grids_gdf[quadkey_group_col].unique())\ni = 78\ntest_group = quadkey_groups[i]\ngroup_gdf = admin_grids_gdf[admin_grids_gdf[quadkey_group_col] == test_group]\ngroup_gdf.explore()\n\n\n\nGet population HDX file\nThis section will get the HDX filepath for the specifed REGION. The file will also be downloaded if needed.\n\nhdx_pop_file = get_hdx_file(REGION)\nhdx_pop_file\n\n2023-03-15 01:55:58.179 | INFO     | povertymapping.hdx:get_hdx_file:200 - HDX Data: Unzipping the zip file /home/jace/.cache/geowrangler/hdx/idn_general_2020_geotiff.zip...\n2023-03-15 01:59:09.933 | INFO     | povertymapping.hdx:get_hdx_file:210 - HDX Data: Successfully downloaded and cached for indonesia at /home/jace/.cache/geowrangler/hdx/idn_general_2020_geotiff.zip!\n\n\nPath('/home/jace/.cache/geowrangler/hdx/idn_general_2020.tif')\n\n\n\n\nCompute population count, batched by the quadkey group\n\n# Set aggregation settings\naggregation = dict(column=\"population\", output=\"pop_count\", func=\"sum\")\nextra_args = dict(nodata=np.nan)\n\n\n# Compute population totals per grid\nadmin_grids_pop_count = compute_raster_stats(\n    admin_grids_gdf,\n    hdx_pop_file,\n    aggregation=aggregation,\n    extra_args=extra_args,\n    group_col=quadkey_group_col,\n    max_batch_size=None,\n    n_workers=None,\n)\n\n2023-03-15 01:59:10.349 | INFO     | povertymapping.rollout_grids:compute_raster_stats:71 - Creating raster zonal stats for 340122 grids for file size 87714.317324 Mb, batched in 238 unique group/s from quadkey_level8\n2023-03-15 01:59:10.350 | WARNING  | povertymapping.rollout_grids:compute_raster_stats:74 - When batching by group, output gdf rows will be ordered based on the group.\n100%|██████████| 238/238 [28:43<00:00,  7.24s/it]\n2023-03-15 02:27:54.170 | INFO     | povertymapping.rollout_grids:compute_raster_stats:89 - Completed raster zonal stats for 238 groups\n2023-03-15 02:27:54.296 | INFO     | povertymapping.rollout_grids:compute_raster_stats:91 - Concatenated raster zonal stats for 238 groups\n\n\n\nadmin_grids_pop_count.head()\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      quadkey_level8\n      pop_count\n    \n  \n  \n    \n      0\n      POLYGON ((98.28369 -0.52734, 98.28369 -0.50536...\n      31000101131223\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n      NaN\n    \n    \n      1\n      POLYGON ((98.28369 -0.54931, 98.28369 -0.52734...\n      31000101133001\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n      NaN\n    \n    \n      2\n      POLYGON ((98.30566 -0.52734, 98.30566 -0.50536...\n      31000101131232\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n      185.68042\n    \n    \n      3\n      POLYGON ((98.30566 -0.54931, 98.30566 -0.52734...\n      31000101133010\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n      NaN\n    \n    \n      4\n      POLYGON ((98.32764 -0.50536, 98.32764 -0.48339...\n      31000101131231\n      Nias Selatan\n      None\n      IDN-ADM2-3_0_0-B371\n      IDN\n      ADM2\n      31000101\n      NaN\n    \n  \n\n\n\n\n\n\nKeep grids with total population > 0\n\nadmin_grids_filtered = admin_grids_pop_count[admin_grids_pop_count[\"pop_count\"] > 0]\nadmin_grids_filtered = admin_grids_filtered.reset_index(drop=True)\nadmin_grids_filtered.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 161230 entries, 0 to 161229\nData columns (total 9 columns):\n #   Column          Non-Null Count   Dtype   \n---  ------          --------------   -----   \n 0   geometry        161230 non-null  geometry\n 1   quadkey         161230 non-null  object  \n 2   shapeName       161230 non-null  object  \n 3   shapeISO        161230 non-null  object  \n 4   shapeID         161230 non-null  object  \n 5   shapeGroup      161230 non-null  object  \n 6   shapeType       161230 non-null  object  \n 7   quadkey_level8  161230 non-null  object  \n 8   pop_count       161230 non-null  float64 \ndtypes: float64(1), geometry(1), object(7)\nmemory usage: 11.1+ MB\n\n\n\n# # Uncomment to view interactive map\n# # Set a limit to plotted grids as loading all grids can become very slow\n# n = 10000\n# start_idx = 100000\n# admin_grids_filtered.iloc[start_idx:start_idx+n].explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-cross-country-rollouts/id/2_id_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_filtered.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"mm\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14\nGROUP_ZOOM_LEVEL = 10"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION,\n    admin_lvl=ADMIN_LVL,\n    quadkey_lvl=ZOOM_LEVEL,\n    use_cache=True,\n    filter_population=False,  # We set this to False to not trigger an HDX download\n)\n\n2023-04-16 22:45:23.771 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:260 - Loading cached grids file /home/alron/.cache/geowrangler/quadkey_grids/myanmar_14_ADM2_admin_grids.geojson"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#compute-population-per-grid",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#compute-population-per-grid",
    "title": "Generate rollout grids",
    "section": "Compute Population Per Grid",
    "text": "Compute Population Per Grid\nFor this calculation, we will calculate the population, batched based on groups calculated from the quadkey. By getting the first n digits of the quadkey, we are able to get the zoom level n quadkey to which that tile belongs to.\nEx. if we group based on zoom level 10 the quadkey 31000101131223 belongs to the grouping 3100010113.\nThis grouping ensures that the tile groupings are geographically close to one another, which reduces the raster window size that we needed to calculate the population count.\nFor more information about quadkeys, see Bing Maps Tile System.\n\nquadkey_group_col = f\"quadkey_level{GROUP_ZOOM_LEVEL}\"\nadmin_grids_gdf[quadkey_group_col] = admin_grids_gdf[\"quadkey\"].str[:GROUP_ZOOM_LEVEL]\nadmin_grids_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      quadkey_level10\n    \n  \n  \n    \n      0\n      13220212231203\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      POLYGON ((93.36182 14.13658, 93.36182 14.15788...\n      1322021223\n    \n    \n      1\n      13220212231221\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      POLYGON ((93.36182 14.11527, 93.36182 14.13658...\n      1322021223\n    \n    \n      2\n      13220212231223\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      POLYGON ((93.36182 14.09396, 93.36182 14.11527...\n      1322021223\n    \n  \n\n\n\n\n\nCompute population per grid tile and filter to populated areas only\n\n# For Worldpop data only: set aggregation settings\naggregation = dict(column=\"population\", output=\"pop_count\", func=\"sum\")\nextra_args = dict(nodata=-99999)\n\n\n# For Worldpop data only: compute population totals per grid\nadmin_grids_pop_count = compute_raster_stats(\n    admin_grids_gdf,\n    pop_file,\n    aggregation=aggregation,\n    extra_args=extra_args,\n    group_col=quadkey_group_col,\n    max_batch_size=None,\n    n_workers=2,\n)\n\n2023-04-16 22:45:34.028 | INFO     | povertymapping.rollout_grids:compute_raster_stats:72 - Creating raster zonal stats for 133637 grids for file size 8.619787 Mb, batched in 647 unique group/s from quadkey_level10\n2023-04-16 22:45:34.029 | WARNING  | povertymapping.rollout_grids:compute_raster_stats:75 - When batching by group, output gdf rows will be ordered based on the group.\n100%|██████████| 647/647 [03:11<00:00,  3.38it/s]\n2023-04-16 22:48:45.623 | INFO     | povertymapping.rollout_grids:compute_raster_stats:90 - Completed raster zonal stats for 647 groups\n2023-04-16 22:48:45.703 | INFO     | povertymapping.rollout_grids:compute_raster_stats:92 - Concatenated raster zonal stats for 647 groups\n\n\n\nadmin_grids_filtered = admin_grids_pop_count[admin_grids_pop_count[\"pop_count\"] > 0]\nadmin_grids_filtered = admin_grids_filtered.reset_index(drop=True)\nadmin_grids_filtered.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 27830 entries, 0 to 27829\nData columns (total 9 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   quadkey          27830 non-null  object  \n 1   shapeName        27830 non-null  object  \n 2   shapeISO         27830 non-null  object  \n 3   shapeID          27830 non-null  object  \n 4   shapeGroup       27830 non-null  object  \n 5   shapeType        27830 non-null  object  \n 6   geometry         27830 non-null  geometry\n 7   quadkey_level10  27830 non-null  object  \n 8   pop_count        27830 non-null  float64 \ndtypes: float64(1), geometry(1), object(7)\nmemory usage: 1.9+ MB"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_filtered.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 27830 entries, 0 to 27829\nData columns (total 9 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   quadkey          27830 non-null  object  \n 1   shapeName        27830 non-null  object  \n 2   shapeISO         27830 non-null  object  \n 3   shapeID          27830 non-null  object  \n 4   shapeGroup       27830 non-null  object  \n 5   shapeType        27830 non-null  object  \n 6   geometry         27830 non-null  geometry\n 7   quadkey_level10  27830 non-null  object  \n 8   pop_count        27830 non-null  float64 \ndtypes: float64(1), geometry(1), object(7)\nmemory usage: 1.9+ MB\n\n\n\nadmin_grids_filtered.head(2)\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      geometry\n      quadkey_level10\n      pop_count\n    \n  \n  \n    \n      0\n      13220212231203\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      POLYGON ((93.36182 14.13658, 93.36182 14.15788...\n      1322021223\n      1646.340576\n    \n    \n      1\n      13220212231221\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      POLYGON ((93.36182 14.11527, 93.36182 14.13658...\n      1322021223\n      749.037048\n    \n  \n\n\n\n\n\n# Uncomment to view interactive map\n# admin_grids_filtered.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/2_mm_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_filtered.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html",
    "title": "Generate training data",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport getpass\nimport json\nfrom pathlib import Path\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom povertymapping import dhs, feature_engineering, iso3, nightlights, settings\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#set-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#set-parameters",
    "title": "Generate training data",
    "section": "Set Parameters",
    "text": "Set Parameters\n\n# These configure some params for the feature engineering steps.\nCOUNTRY_CODE = \"mm\"\nCOUNTRY_OSM = \"myanmar\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2015\n\n# You need to download these datasets from the DHS website before running this notebook.\nDHS_HOUSEHOLD_DTA_PATH = Path(settings.DATA_DIR / \"dhs/mm/MMHR71DT/MMHR71FL.DTA\")\nDHS_GEOGRAPHIC_SHP_PATH = Path(settings.DATA_DIR / \"dhs/mm/MMGE71FL/MMGE71FL.shp\")\n\n# Indicate name of column from dhs data that will be used as the label for training\nDHS_LABEL_COL = \"Wealth Index\"\nOUTPUT_LABEL_COL = \"Wealth Index - Scaled\"\n\n# Tile size for the area around a DHS household cluster to generate features for.\n# We set this to 2.4km to match target rollout size of Bing Tile Zoom Level 14 (~2.4km)\nTILE_SIZE_KM = 2.4\n\n# For convenience, consider the rollout version as the date of the root notebook folder.\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#set-up-eog-api-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#set-up-eog-api-access",
    "title": "Generate training data",
    "section": "Set up EOG API Access",
    "text": "Set up EOG API Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-24 13:19:49.780 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-24 13:19:49.781 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#load-dhs-data",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#load-dhs-data",
    "title": "Generate training data",
    "section": "Load DHS Data",
    "text": "Load DHS Data\n\ndhs_gdf = dhs.generate_dhs_cluster_level_data(\n    DHS_HOUSEHOLD_DTA_PATH,\n    DHS_GEOGRAPHIC_SHP_PATH,\n    col_rename_config=COUNTRY_CODE,\n    convert_geoms_to_bbox=True,\n    bbox_size_km=TILE_SIZE_KM,\n).reset_index(drop=True)\n\n\n# Uncomment to view interactive map\n# dhs_gdf.explore()\n\n\n# Inspect the generated data\ndhs_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -52232.000000\n      MM201500000001\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      8.0\n      Magway\n      GPS\n      R\n      20.058637\n      95.360081\n      107.0\n      105.0\n      WGS84\n      POLYGON ((95.34859 20.06943, 95.37157 20.06943...\n    \n    \n      1\n      2\n      130773.724138\n      MM201500000002\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      12.0\n      Yangon\n      GPS\n      U\n      17.112398\n      96.045616\n      31.0\n      14.0\n      WGS84\n      POLYGON ((96.03432 17.12319, 96.05691 17.12319...\n    \n    \n      2\n      3\n      -4955.000000\n      MM201500000003\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      10.0\n      Mon\n      GPS\n      R\n      16.507664\n      97.364236\n      4.0\n      2.0\n      WGS84\n      POLYGON ((97.35298 16.51846, 97.37549 16.51846...\n    \n  \n\n3 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "title": "Generate training data",
    "section": "Feature Engineering and Label Pre-processing",
    "text": "Feature Engineering and Label Pre-processing\nIf this is your first time running this notebook for this specific country, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\ncountry_data = dhs_gdf.copy()\n\n# Create labels dataframe by scaling the specified dhs_label_col (ex. Wealth Index)\nlabels = scaler().fit_transform(country_data[[DHS_LABEL_COL]])\nlabels = pd.DataFrame(labels, columns=[OUTPUT_LABEL_COL])\n\n# Create features dataframe using generate_features module\nfeatures = feature_engineering.generate_features(\n    country_data,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-24 13:19:53.858 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for myanmar at /home/alron/.geowrangler/osm/myanmar? True\n2023-04-24 13:19:53.859 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for myanmar being loaded from /home/alron/.geowrangler/osm/myanmar/gis_osm_pois_free_1.shp\n2023-04-24 13:19:56.901 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for myanmar at /home/alron/.geowrangler/osm/myanmar? True\n2023-04-24 13:19:56.902 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for myanmar being loaded from /home/alron/.geowrangler/osm/myanmar/gis_osm_roads_free_1.shp\n2023-04-24 13:20:12.550 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-24 13:20:12.551 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/2100117ec1967ae3e6d875971fb23fc6.csv? True\n2023-04-24 13:20:12.552 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 2100117ec1967ae3e6d875971fb23fc6) found in filesystem. Loading in cache.\n2023-04-24 13:20:12.705 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['2100117ec1967ae3e6d875971fb23fc6']\n2023-04-24 13:20:12.706 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/df165221cada388b00e5495ceef4d733.csv? True\n2023-04-24 13:20:12.707 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: df165221cada388b00e5495ceef4d733) found in filesystem. Loading in cache.\n2023-04-24 13:20:12.874 | INFO     | povertymapping.nightlights:get_clipped_raster:451 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 19.5 s, sys: 687 ms, total: 20.2 s\nWall time: 20.2 s\n\n\n\nfeatures.describe()\n\n\n\n\n\n  \n    \n      \n      poi_count\n      atm_count\n      atm_nearest\n      bank_count\n      bank_nearest\n      bus_station_count\n      bus_station_nearest\n      cafe_count\n      cafe_nearest\n      charging_station_count\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      count\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.0\n      441.0\n      441.000000\n      441.000000\n      441.0\n      ...\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n      441.000000\n    \n    \n      mean\n      14.437642\n      0.587302\n      7666.030930\n      0.741497\n      7312.662432\n      0.0\n      10000.0\n      0.834467\n      6655.875601\n      0.0\n      ...\n      457.557034\n      267.887378\n      0.943049\n      0.112291\n      0.054519\n      0.656718\n      3.445783\n      1.574423\n      0.713020\n      1.414446\n    \n    \n      std\n      53.384807\n      3.203297\n      3887.021898\n      2.993375\n      3983.110875\n      0.0\n      0.0\n      3.300453\n      4191.991928\n      0.0\n      ...\n      555.250570\n      331.849250\n      1.261128\n      0.232969\n      0.109996\n      1.956067\n      11.006074\n      4.132559\n      2.385816\n      3.761177\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.0\n      10000.0\n      0.000000\n      0.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.021197\n      0.071711\n      0.051501\n      0.006556\n      0.053011\n    \n    \n      25%\n      0.000000\n      0.000000\n      4722.535698\n      0.000000\n      4303.991512\n      0.0\n      10000.0\n      0.000000\n      1896.509839\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.081726\n      0.147088\n      0.110671\n      0.014691\n      0.107851\n    \n    \n      50%\n      0.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      229.374715\n      81.592881\n      0.780922\n      0.032757\n      0.026149\n      0.104964\n      0.327501\n      0.162752\n      0.052935\n      0.141830\n    \n    \n      75%\n      2.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      867.242545\n      538.750926\n      1.493886\n      0.128995\n      0.065100\n      0.204698\n      2.085223\n      0.730104\n      0.504783\n      0.508496\n    \n    \n      max\n      489.000000\n      43.000000\n      10000.000000\n      26.000000\n      10000.000000\n      0.0\n      10000.0\n      37.000000\n      10000.000000\n      0.0\n      ...\n      3210.045641\n      1950.749424\n      10.781958\n      2.245582\n      1.144908\n      17.769781\n      178.751129\n      33.430575\n      39.364749\n      28.032297\n    \n  \n\n8 rows × 61 columns\n\n\n\n\nlabels.hist()\n\narray([[<AxesSubplot: title={'center': 'Wealth Index - Scaled'}>]],\n      dtype=object)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/1_mm_train_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/1_mm_train_model.html",
    "title": "Train model",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport json\nimport pickle\n\nimport fasttreeshap\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom sklearn.model_selection import RepeatedKFold, cross_val_score\n\n%reload_ext autoreload\n%autoreload 2\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n\n\n\nLoad Training Data\n\nCOUNTRY_CODE = \"mm\"\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\n\n# CSV file contains all data\n# Metadata JSON file lists the feature columns and label column\ndata = pd.read_csv(f\"{ROLLOUT_DATE}-training-data.csv\")\nwith open(f\"{ROLLOUT_DATE}-training-data-columns.json\", \"r\") as file:\n    column_metadata = json.load(file)\n\nfeatures = data[column_metadata[\"features\"]]\nlabels = data[column_metadata[\"label\"]]\n\n\n\nCross-Validation\n\n# Set parameters\nCV_K_FOLDS = 5\nCV_NUM_REPEATS = 5\nRANDOM_SEED = 42\n\n\nprint(f\"Performing {CV_K_FOLDS}-fold CV...\")\ncv = RepeatedKFold(\n    n_splits=CV_K_FOLDS,\n    n_repeats=CV_NUM_REPEATS,\n    random_state=RANDOM_SEED,\n)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7ff5daab4f90>\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\n\nprint(\"Cross validation scores are: \", R_cv)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.50726531 0.52002908 0.35890753 0.52864406 0.54579074 0.4462211\n 0.5197239  0.50215264 0.62125436 0.25589917 0.48019122 0.64566746\n 0.44776005 0.4649595  0.52518846 0.51950911 0.59382283 0.35514721\n 0.46889174 0.61799952 0.5173341  0.43128004 0.38465861 0.52904881\n 0.55285788]\nCross validation R^2 mean: 0.49\nCross validation R^2 std: 0.09\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\nmodel_save_path = f\"./{ROLLOUT_DATE}-{COUNTRY_CODE}-single-country-model.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)\n\n\n\nSHAP\n\nexplainer = fasttreeshap.TreeExplainer(model, algorithm=\"auto\", n_jobs=-1)\nshap_values = explainer(features).values\n\n\nshap.summary_plot(\n    shap_values, features, feature_names=features.columns, plot_type=\"bar\"\n)\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-16 23:00:54.461 | INFO     | povertymapping.nightlights:get_eog_access_token:43 - Loaded access_token from /home/alron/.eog_creds/eog_access_token.txt"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"mm\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2016\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-mm-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"./{rollout_date}-{COUNTRY_CODE}-single-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_mm_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\n# aoi.explore()  # Uncomment to view data in a map"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\n\n%%time\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-16 23:00:59.368 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for myanmar at /home/alron/.geowrangler/osm/myanmar? True\n2023-04-16 23:00:59.369 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for myanmar being loaded from /home/alron/.geowrangler/osm/myanmar/gis_osm_pois_free_1.shp"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 27830 entries, 0 to 27829\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          27830 non-null  float64\n 1   atm_count                          27830 non-null  float64\n 2   atm_nearest                        27830 non-null  float64\n 3   bank_count                         27830 non-null  float64\n 4   bank_nearest                       27830 non-null  float64\n 5   bus_station_count                  27830 non-null  float64\n 6   bus_station_nearest                27830 non-null  float64\n 7   cafe_count                         27830 non-null  float64\n 8   cafe_nearest                       27830 non-null  float64\n 9   charging_station_count             27830 non-null  float64\n 10  charging_station_nearest           27830 non-null  float64\n 11  courthouse_count                   27830 non-null  float64\n 12  courthouse_nearest                 27830 non-null  float64\n 13  dentist_count                      27830 non-null  float64\n 14  dentist_nearest                    27830 non-null  float64\n 15  fast_food_count                    27830 non-null  float64\n 16  fast_food_nearest                  27830 non-null  float64\n 17  fire_station_count                 27830 non-null  float64\n 18  fire_station_nearest               27830 non-null  float64\n 19  food_court_count                   27830 non-null  float64\n 20  food_court_nearest                 27830 non-null  float64\n 21  fuel_count                         27830 non-null  float64\n 22  fuel_nearest                       27830 non-null  float64\n 23  hospital_count                     27830 non-null  float64\n 24  hospital_nearest                   27830 non-null  float64\n 25  library_count                      27830 non-null  float64\n 26  library_nearest                    27830 non-null  float64\n 27  marketplace_count                  27830 non-null  float64\n 28  marketplace_nearest                27830 non-null  float64\n 29  pharmacy_count                     27830 non-null  float64\n 30  pharmacy_nearest                   27830 non-null  float64\n 31  police_count                       27830 non-null  float64\n 32  police_nearest                     27830 non-null  float64\n 33  post_box_count                     27830 non-null  float64\n 34  post_box_nearest                   27830 non-null  float64\n 35  post_office_count                  27830 non-null  float64\n 36  post_office_nearest                27830 non-null  float64\n 37  restaurant_count                   27830 non-null  float64\n 38  restaurant_nearest                 27830 non-null  float64\n 39  social_facility_count              27830 non-null  float64\n 40  social_facility_nearest            27830 non-null  float64\n 41  supermarket_count                  27830 non-null  float64\n 42  supermarket_nearest                27830 non-null  float64\n 43  townhall_count                     27830 non-null  float64\n 44  townhall_nearest                   27830 non-null  float64\n 45  road_count                         27830 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean    27830 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean    27830 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean    27830 non-null  float64\n 49  fixed_2019_mean_num_tests_mean     27830 non-null  float64\n 50  fixed_2019_mean_num_devices_mean   27830 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean   27830 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean   27830 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean   27830 non-null  float64\n 54  mobile_2019_mean_num_tests_mean    27830 non-null  float64\n 55  mobile_2019_mean_num_devices_mean  27830 non-null  float64\n 56  avg_rad_min                        27830 non-null  float64\n 57  avg_rad_max                        27830 non-null  float64\n 58  avg_rad_mean                       27830 non-null  float64\n 59  avg_rad_std                        27830 non-null  float64\n 60  avg_rad_median                     27830 non-null  float64\ndtypes: float64(61)\nmemory usage: 14.2 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"], split_quantile=False\n).astype(str)\n\n\nSave Output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 31.6 s, sys: 656 ms, total: 32.3 s\nWall time: 33 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-single-country-rollouts/mm/3_mm_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\nrollout_aoi.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      quadkey_level10\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      13220212231203\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      1322021223\n      1646.340576\n      POLYGON ((93.36182 14.13658, 93.36182 14.15788...\n      0.291516\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.049524\n      0.030141\n      -0.017631\n      0.019043\n      -0.020764\n    \n    \n      1\n      13220212231221\n      Yangon (South)\n      None\n      MMR-ADM2-3_0_0-B72\n      MMR\n      ADM2\n      1322021223\n      749.037048\n      POLYGON ((93.36182 14.11527, 93.36182 14.13658...\n      0.313033\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.023038\n      0.057469\n      0.005178\n      0.020869\n      0.000433\n    \n    \n      2\n      13220030031312\n      Kyaukpyu\n      None\n      MMR-ADM2-3_0_0-B21\n      MMR\n      ADM2\n      1322003003\n      1276.558105\n      POLYGON ((93.47168 18.85431, 93.47168 18.87510...\n      0.313332\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.061539\n      -0.002709\n      -0.027197\n      0.012585\n      -0.025633\n    \n    \n      3\n      13220030031313\n      Kyaukpyu\n      None\n      MMR-ADM2-3_0_0-B21\n      MMR\n      ADM2\n      1322003003\n      59.303814\n      POLYGON ((93.49365 18.85431, 93.49365 18.87510...\n      0.302049\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.054370\n      0.008868\n      -0.024229\n      0.013000\n      -0.022040\n    \n    \n      4\n      13220030031333\n      Kyaukpyu\n      None\n      MMR-ADM2-3_0_0-B21\n      MMR\n      ADM2\n      1322003003\n      674.946777\n      POLYGON ((93.49365 18.81272, 93.49365 18.83352...\n      0.313332\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.053165\n      -0.007529\n      -0.028266\n      0.011237\n      -0.029542\n    \n  \n\n5 rows × 72 columns\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html",
    "title": "Generate training data",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport getpass\nimport json\nfrom pathlib import Path\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom povertymapping import dhs, feature_engineering, iso3, nightlights, settings\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#set-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#set-parameters",
    "title": "Generate training data",
    "section": "Set Parameters",
    "text": "Set Parameters\n\n# These configure some params for the feature engineering steps.\nCOUNTRY_CODE = \"tl\"\nCOUNTRY_OSM = \"east-timor\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2016\n\n# You need to download these datasets from the DHS website before running this notebook.\nDHS_HOUSEHOLD_DTA_PATH = Path(settings.DATA_DIR / \"dhs/tl/TLHR71DT/TLHR71FL.DTA\")\nDHS_GEOGRAPHIC_SHP_PATH = Path(settings.DATA_DIR / \"dhs/tl/TLGE71FL/TLGE71FL.shp\")\n\n# Indicate name of column from dhs data that will be used as the label for training\nDHS_LABEL_COL = \"Wealth Index\"\nOUTPUT_LABEL_COL = \"Wealth Index - Scaled\"\n\n# Tile size for the area around a DHS household cluster to generate features for.\n# We set this to 2.4km to match target rollout size of Bing Tile Zoom Level 14 (~2.4km)\nTILE_SIZE_KM = 2.4\n\n# For convenience, consider the rollout version as the date of the root notebook folder.\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#set-up-eog-api-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#set-up-eog-api-access",
    "title": "Generate training data",
    "section": "Set up EOG API Access",
    "text": "Set up EOG API Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-24 13:07:55.341 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-24 13:07:55.343 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#load-dhs-data",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#load-dhs-data",
    "title": "Generate training data",
    "section": "Load DHS Data",
    "text": "Load DHS Data\n\ndhs_gdf = dhs.generate_dhs_cluster_level_data(\n    DHS_HOUSEHOLD_DTA_PATH,\n    DHS_GEOGRAPHIC_SHP_PATH,\n    col_rename_config=COUNTRY_CODE,\n    convert_geoms_to_bbox=True,\n    bbox_size_km=TILE_SIZE_KM,\n).reset_index(drop=True)\n\n\n# Uncomment to view interactive map\n# dhs_gdf.explore()\n\n\n# Inspect the generated data\ndhs_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      F21\n      F22\n      F23\n      geometry\n    \n  \n  \n    \n      0\n      1\n      32166.600000\n      TL201600000001\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.712016\n      125.567381\n      9999.0\n      1005.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.55646 -8.70122, 125.57830 -8.701...\n    \n    \n      1\n      2\n      -34063.923077\n      TL201600000002\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.730226\n      125.590219\n      9999.0\n      1342.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.57930 -8.71943, 125.60114 -8.719...\n    \n    \n      2\n      3\n      39230.590909\n      TL201600000003\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.741340\n      125.556399\n      9999.0\n      1060.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.54548 -8.73055, 125.56732 -8.730...\n    \n  \n\n3 rows × 25 columns"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "title": "Generate training data",
    "section": "Feature Engineering and Label Pre-processing",
    "text": "Feature Engineering and Label Pre-processing\nIf this is your first time running this notebook for this specific country, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\ncountry_data = dhs_gdf.copy()\n\n# Create labels dataframe by scaling the specified dhs_label_col (ex. Wealth Index)\nlabels = scaler().fit_transform(country_data[[DHS_LABEL_COL]])\nlabels = pd.DataFrame(labels, columns=[OUTPUT_LABEL_COL])\n\n# Create features dataframe using generate_features module\nfeatures = feature_engineering.generate_features(\n    country_data,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-24 13:08:04.804 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for east-timor at /home/alron/.geowrangler/osm/east-timor? True\n2023-04-24 13:08:04.806 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for east-timor being loaded from /home/alron/.geowrangler/osm/east-timor/gis_osm_pois_free_1.shp\n2023-04-24 13:08:06.507 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for east-timor at /home/alron/.geowrangler/osm/east-timor? True\n2023-04-24 13:08:06.507 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for east-timor being loaded from /home/alron/.geowrangler/osm/east-timor/gis_osm_roads_free_1.shp\n2023-04-24 13:08:07.672 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-24 13:08:07.673 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/0006e572a43b79244fb591a51078be7f.csv? True\n2023-04-24 13:08:07.674 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 0006e572a43b79244fb591a51078be7f) found in filesystem. Loading in cache.\n2023-04-24 13:08:07.816 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['0006e572a43b79244fb591a51078be7f']\n2023-04-24 13:08:07.817 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/50cac4669b9304f67acf97d6da8c86e9.csv? True\n2023-04-24 13:08:07.818 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 50cac4669b9304f67acf97d6da8c86e9) found in filesystem. Loading in cache.\n2023-04-24 13:08:07.974 | INFO     | povertymapping.nightlights:get_clipped_raster:451 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nCPU times: user 4.92 s, sys: 111 ms, total: 5.04 s\nWall time: 5.03 s\n\n\n\nfeatures.describe()\n\n\n\n\n\n  \n    \n      \n      poi_count\n      atm_count\n      atm_nearest\n      bank_count\n      bank_nearest\n      bus_station_count\n      bus_station_nearest\n      cafe_count\n      cafe_nearest\n      charging_station_count\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      count\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.0\n      455.0\n      455.000000\n      455.000000\n      455.0\n      ...\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n      455.000000\n    \n    \n      mean\n      4.334066\n      0.221978\n      8277.103783\n      0.094505\n      8628.960251\n      0.0\n      10000.0\n      0.226374\n      8487.954455\n      0.0\n      ...\n      129.205270\n      62.166183\n      0.776317\n      0.082297\n      0.031655\n      0.225066\n      2.315787\n      0.955177\n      0.570169\n      0.845399\n    \n    \n      std\n      14.538209\n      1.050047\n      3493.838047\n      0.503154\n      3174.300251\n      0.0\n      0.0\n      1.253790\n      3251.298526\n      0.0\n      ...\n      255.329999\n      102.305246\n      3.051523\n      0.195099\n      0.063384\n      0.905727\n      5.546285\n      2.660485\n      1.366291\n      2.568392\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.0\n      10000.0\n      0.000000\n      0.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      -0.059816\n      -0.009870\n      -0.028623\n      0.006857\n      -0.028420\n    \n    \n      25%\n      0.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      -0.028071\n      0.049167\n      0.005769\n      0.017187\n      0.001217\n    \n    \n      50%\n      0.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      -0.009039\n      0.277359\n      0.062193\n      0.071605\n      0.031497\n    \n    \n      75%\n      1.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      196.727756\n      110.317547\n      1.202533\n      0.086798\n      0.051759\n      0.047477\n      1.609035\n      0.451432\n      0.421433\n      0.284528\n    \n    \n      max\n      109.000000\n      12.000000\n      10000.000000\n      4.000000\n      10000.000000\n      0.0\n      10000.0\n      10.000000\n      10000.000000\n      0.0\n      ...\n      1886.307982\n      479.226728\n      59.630158\n      1.345192\n      0.454227\n      7.236582\n      40.581253\n      17.054955\n      12.550287\n      17.038280\n    \n  \n\n8 rows × 61 columns\n\n\n\n\nlabels.hist()\n\narray([[<AxesSubplot: title={'center': 'Wealth Index - Scaled'}>]],\n      dtype=object)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html",
    "title": "Timor Leste Model Rollout Part 2 (Generate Roll-out Grids)",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#set-country-specific-parameters",
    "title": "Timor Leste Model Rollout Part 2 (Generate Roll-out Grids)",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"tl\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#generate-grids",
    "title": "Timor Leste Model Rollout Part 2 (Generate Roll-out Grids)",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-04-03 08:26:45.652 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/timor-leste_14_ADM2_populated_admin_grids.geojson\n2023-04-03 08:26:45.655 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region timor-leste and admin level ADM2\n2023-04-03 08:26:45.915 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region timor-leste and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n\n    \n      \n      \n    \n    \n\n\n2023-04-03 08:26:47.769 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 2811 grids for region timor-leste and admin level ADM2 at quadkey level 14\n2023-04-03 08:26:47.770 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-04-03 08:26:48.504 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting timor-leste population data for filtering grids\n2023-04-03 08:26:49.725 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-04-03 08:26:49.726 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 2811 grids for file size 829497978\n2023-04-03 08:27:05.671 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-04-03 08:27:05.673 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 2024\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#explore-populated-grids",
    "title": "Timor Leste Model Rollout Part 2 (Generate Roll-out Grids)",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2024 entries, 0 to 2810\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    2024 non-null   geometry\n 1   quadkey     2024 non-null   object  \n 2   shapeName   2024 non-null   object  \n 3   shapeISO    2024 non-null   object  \n 4   shapeID     2024 non-null   object  \n 5   shapeGroup  2024 non-null   object  \n 6   shapeType   2024 non-null   object  \n 7   pop_count   2024 non-null   float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 142.3+ KB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      0\n      POLYGON ((124.03564 -9.34067, 124.03564 -9.318...\n      31011220203121\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      102.251936\n    \n    \n      1\n      POLYGON ((124.03564 -9.36235, 124.03564 -9.340...\n      31011220203123\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      992.492772\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/2_tl_generate_grids.html#save-to-file",
    "title": "Timor Leste Model Rollout Part 2 (Generate Roll-out Grids)",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/1_tl_train_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/1_tl_train_model.html",
    "title": "Train model",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport json\nimport pickle\n\nimport fasttreeshap\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom sklearn.model_selection import RepeatedKFold, cross_val_score\n\n%reload_ext autoreload\n%autoreload 2\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n\n\n\nLoad Training Data\n\nCOUNTRY_CODE = \"tl\"\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\n\n# CSV file contains all data\n# Metadata JSON file lists the feature columns and label column\ndata = pd.read_csv(f\"{ROLLOUT_DATE}-training-data.csv\")\nwith open(f\"{ROLLOUT_DATE}-training-data-columns.json\", \"r\") as file:\n    column_metadata = json.load(file)\n\nfeatures = data[column_metadata[\"features\"]]\nlabels = data[column_metadata[\"label\"]]\n\n\n\nCross-Validation\n\n# Set parameters\nCV_K_FOLDS = 5\nCV_NUM_REPEATS = 5\nRANDOM_SEED = 42\n\n\nprint(f\"Performing {CV_K_FOLDS}-fold CV...\")\ncv = RepeatedKFold(\n    n_splits=CV_K_FOLDS,\n    n_repeats=CV_NUM_REPEATS,\n    random_state=RANDOM_SEED,\n)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7f25654ffdd0>\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\n\nprint(\"Cross validation scores are: \", R_cv)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.52705369 0.7191233  0.62597134 0.62725306 0.60707198 0.59573009\n 0.64103504 0.56416994 0.65353403 0.58714065 0.64706741 0.57839162\n 0.68844804 0.56323569 0.39276071 0.57982091 0.73729883 0.55294025\n 0.62533875 0.55345153 0.58199904 0.51790932 0.66315305 0.56605196\n 0.62420234]\nCross validation R^2 mean: 0.6\nCross validation R^2 std: 0.07\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\nmodel_save_path = f\"./{ROLLOUT_DATE}-{COUNTRY_CODE}-single-country-model.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)\n\n\n\nSHAP\n\nexplainer = fasttreeshap.TreeExplainer(model, algorithm=\"auto\", n_jobs=-1)\nshap_values = explainer(features).values\n\n\nshap.summary_plot(\n    shap_values, features, feature_names=features.columns, plot_type=\"bar\"\n)\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-14 15:40:26.084 | INFO     | povertymapping.nightlights:get_eog_access_token:43 - Loaded access_token from /home/alron/.eog_creds/eog_access_token.txt"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"tl\"\nCOUNTRY_OSM = \"east-timor\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2016\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-tl-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"./{rollout_date}-{COUNTRY_CODE}-single-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_tl_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\n# aoi.explore()  # Uncomment to view data in a map"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\n\n%%time\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-14 15:40:29.089 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for timor-leste at /home/alron/.geowrangler/osm/timor-leste? True\n2023-04-14 15:40:29.091 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for timor-leste being loaded from /home/alron/.geowrangler/osm/timor-leste/gis_osm_pois_free_1.shp\n2023-04-14 15:40:30.405 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for timor-leste at /home/alron/.geowrangler/osm/timor-leste? True\n2023-04-14 15:40:30.406 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for timor-leste being loaded from /home/alron/.geowrangler/osm/timor-leste/gis_osm_roads_free_1.shp\n2023-04-14 15:40:31.060 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-14 15:40:31.061 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/520c5a19341a5d2e4490d24a947ca93f.csv? False\n2023-04-14 15:40:31.062 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-14 15:40:31.897 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for fixed and 2019: 4\n2023-04-14 15:40:31.909 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for fixed and 2019 at /home/alron/.geowrangler/ookla/fixed/2019? True\n2023-04-14 15:40:31.910 | DEBUG    | povertymapping.ookla:load_type_year_data:146 - Generating quadkeys based on input aoi geometry to pull intersecting Ookla data.\n2023-04-14 15:40:56.567 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 1 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-01-01_performance_fixed_tiles.parquet\n2023-04-14 15:41:01.122 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 2 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-04-01_performance_fixed_tiles.parquet\n2023-04-14 15:41:05.558 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 3 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-07-01_performance_fixed_tiles.parquet\n2023-04-14 15:41:10.454 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, fixed 2019 4 being loaded from /home/alron/.geowrangler/ookla/fixed/2019/2019-10-01_performance_fixed_tiles.parquet\n2023-04-14 15:41:16.055 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for fixed and 2019 into one dataframe\n2023-04-14 15:41:16.226 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['520c5a19341a5d2e4490d24a947ca93f']\n2023-04-14 15:41:16.227 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/5c8e9525a68935322736644fe7561f6a.csv? False\n2023-04-14 15:41:16.227 | DEBUG    | povertymapping.ookla:load_type_year_data:111 - No cached data found. Processing Ookla data from scratch.\n2023-04-14 15:41:16.228 | INFO     | povertymapping.ookla:download_ookla_year_data:224 - Ookla Data: Number of available files for mobile and 2019: 4\n2023-04-14 15:41:16.241 | INFO     | povertymapping.ookla:download_ookla_year_data:237 - Ookla Data: Cached data available for mobile and 2019 at /home/alron/.geowrangler/ookla/mobile/2019? True\n2023-04-14 15:41:16.242 | DEBUG    | povertymapping.ookla:load_type_year_data:146 - Generating quadkeys based on input aoi geometry to pull intersecting Ookla data.\n2023-04-14 15:41:43.767 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 1 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-01-01_performance_mobile_tiles.parquet\n2023-04-14 15:41:46.515 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 2 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-04-01_performance_mobile_tiles.parquet\n2023-04-14 15:41:49.229 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 3 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-07-01_performance_mobile_tiles.parquet\n2023-04-14 15:41:52.655 | DEBUG    | povertymapping.ookla:load_type_year_data:163 - Ookla data for aoi, mobile 2019 4 being loaded from /home/alron/.geowrangler/ookla/mobile/2019/2019-10-01_performance_mobile_tiles.parquet\n2023-04-14 15:41:55.537 | DEBUG    | povertymapping.ookla:load_type_year_data:184 - Concatenating quarterly Ookla data for mobile and 2019 into one dataframe\n2023-04-14 15:41:55.749 | INFO     | povertymapping.nightlights:get_clipped_raster:463 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/5a2ab755246adb45217c58a60b82a309.tif\n\n\nCPU times: user 1min 29s, sys: 8.25 s, total: 1min 37s\nWall time: 1min 34s"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 2024 entries, 0 to 2023\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          2024 non-null   float64\n 1   atm_count                          2024 non-null   float64\n 2   atm_nearest                        2024 non-null   float64\n 3   bank_count                         2024 non-null   float64\n 4   bank_nearest                       2024 non-null   float64\n 5   bus_station_count                  2024 non-null   float64\n 6   bus_station_nearest                2024 non-null   float64\n 7   cafe_count                         2024 non-null   float64\n 8   cafe_nearest                       2024 non-null   float64\n 9   charging_station_count             2024 non-null   float64\n 10  charging_station_nearest           2024 non-null   float64\n 11  courthouse_count                   2024 non-null   float64\n 12  courthouse_nearest                 2024 non-null   float64\n 13  dentist_count                      2024 non-null   float64\n 14  dentist_nearest                    2024 non-null   float64\n 15  fast_food_count                    2024 non-null   float64\n 16  fast_food_nearest                  2024 non-null   float64\n 17  fire_station_count                 2024 non-null   float64\n 18  fire_station_nearest               2024 non-null   float64\n 19  food_court_count                   2024 non-null   float64\n 20  food_court_nearest                 2024 non-null   float64\n 21  fuel_count                         2024 non-null   float64\n 22  fuel_nearest                       2024 non-null   float64\n 23  hospital_count                     2024 non-null   float64\n 24  hospital_nearest                   2024 non-null   float64\n 25  library_count                      2024 non-null   float64\n 26  library_nearest                    2024 non-null   float64\n 27  marketplace_count                  2024 non-null   float64\n 28  marketplace_nearest                2024 non-null   float64\n 29  pharmacy_count                     2024 non-null   float64\n 30  pharmacy_nearest                   2024 non-null   float64\n 31  police_count                       2024 non-null   float64\n 32  police_nearest                     2024 non-null   float64\n 33  post_box_count                     2024 non-null   float64\n 34  post_box_nearest                   2024 non-null   float64\n 35  post_office_count                  2024 non-null   float64\n 36  post_office_nearest                2024 non-null   float64\n 37  restaurant_count                   2024 non-null   float64\n 38  restaurant_nearest                 2024 non-null   float64\n 39  social_facility_count              2024 non-null   float64\n 40  social_facility_nearest            2024 non-null   float64\n 41  supermarket_count                  2024 non-null   float64\n 42  supermarket_nearest                2024 non-null   float64\n 43  townhall_count                     2024 non-null   float64\n 44  townhall_nearest                   2024 non-null   float64\n 45  road_count                         2024 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean    2024 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean    2024 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean    2024 non-null   float64\n 49  fixed_2019_mean_num_tests_mean     2024 non-null   float64\n 50  fixed_2019_mean_num_devices_mean   2024 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean   2024 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean   2024 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean   2024 non-null   float64\n 54  mobile_2019_mean_num_tests_mean    2024 non-null   float64\n 55  mobile_2019_mean_num_devices_mean  2024 non-null   float64\n 56  avg_rad_min                        2024 non-null   float64\n 57  avg_rad_max                        2024 non-null   float64\n 58  avg_rad_mean                       2024 non-null   float64\n 59  avg_rad_std                        2024 non-null   float64\n 60  avg_rad_median                     2024 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.0 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\n# Simple quintile approach\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"], split_quantile=False\n).astype(str)\n\n\nSave Output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 525 ms, sys: 10.5 ms, total: 536 ms\nWall time: 535 ms\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-single-country-rollouts/tl/3_tl_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\nrollout_aoi.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n    \n  \n  \n    \n      0\n      31011220203121\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      102.251936\n      POLYGON ((124.03564 -9.34067, 124.03564 -9.318...\n      0.219882\n      D\n    \n    \n      1\n      31011220203123\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      992.492772\n      POLYGON ((124.03564 -9.36235, 124.03564 -9.340...\n      0.209892\n      E\n    \n    \n      2\n      31011220203130\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      118.897600\n      POLYGON ((124.05762 -9.34067, 124.05762 -9.318...\n      0.247152\n      C\n    \n    \n      3\n      31011220203132\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      513.637632\n      POLYGON ((124.05762 -9.36235, 124.05762 -9.340...\n      0.209138\n      E\n    \n    \n      4\n      31011220203310\n      Nitibe\n      None\n      TLS-ADM2-3_0_0-B58\n      TLS\n      ADM2\n      319.140940\n      POLYGON ((124.05762 -9.38403, 124.05762 -9.362...\n      0.242258\n      D\n    \n  \n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html",
    "title": "Generate training data",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport getpass\nimport json\nfrom pathlib import Path\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom povertymapping import dhs, feature_engineering, nightlights, settings\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#set-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#set-parameters",
    "title": "Generate training data",
    "section": "Set Parameters",
    "text": "Set Parameters\n\n# These configure some params for the feature engineering steps.\nCOUNTRY_CODE = \"kh\"\nCOUNTRY_OSM = \"cambodia\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2014\n\n# You need to download these datasets from the DHS website before running this notebook.\nDHS_HOUSEHOLD_DTA_PATH = Path(settings.DATA_DIR / \"dhs/kh/KHHR73DT/KHHR73FL.DTA\")\nDHS_GEOGRAPHIC_SHP_PATH = Path(settings.DATA_DIR / \"dhs/kh/KHGE71FL/KHGE71FL.shp\")\n\n# Indicate name of column from dhs data that will be used as the label for training\nDHS_LABEL_COL = \"Wealth Index\"\nOUTPUT_LABEL_COL = \"Wealth Index - Scaled\"\n\n# Tile size for the area around a DHS household cluster to generate features for.\n# We set this to 2.4km to match target rollout size of Bing Tile Zoom Level 14 (~2.4km)\nTILE_SIZE_KM = 2.4\n\n# For convenience, consider the rollout version as the date of the root notebook folder.\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#set-up-eog-api-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#set-up-eog-api-access",
    "title": "Generate training data",
    "section": "Set up EOG API Access",
    "text": "Set up EOG API Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-24 13:23:49.250 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-24 13:23:49.252 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#load-dhs-data",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#load-dhs-data",
    "title": "Generate training data",
    "section": "Load DHS Data",
    "text": "Load DHS Data\n\ndhs_gdf = dhs.generate_dhs_cluster_level_data(\n    DHS_HOUSEHOLD_DTA_PATH,\n    DHS_GEOGRAPHIC_SHP_PATH,\n    col_rename_config=COUNTRY_CODE,\n    convert_geoms_to_bbox=True,\n    bbox_size_km=TILE_SIZE_KM,\n).reset_index(drop=True)\n\n\n# Uncomment to view interactive map\n# dhs_gdf.explore()\n\n\n# Inspect the generated data\ndhs_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -7443.192308\n      KH201400000001\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.518676\n      103.028394\n      9999.0\n      11.0\n      WGS84\n      POLYGON ((103.01729 13.52947, 103.03949 13.529...\n    \n    \n      1\n      2\n      2622.678571\n      KH201400000002\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.398398\n      102.953852\n      9999.0\n      23.0\n      WGS84\n      POLYGON ((102.94276 13.40919, 102.96495 13.409...\n    \n    \n      2\n      3\n      22167.920000\n      KH201400000003\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.503451\n      102.996001\n      9999.0\n      13.0\n      WGS84\n      POLYGON ((102.98490 13.51424, 103.00710 13.514...\n    \n  \n\n3 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "title": "Generate training data",
    "section": "Feature Engineering and Label Pre-processing",
    "text": "Feature Engineering and Label Pre-processing\nIf this is your first time running this notebook for this specific country, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\ncountry_data = dhs_gdf.copy()\n\n# Create labels dataframe by scaling the specified dhs_label_col (ex. Wealth Index)\nlabels = scaler().fit_transform(country_data[[DHS_LABEL_COL]])\nlabels = pd.DataFrame(labels, columns=[OUTPUT_LABEL_COL])\n\n# Create features dataframe using generate_features module\nfeatures = feature_engineering.generate_features(\n    country_data,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-24 13:23:52.410 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for cambodia at /home/alron/.geowrangler/osm/cambodia? True\n2023-04-24 13:23:52.412 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for cambodia being loaded from /home/alron/.geowrangler/osm/cambodia/gis_osm_pois_free_1.shp\n2023-04-24 13:23:54.440 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for cambodia at /home/alron/.geowrangler/osm/cambodia? True\n2023-04-24 13:23:54.440 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for cambodia being loaded from /home/alron/.geowrangler/osm/cambodia/gis_osm_roads_free_1.shp\n2023-04-24 13:24:00.087 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-24 13:24:00.088 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/6bc4328716bb3ab458a001835ee12075.csv? True\n2023-04-24 13:24:00.088 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 6bc4328716bb3ab458a001835ee12075) found in filesystem. Loading in cache.\n2023-04-24 13:24:00.308 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['6bc4328716bb3ab458a001835ee12075']\n2023-04-24 13:24:00.309 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/b722d8957949c9a4c24e40c8e75a9f1f.csv? True\n2023-04-24 13:24:00.310 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: b722d8957949c9a4c24e40c8e75a9f1f) found in filesystem. Loading in cache.\n2023-04-24 13:24:00.544 | INFO     | povertymapping.nightlights:get_clipped_raster:451 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nCPU times: user 9.51 s, sys: 119 ms, total: 9.63 s\nWall time: 9.64 s\n\n\n\nfeatures.describe()\n\n\n\n\n\n  \n    \n      \n      poi_count\n      atm_count\n      atm_nearest\n      bank_count\n      bank_nearest\n      bus_station_count\n      bus_station_nearest\n      cafe_count\n      cafe_nearest\n      charging_station_count\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      count\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.0\n      611.0\n      611.000000\n      611.000000\n      611.0\n      ...\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n      611.000000\n    \n    \n      mean\n      46.253682\n      1.463175\n      6992.857278\n      1.664484\n      5826.724023\n      0.0\n      10000.0\n      3.774141\n      5919.363734\n      0.0\n      ...\n      322.633328\n      281.023646\n      1.214967\n      0.340938\n      0.157622\n      0.561566\n      3.389809\n      1.500267\n      0.728452\n      1.345871\n    \n    \n      std\n      202.060556\n      7.401808\n      4069.404444\n      7.290261\n      4283.154121\n      0.0\n      0.0\n      16.757911\n      4296.276991\n      0.0\n      ...\n      414.323267\n      252.179390\n      1.356136\n      0.915691\n      0.463796\n      2.765039\n      10.077871\n      5.305523\n      2.052854\n      5.151966\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.0\n      10000.0\n      0.000000\n      0.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      -0.109380\n      -0.034582\n      -0.058771\n      0.009083\n      -0.056881\n    \n    \n      25%\n      0.000000\n      0.000000\n      2830.023045\n      0.000000\n      930.878194\n      0.0\n      10000.0\n      0.000000\n      845.155560\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      -0.046295\n      0.027926\n      -0.010496\n      0.016925\n      -0.012222\n    \n    \n      50%\n      0.000000\n      0.000000\n      10000.000000\n      0.000000\n      7269.168758\n      0.0\n      10000.0\n      0.000000\n      7643.373800\n      0.0\n      ...\n      260.504271\n      275.632567\n      1.081721\n      0.083571\n      0.046839\n      -0.023368\n      0.101423\n      0.026591\n      0.029774\n      0.017348\n    \n    \n      75%\n      4.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      485.614406\n      460.402208\n      1.601573\n      0.257531\n      0.093787\n      0.044613\n      1.230531\n      0.316446\n      0.268693\n      0.177322\n    \n    \n      max\n      2149.000000\n      83.000000\n      10000.000000\n      69.000000\n      10000.000000\n      0.0\n      10000.0\n      163.000000\n      10000.000000\n      0.0\n      ...\n      4903.218614\n      1502.074257\n      14.140214\n      6.952491\n      3.678375\n      26.854046\n      66.581024\n      38.867571\n      15.076440\n      38.342712\n    \n  \n\n8 rows × 61 columns\n\n\n\n\nlabels.hist()\n\narray([[<AxesSubplot: title={'center': 'Wealth Index - Scaled'}>]],\n      dtype=object)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-05 13:46:31.789 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-04-05 13:46:31.793 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"kh\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2016\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-kh-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"./{rollout_date}-{COUNTRY_CODE}-single-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_kh_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\n# aoi.explore()  # Uncomment to view data in a map"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\n\n%%time\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-05 14:41:32.864 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for cambodia at /home/jace/.geowrangler/osm/cambodia? True\n2023-04-05 14:41:32.866 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for cambodia being loaded from /home/jace/.geowrangler/osm/cambodia/gis_osm_pois_free_1.shp\n2023-04-05 14:41:37.809 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for cambodia at /home/jace/.geowrangler/osm/cambodia? True\n2023-04-05 14:41:37.809 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for cambodia being loaded from /home/jace/.geowrangler/osm/cambodia/gis_osm_roads_free_1.shp\n2023-04-05 14:41:47.525 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-05 14:41:47.526 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jace/.geowrangler/ookla/processed/2465c710198cce764617e5dcd64daa3d.csv? True\n2023-04-05 14:41:47.527 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 2465c710198cce764617e5dcd64daa3d) found in filesystem. Loading in cache.\n2023-04-05 14:41:48.395 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['2465c710198cce764617e5dcd64daa3d']\n2023-04-05 14:41:48.396 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/jace/.geowrangler/ookla/processed/5e2fba99f739e7c8ef16f333688160db.csv? True\n2023-04-05 14:41:48.397 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 5e2fba99f739e7c8ef16f333688160db) found in filesystem. Loading in cache.\n2023-04-05 14:41:49.792 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/1f70f0c0704210204430993a9b5499ce.tif\n\n\nCPU times: user 1min 9s, sys: 27.3 s, total: 1min 36s\nWall time: 1min 38s"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 20137 entries, 0 to 20136\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          20137 non-null  float64\n 1   atm_count                          20137 non-null  float64\n 2   atm_nearest                        20137 non-null  float64\n 3   bank_count                         20137 non-null  float64\n 4   bank_nearest                       20137 non-null  float64\n 5   bus_station_count                  20137 non-null  float64\n 6   bus_station_nearest                20137 non-null  float64\n 7   cafe_count                         20137 non-null  float64\n 8   cafe_nearest                       20137 non-null  float64\n 9   charging_station_count             20137 non-null  float64\n 10  charging_station_nearest           20137 non-null  float64\n 11  courthouse_count                   20137 non-null  float64\n 12  courthouse_nearest                 20137 non-null  float64\n 13  dentist_count                      20137 non-null  float64\n 14  dentist_nearest                    20137 non-null  float64\n 15  fast_food_count                    20137 non-null  float64\n 16  fast_food_nearest                  20137 non-null  float64\n 17  fire_station_count                 20137 non-null  float64\n 18  fire_station_nearest               20137 non-null  float64\n 19  food_court_count                   20137 non-null  float64\n 20  food_court_nearest                 20137 non-null  float64\n 21  fuel_count                         20137 non-null  float64\n 22  fuel_nearest                       20137 non-null  float64\n 23  hospital_count                     20137 non-null  float64\n 24  hospital_nearest                   20137 non-null  float64\n 25  library_count                      20137 non-null  float64\n 26  library_nearest                    20137 non-null  float64\n 27  marketplace_count                  20137 non-null  float64\n 28  marketplace_nearest                20137 non-null  float64\n 29  pharmacy_count                     20137 non-null  float64\n 30  pharmacy_nearest                   20137 non-null  float64\n 31  police_count                       20137 non-null  float64\n 32  police_nearest                     20137 non-null  float64\n 33  post_box_count                     20137 non-null  float64\n 34  post_box_nearest                   20137 non-null  float64\n 35  post_office_count                  20137 non-null  float64\n 36  post_office_nearest                20137 non-null  float64\n 37  restaurant_count                   20137 non-null  float64\n 38  restaurant_nearest                 20137 non-null  float64\n 39  social_facility_count              20137 non-null  float64\n 40  social_facility_nearest            20137 non-null  float64\n 41  supermarket_count                  20137 non-null  float64\n 42  supermarket_nearest                20137 non-null  float64\n 43  townhall_count                     20137 non-null  float64\n 44  townhall_nearest                   20137 non-null  float64\n 45  road_count                         20137 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean    20137 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean    20137 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean    20137 non-null  float64\n 49  fixed_2019_mean_num_tests_mean     20137 non-null  float64\n 50  fixed_2019_mean_num_devices_mean   20137 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean   20137 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean   20137 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean   20137 non-null  float64\n 54  mobile_2019_mean_num_tests_mean    20137 non-null  float64\n 55  mobile_2019_mean_num_devices_mean  20137 non-null  float64\n 56  avg_rad_min                        20137 non-null  float64\n 57  avg_rad_max                        20137 non-null  float64\n 58  avg_rad_mean                       20137 non-null  float64\n 59  avg_rad_std                        20137 non-null  float64\n 60  avg_rad_median                     20137 non-null  float64\ndtypes: float64(61)\nmemory usage: 10.0 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"]\n).astype(str)\n\n\nSave Output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 22.5 s, sys: 672 ms, total: 23.2 s\nWall time: 23.8 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/3_kh_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted relative wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<Axes: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\nrollout_aoi.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      13223001030111\n      Botum Sakor\n      None\n      KHM-ADM2-3_0_0-B77\n      KHM\n      ADM2\n      1.530576\n      POLYGON ((103.16162 10.81172, 103.16162 10.833...\n      0.132976\n      E\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.064363\n      0.013467\n      -0.025393\n      0.019338\n      -0.025305\n    \n    \n      1\n      13223001013222\n      Botum Sakor\n      None\n      KHM-ADM2-3_0_0-B77\n      KHM\n      ADM2\n      1.530576\n      POLYGON ((103.18359 10.83331, 103.18359 10.854...\n      0.127728\n      E\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.067641\n      0.010784\n      -0.029816\n      0.019521\n      -0.031274\n    \n    \n      2\n      13223001031000\n      Botum Sakor\n      None\n      KHM-ADM2-3_0_0-B77\n      KHM\n      ADM2\n      6.122304\n      POLYGON ((103.18359 10.81172, 103.18359 10.833...\n      0.152541\n      E\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.052187\n      0.015620\n      -0.017331\n      0.021790\n      -0.017005\n    \n    \n      3\n      13223001012210\n      Kiri Sakor\n      None\n      KHM-ADM2-3_0_0-B78\n      KHM\n      ADM2\n      8.403372\n      POLYGON ((103.05176 10.89804, 103.05176 10.919...\n      0.181468\n      C\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.006993\n      0.063116\n      0.020211\n      0.015892\n      0.017605\n    \n    \n      4\n      13223001012211\n      Kiri Sakor\n      None\n      KHM-ADM2-3_0_0-B78\n      KHM\n      ADM2\n      6.302529\n      POLYGON ((103.07373 10.89804, 103.07373 10.919...\n      0.255417\n      B\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      -0.027030\n      0.075026\n      0.014192\n      0.026372\n      0.009149\n    \n  \n\n5 rows × 71 columns\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Wealth Category\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/1_kh_train_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/1_kh_train_model.html",
    "title": "Train model",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport json\nimport pickle\n\nimport fasttreeshap\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom sklearn.model_selection import RepeatedKFold, cross_val_score\n\n%reload_ext autoreload\n%autoreload 2\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n\n\n\nLoad Training Data\n\nCOUNTRY_CODE = \"kh\"\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\n\n# CSV file contains all data\n# Metadata JSON file lists the feature columns and label column\ndata = pd.read_csv(f\"{ROLLOUT_DATE}-training-data.csv\")\nwith open(f\"{ROLLOUT_DATE}-training-data-columns.json\", \"r\") as file:\n    column_metadata = json.load(file)\n\nfeatures = data[column_metadata[\"features\"]]\nlabels = data[column_metadata[\"label\"]]\n\n\n\nCross-Validation\n\n# Set parameters\nCV_K_FOLDS = 5\nCV_NUM_REPEATS = 5\nRANDOM_SEED = 42\n\n\nprint(f\"Performing {CV_K_FOLDS}-fold CV...\")\ncv = RepeatedKFold(\n    n_splits=CV_K_FOLDS,\n    n_repeats=CV_NUM_REPEATS,\n    random_state=RANDOM_SEED,\n)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7fde9a348dd0>\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\n\nprint(\"Cross validation scores are: \", R_cv)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.76378081 0.56180401 0.64007075 0.75678818 0.75580597 0.71565578\n 0.65857361 0.71083648 0.64518727 0.79671673 0.74850064 0.73351956\n 0.72262599 0.70720609 0.68441362 0.69442655 0.7988868  0.67577956\n 0.66425548 0.71572513 0.65445565 0.64187833 0.76528128 0.74395808\n 0.75334561]\nCross validation R^2 mean: 0.71\nCross validation R^2 std: 0.06\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\nmodel_save_path = f\"./{ROLLOUT_DATE}-{COUNTRY_CODE}-single-country-model.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)\n\n\n\nSHAP\n\nexplainer = fasttreeshap.TreeExplainer(model, algorithm=\"auto\", n_jobs=-1)\nshap_values = explainer(features).values\n\n\nshap.summary_plot(\n    shap_values, features, feature_names=features.columns, plot_type=\"bar\"\n)\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"kh\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-03-12 17:36:21.223 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/cambodia_14_ADM2_populated_admin_grids.geojson\n2023-03-12 17:36:21.230 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region cambodia and admin level ADM2\n2023-03-12 17:36:21.230 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region cambodia and admin level ADM2\n2023-03-12 17:36:21.849 | INFO     | povertymapping.geoboundaries:get_geoboundaries:41 - Downloading geoboundaries for KHM at admin level ADM2 at https://www.geoboundaries.org/gbRequest.html?ISO=KHM&ADM=ADM2\n2023-03-12 17:36:23.378 | INFO     | povertymapping.geoboundaries:get_geoboundaries:50 - Download path for KHM at admin level ADM2 found at https://geoboundaries.org/data/geoBoundaries-3_0_0/KHM/ADM2/geoBoundaries-3_0_0-KHM-ADM2.geojson\n\n\n2023-03-12 17:36:54.238 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region cambodia and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n\n    \n      \n      12.50% [1/8 00:00<00:00]\n    \n    \n\n\n2023-03-12 17:37:45.227 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 32580 grids for region cambodia and admin level ADM2 at quadkey level 14\n2023-03-12 17:37:45.236 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-03-12 17:37:45.236 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-03-12 17:38:11.135 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting cambodia population data for filtering grids\n\n\n2023-03-12 17:39:42.662 | INFO     | povertymapping.hdx:get_hdx_file:201 - HDX Data: Unzipping the zip file /home/jace/.cache/geowrangler/hdx/khm_general_2020_geotiff.zip...\n2023-03-12 17:40:06.724 | INFO     | povertymapping.hdx:get_hdx_file:211 - HDX Data: Successfully downloaded and cached for cambodia at /home/jace/.cache/geowrangler/hdx/khm_general_2020_geotiff.zip!\n2023-03-12 17:40:06.726 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-03-12 17:40:06.728 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 32580 grids for file size 3732653178\n2023-03-12 17:54:06.391 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-03-12 17:54:06.429 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 20137\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 20137 entries, 3 to 32579\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    20137 non-null  geometry\n 1   quadkey     20137 non-null  object  \n 2   shapeName   20137 non-null  object  \n 3   shapeISO    20137 non-null  object  \n 4   shapeID     20137 non-null  object  \n 5   shapeGroup  20137 non-null  object  \n 6   shapeType   20137 non-null  object  \n 7   pop_count   20137 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 1.4+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      3\n      POLYGON ((103.16162 10.81172, 103.16162 10.833...\n      13223001030111\n      Botum Sakor\n      None\n      KHM-ADM2-3_0_0-B77\n      KHM\n      ADM2\n      1.530576\n    \n    \n      4\n      POLYGON ((103.18359 10.83331, 103.18359 10.854...\n      13223001013222\n      Botum Sakor\n      None\n      KHM-ADM2-3_0_0-B77\n      KHM\n      ADM2\n      1.530576\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-single-country-rollouts/kh/2_kh_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/1_ph_train_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/1_ph_train_model.html",
    "title": "Train model",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport json\nimport pickle\n\nimport fasttreeshap\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom sklearn.model_selection import RepeatedKFold, cross_val_score\n\n%reload_ext autoreload\n%autoreload 2\n\nIProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n\n\n\nLoad Training Data\n\nCOUNTRY_CODE = \"ph\"\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\n\n# CSV file contains all data\n# Metadata JSON file lists the feature columns and label column\ndata = pd.read_csv(f\"{ROLLOUT_DATE}-training-data.csv\")\nwith open(f\"{ROLLOUT_DATE}-training-data-columns.json\", \"r\") as file:\n    column_metadata = json.load(file)\n\nfeatures = data[column_metadata[\"features\"]]\nlabels = data[column_metadata[\"label\"]]\n\n\n\nCross-Validation\n\n# Set parameters\nCV_K_FOLDS = 5\nCV_NUM_REPEATS = 5\nRANDOM_SEED = 42\n\n\nprint(f\"Performing {CV_K_FOLDS}-fold CV...\")\ncv = RepeatedKFold(\n    n_splits=CV_K_FOLDS,\n    n_repeats=CV_NUM_REPEATS,\n    random_state=RANDOM_SEED,\n)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7ff647383970>\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\n\nprint(\"Cross validation scores are: \", R_cv)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.55682521 0.63091503 0.59480566 0.61487913 0.58103858 0.58468717\n 0.6176015  0.55499181 0.56994707 0.63015257 0.64765313 0.61932703\n 0.59837317 0.54697645 0.54584293 0.53601267 0.59513112 0.6302872\n 0.55665255 0.59870962 0.58082884 0.5416791  0.62810948 0.63953924\n 0.5935612 ]\nCross validation R^2 mean: 0.59\nCross validation R^2 std: 0.03\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel = RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED, verbose=0)\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\nmodel_save_path = f\"./{ROLLOUT_DATE}-{COUNTRY_CODE}-single-country-model.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)\n\n\n\nSHAP\n\nexplainer = fasttreeshap.TreeExplainer(model, algorithm=\"auto\", n_jobs=-1)\nshap_values = explainer(features).values\n\n\nshap.summary_plot(\n    shap_values, features, feature_names=features.columns, plot_type=\"bar\"\n)\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html",
    "title": "Generate training data",
    "section": "",
    "text": "import os\nimport sys\n\nsys.path.append(\"../../../\")\n\nimport getpass\nimport json\nfrom pathlib import Path\n\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom povertymapping import dhs, feature_engineering, nightlights, settings\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#set-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#set-parameters",
    "title": "Generate training data",
    "section": "Set Parameters",
    "text": "Set Parameters\n\n# These configure some params for the feature engineering steps.\nCOUNTRY_CODE = \"ph\"\nCOUNTRY_OSM = \"philippines\"\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2017\n\n# You need to download these datasets from the DHS website before running this notebook.\nDHS_HOUSEHOLD_DTA_PATH = Path(settings.DATA_DIR / \"dhs/ph/PHHR71DT/PHHR71FL.DTA\")\nDHS_GEOGRAPHIC_SHP_PATH = Path(settings.DATA_DIR / \"dhs/ph/PHGE71FL/PHGE71FL.shp\")\n\n# Indicate name of column from dhs data that will be used as the label for training\nDHS_LABEL_COL = \"Wealth Index\"\nOUTPUT_LABEL_COL = \"Wealth Index - Scaled\"\n\n# Tile size for the area around a DHS household cluster to generate features for.\n# We set this to 2.4km to match target rollout size of Bing Tile Zoom Level 14 (~2.4km)\nTILE_SIZE_KM = 2.4\n\n# For convenience, consider the rollout version as the date of the root notebook folder.\nROLLOUT_DATE = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#set-up-eog-api-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#set-up-eog-api-access",
    "title": "Generate training data",
    "section": "Set up EOG API Access",
    "text": "Set up EOG API Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-20 14:36:12.735 | INFO     | povertymapping.nightlights:get_eog_access_token:42 - Saving access_token to /home/alron/.eog_creds/eog_access_token.txt\n2023-04-20 14:36:12.736 | INFO     | povertymapping.nightlights:get_eog_access_token:50 - Adding access token to environment var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#load-dhs-data",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#load-dhs-data",
    "title": "Generate training data",
    "section": "Load DHS Data",
    "text": "Load DHS Data\n\ndhs_gdf = dhs.generate_dhs_cluster_level_data(\n    DHS_HOUSEHOLD_DTA_PATH,\n    DHS_GEOGRAPHIC_SHP_PATH,\n    col_rename_config=COUNTRY_CODE,\n    convert_geoms_to_bbox=True,\n    bbox_size_km=TILE_SIZE_KM,\n).reset_index(drop=True)\n\n\n# Uncomment to view interactive map\n# dhs_gdf.explore()\n\n\n# Inspect the generated data\ndhs_gdf.head(3)\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.674652\n      122.109807\n      9999.0\n      10.0\n      WGS84\n      POLYGON ((122.09894 6.68544, 122.12067 6.68544...\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.662256\n      122.132027\n      9999.0\n      5.0\n      WGS84\n      POLYGON ((122.12116 6.67305, 122.14289 6.67305...\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.621822\n      122.179496\n      9999.0\n      47.0\n      WGS84\n      POLYGON ((122.16863 6.63261, 122.19036 6.63261...\n    \n  \n\n3 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/0_generate_training_data.html#feature-engineering-and-label-pre-processing",
    "title": "Generate training data",
    "section": "Feature Engineering and Label Pre-processing",
    "text": "Feature Engineering and Label Pre-processing\nIf this is your first time running this notebook for this specific country, expect a long runtime for the following cell as it will download and cache the required datasets. It will then process the relevant features for each area specified. On subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\nscaler = MinMaxScaler\ncountry_data = dhs_gdf.copy()\n\n# Create labels dataframe by scaling the specified dhs_label_col (ex. Wealth Index)\nlabels = scaler().fit_transform(country_data[[DHS_LABEL_COL]])\nlabels = pd.DataFrame(labels, columns=[OUTPUT_LABEL_COL])\n\n# Create features dataframe using generate_features module\nfeatures = feature_engineering.generate_features(\n    country_data,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-20 14:36:22.561 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for philippines at /home/alron/.geowrangler/osm/philippines? True\n2023-04-20 14:36:22.562 | DEBUG    | povertymapping.osm:load_pois:160 - OSM POIs for philippines being loaded from /home/alron/.geowrangler/osm/philippines/gis_osm_pois_free_1.shp\n2023-04-20 14:36:28.640 | INFO     | povertymapping.osm:download_osm_country_data:198 - OSM Data: Cached data available for philippines at /home/alron/.geowrangler/osm/philippines? True\n2023-04-20 14:36:28.642 | DEBUG    | povertymapping.osm:load_roads:179 - OSM Roads for philippines being loaded from /home/alron/.geowrangler/osm/philippines/gis_osm_roads_free_1.shp\n2023-04-20 14:37:18.654 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-20 14:37:18.655 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/34fe4bfac0d067b5956eadec4fbd2898.csv? True\n2023-04-20 14:37:18.656 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: 34fe4bfac0d067b5956eadec4fbd2898) found in filesystem. Loading in cache.\n2023-04-20 14:37:19.201 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['34fe4bfac0d067b5956eadec4fbd2898']\n2023-04-20 14:37:19.202 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/de73d531d4abc99a42bd40916045c924.csv? True\n2023-04-20 14:37:19.202 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: de73d531d4abc99a42bd40916045c924) found in filesystem. Loading in cache.\n2023-04-20 14:37:19.721 | INFO     | povertymapping.nightlights:get_clipped_raster:451 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nCPU times: user 1min, sys: 1.3 s, total: 1min 1s\nWall time: 1min 1s\n\n\n\nfeatures.describe()\n\n\n\n\n\n  \n    \n      \n      poi_count\n      atm_count\n      atm_nearest\n      bank_count\n      bank_nearest\n      bus_station_count\n      bus_station_nearest\n      cafe_count\n      cafe_nearest\n      charging_station_count\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      count\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.0\n      1213.0\n      1213.000000\n      1213.000000\n      1213.0\n      ...\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n      1213.000000\n    \n    \n      mean\n      52.967024\n      0.972795\n      5735.197499\n      3.726298\n      4686.422233\n      0.0\n      10000.0\n      1.970322\n      5247.537805\n      0.0\n      ...\n      343.359566\n      169.274488\n      1.632537\n      0.494977\n      0.257040\n      2.340774\n      8.685555\n      4.622563\n      1.646603\n      4.315806\n    \n    \n      std\n      137.508580\n      3.200158\n      4346.133519\n      11.960163\n      4181.171633\n      0.0\n      0.0\n      7.063417\n      4384.714860\n      0.0\n      ...\n      381.795062\n      179.366402\n      2.002719\n      1.295145\n      0.682840\n      5.482187\n      17.124105\n      9.542645\n      3.248623\n      9.196962\n    \n    \n      min\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.0\n      10000.0\n      0.000000\n      0.000000\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.081756\n      0.210481\n      0.169391\n      0.009658\n      0.175896\n    \n    \n      25%\n      0.000000\n      0.000000\n      587.557849\n      0.000000\n      51.000044\n      0.0\n      10000.0\n      0.000000\n      111.571863\n      0.0\n      ...\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.205884\n      0.337667\n      0.261362\n      0.029676\n      0.253192\n    \n    \n      50%\n      1.000000\n      0.000000\n      7361.969393\n      0.000000\n      4011.959088\n      0.0\n      10000.0\n      0.000000\n      5368.749146\n      0.0\n      ...\n      285.926210\n      163.988185\n      1.558054\n      0.080462\n      0.051018\n      0.262494\n      0.785734\n      0.425867\n      0.137144\n      0.370446\n    \n    \n      75%\n      23.000000\n      0.000000\n      10000.000000\n      0.000000\n      10000.000000\n      0.0\n      10000.0\n      0.000000\n      10000.000000\n      0.0\n      ...\n      558.000139\n      281.951377\n      2.405904\n      0.291402\n      0.134521\n      0.886556\n      8.866356\n      3.466606\n      2.032163\n      2.689378\n    \n    \n      max\n      1216.000000\n      32.000000\n      10000.000000\n      129.000000\n      10000.000000\n      0.0\n      10000.0\n      76.000000\n      10000.000000\n      0.0\n      ...\n      3194.470885\n      1894.587201\n      42.351182\n      12.543064\n      6.951089\n      37.362309\n      137.765625\n      65.950049\n      25.724300\n      60.359570\n    \n  \n\n8 rows × 61 columns\n\n\n\n\nlabels.hist()\n\narray([[<AxesSubplot: title={'center': 'Wealth Index - Scaled'}>]],\n      dtype=object)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html",
    "title": "Generate rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#set-country-specific-parameters",
    "title": "Generate rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"ph\"\nREGION = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nADMIN_LVL = \"ADM2\"\nZOOM_LEVEL = 14"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#generate-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#generate-grids",
    "title": "Generate rollout grids",
    "section": "Generate Grids",
    "text": "Generate Grids\n\nadmin_grids_gdf = get_region_filtered_bingtile_grids(\n    REGION, admin_lvl=ADMIN_LVL, quadkey_lvl=ZOOM_LEVEL, use_cache=True\n)\n\n2023-03-12 17:30:19.723 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:264 - No cached grids file found. Generating grids file :/home/jace/.cache/geowrangler/quadkey_grids/philippines_14_ADM2_populated_admin_grids.geojson\n2023-03-12 17:30:19.726 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region philippines and admin level ADM2\n2023-03-12 17:30:19.726 | DEBUG    | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:281 - Loading boundaries for region philippines and admin level ADM2\n2023-03-12 17:30:20.399 | INFO     | povertymapping.geoboundaries:get_geoboundaries:41 - Downloading geoboundaries for PHL at admin level ADM2 at https://www.geoboundaries.org/gbRequest.html?ISO=PHL&ADM=ADM2\n2023-03-12 17:30:22.328 | INFO     | povertymapping.geoboundaries:get_geoboundaries:50 - Download path for PHL at admin level ADM2 found at https://geoboundaries.org/data/geoBoundaries-3_0_0/PHL/ADM2/geoBoundaries-3_0_0-PHL-ADM2.geojson\n\n\n2023-03-12 17:32:13.993 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:287 - Generating grids for region philippines and admin level ADM2 at quadkey level 14\n\n\n\n\n\n\n2023-03-12 17:37:19.068 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:293 - Generated 59402 grids for region philippines and admin level ADM2 at quadkey level 14\n2023-03-12 17:37:19.083 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n2023-03-12 17:37:19.083 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:299 - Assigning grids to admin areas using metric crs epsg:3857\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/geodataframe.py:2196: UserWarning: `keep_geom_type=True` in overlay resulted in 6 dropped geometries of different geometry types than df1 has. Set `keep_geom_type=False` to retain all geometries\n  return geopandas.overlay(\n2023-03-12 17:41:24.322 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:305 - Getting philippines population data for filtering grids\n\n\n2023-03-12 17:46:26.820 | INFO     | povertymapping.hdx:get_hdx_file:201 - HDX Data: Unzipping the zip file /home/jace/.cache/geowrangler/hdx/phl_general_2020_geotiff.zip...\n2023-03-12 17:48:20.304 | INFO     | povertymapping.hdx:get_hdx_file:211 - HDX Data: Successfully downloaded and cached for philippines at /home/jace/.cache/geowrangler/hdx/phl_general_2020_geotiff.zip!\n2023-03-12 17:48:20.306 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:307 - Computing population zonal stats per grid\n2023-03-12 17:48:20.309 | INFO     | povertymapping.rollout_grids:compute_raster_stats:98 - Creating raster zonal stats for 59402 grids for file size 19389139724\n2023-03-12 18:19:54.212 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:318 - Filtering unpopulated grids based on population data\n2023-03-12 18:19:54.257 | INFO     | povertymapping.rollout_grids:get_region_filtered_bingtile_grids:321 - Filtered admin grid count: 46483\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/io/file.py:362: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  pd.Int64Index,"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#explore-populated-grids",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#explore-populated-grids",
    "title": "Generate rollout grids",
    "section": "Explore Populated Grids",
    "text": "Explore Populated Grids\n\nadmin_grids_gdf.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 46483 entries, 28 to 59400\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   geometry    46483 non-null  geometry\n 1   quadkey     46483 non-null  object  \n 2   shapeName   46483 non-null  object  \n 3   shapeISO    46483 non-null  object  \n 4   shapeID     46483 non-null  object  \n 5   shapeGroup  46483 non-null  object  \n 6   shapeType   46483 non-null  object  \n 7   pop_count   46483 non-null  float64 \ndtypes: float64(1), geometry(1), object(6)\nmemory usage: 3.2+ MB\n\n\n\nadmin_grids_gdf.head(2)\n\n\n\n\n\n  \n    \n      \n      geometry\n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n    \n  \n  \n    \n      28\n      POLYGON ((118.47656 6.94824, 118.47656 6.97005...\n      13232122010020\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      11.677980\n    \n    \n      30\n      POLYGON ((118.41064 7.01367, 118.41064 7.03548...\n      13232120223323\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      317.069037\n    \n  \n\n\n\n\n\n# Uncomment to view the generated grid on an interactive map\n# admin_grids_gdf.explore()"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#save-to-file",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/2_ph_generate_grids.html#save-to-file",
    "title": "Generate rollout grids",
    "section": "Save to file",
    "text": "Save to file\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\ngrid_save_path = f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\"\nadmin_grids_gdf.to_file(grid_save_path, driver=\"GeoJSON\", index=False)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html",
    "title": "Predict on rollout grids",
    "section": "",
    "text": "%matplotlib inline\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-up-data-access",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-up-data-access",
    "title": "Predict on rollout grids",
    "section": "Set up Data Access",
    "text": "Set up Data Access\nThe following cell will prompt you to enter your EOG username and password. See this page to learn how to set-up your EOG account.\n\n# Log-in using EOG credentials\nusername = os.environ.get(\"EOG_USER\", None)\nusername = username if username is not None else input(\"Username?\")\npassword = os.environ.get(\"EOG_PASSWORD\", None)\npassword = password if password is not None else getpass.getpass(\"Password?\")\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username, password, save_token=True)\n\n2023-04-14 15:10:22.477 | INFO     | povertymapping.nightlights:get_eog_access_token:43 - Loaded access_token from /home/alron/.eog_creds/eog_access_token.txt"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-country-specific-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-country-specific-parameters",
    "title": "Predict on rollout grids",
    "section": "Set country-specific parameters",
    "text": "Set country-specific parameters\n\nCOUNTRY_CODE = \"ph\"\nCOUNTRY_OSM = get_region_name(COUNTRY_CODE, code=\"alpha-2\").lower()\nOOKLA_YEAR = 2019\nNIGHTLIGHTS_YEAR = 2016\n\nrollout_date = \"-\".join(os.getcwd().split(\"/\")[-2].split(\"-\")[:3])\nrollout_grids_path = Path(f\"./{rollout_date}-{COUNTRY_CODE}-rollout-grids.geojson\")\nrollout_grids_path\n\nPath('2023-02-21-ph-rollout-grids.geojson')"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-model-parameters",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#set-model-parameters",
    "title": "Predict on rollout grids",
    "section": "Set Model Parameters",
    "text": "Set Model Parameters\n\n# Model to use for prediction\nMODEL_SAVE_PATH = Path(f\"./{rollout_date}-{COUNTRY_CODE}-single-country-model.pkl\")"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#load-country-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#load-country-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Load Country Rollout AOI",
    "text": "Load Country Rollout AOI\nThe rollout area of interest is split into 2.4km grid tiles (zoom level 14), matching the areas used during model training. The grids are also filtered to only include populated areas based on Meta’s High Resolution Settlement Layer (HRSL) data.\nRefer to the previous notebook 2_ph_generate_grids.ipynb for documentation on generating this grid.\n\naoi = gpd.read_file(rollout_grids_path)\n# aoi.explore()  # Uncomment to view data in a map"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#generate-features-for-rollout-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#generate-features-for-rollout-aoi",
    "title": "Predict on rollout grids",
    "section": "Generate Features For Rollout AOI",
    "text": "Generate Features For Rollout AOI\n\n%%time\nrollout_aoi = aoi.copy()\n\n# Create features dataframe using generate_features module\nfeatures = generate_features(\n    rollout_aoi,\n    country_osm=COUNTRY_OSM,\n    ookla_year=OOKLA_YEAR,\n    nightlights_year=NIGHTLIGHTS_YEAR,\n    scale=False,\n    features_only=True,\n)\n\n2023-04-14 15:10:26.504 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for philippines at /home/alron/.geowrangler/osm/philippines? True\n2023-04-14 15:10:26.505 | DEBUG    | povertymapping.osm:load_pois:161 - OSM POIs for philippines being loaded from /home/alron/.geowrangler/osm/philippines/gis_osm_pois_free_1.shp\n2023-04-14 15:10:39.945 | INFO     | povertymapping.osm:download_osm_country_data:199 - OSM Data: Cached data available for philippines at /home/alron/.geowrangler/osm/philippines? True\n2023-04-14 15:10:39.946 | DEBUG    | povertymapping.osm:load_roads:180 - OSM Roads for philippines being loaded from /home/alron/.geowrangler/osm/philippines/gis_osm_roads_free_1.shp\n2023-04-14 15:11:31.153 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: []\n2023-04-14 15:11:31.154 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/c2f7493d8f417358a243d5a5d6534e91.csv? True\n2023-04-14 15:11:31.155 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, fixed 2019 (key: c2f7493d8f417358a243d5a5d6534e91) found in filesystem. Loading in cache.\n2023-04-14 15:11:36.496 | DEBUG    | povertymapping.ookla:load_type_year_data:79 - Contents of data cache: ['c2f7493d8f417358a243d5a5d6534e91']\n2023-04-14 15:11:36.497 | INFO     | povertymapping.ookla:load_type_year_data:94 - Cached data available at /home/alron/.geowrangler/ookla/processed/2fb42a1814adb4d0b74fd86a06791aab.csv? True\n2023-04-14 15:11:36.498 | DEBUG    | povertymapping.ookla:load_type_year_data:99 - Processed Ookla data for aoi, mobile 2019 (key: 2fb42a1814adb4d0b74fd86a06791aab) found in filesystem. Loading in cache.\n2023-04-14 15:11:39.928 | INFO     | povertymapping.nightlights:get_clipped_raster:463 - Retrieving clipped raster file /home/alron/.geowrangler/nightlights/clip/8a78adbc62c18180bdcb716a2ebfc3a3.tif\n\n\nCPU times: user 3min 16s, sys: 7 s, total: 3min 23s\nWall time: 3min 23s"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#inspect-the-generated-features",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#inspect-the-generated-features",
    "title": "Predict on rollout grids",
    "section": "Inspect the generated features",
    "text": "Inspect the generated features\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 46483 entries, 0 to 46482\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          46483 non-null  float64\n 1   atm_count                          46483 non-null  float64\n 2   atm_nearest                        46483 non-null  float64\n 3   bank_count                         46483 non-null  float64\n 4   bank_nearest                       46483 non-null  float64\n 5   bus_station_count                  46483 non-null  float64\n 6   bus_station_nearest                46483 non-null  float64\n 7   cafe_count                         46483 non-null  float64\n 8   cafe_nearest                       46483 non-null  float64\n 9   charging_station_count             46483 non-null  float64\n 10  charging_station_nearest           46483 non-null  float64\n 11  courthouse_count                   46483 non-null  float64\n 12  courthouse_nearest                 46483 non-null  float64\n 13  dentist_count                      46483 non-null  float64\n 14  dentist_nearest                    46483 non-null  float64\n 15  fast_food_count                    46483 non-null  float64\n 16  fast_food_nearest                  46483 non-null  float64\n 17  fire_station_count                 46483 non-null  float64\n 18  fire_station_nearest               46483 non-null  float64\n 19  food_court_count                   46483 non-null  float64\n 20  food_court_nearest                 46483 non-null  float64\n 21  fuel_count                         46483 non-null  float64\n 22  fuel_nearest                       46483 non-null  float64\n 23  hospital_count                     46483 non-null  float64\n 24  hospital_nearest                   46483 non-null  float64\n 25  library_count                      46483 non-null  float64\n 26  library_nearest                    46483 non-null  float64\n 27  marketplace_count                  46483 non-null  float64\n 28  marketplace_nearest                46483 non-null  float64\n 29  pharmacy_count                     46483 non-null  float64\n 30  pharmacy_nearest                   46483 non-null  float64\n 31  police_count                       46483 non-null  float64\n 32  police_nearest                     46483 non-null  float64\n 33  post_box_count                     46483 non-null  float64\n 34  post_box_nearest                   46483 non-null  float64\n 35  post_office_count                  46483 non-null  float64\n 36  post_office_nearest                46483 non-null  float64\n 37  restaurant_count                   46483 non-null  float64\n 38  restaurant_nearest                 46483 non-null  float64\n 39  social_facility_count              46483 non-null  float64\n 40  social_facility_nearest            46483 non-null  float64\n 41  supermarket_count                  46483 non-null  float64\n 42  supermarket_nearest                46483 non-null  float64\n 43  townhall_count                     46483 non-null  float64\n 44  townhall_nearest                   46483 non-null  float64\n 45  road_count                         46483 non-null  float64\n 46  fixed_2019_mean_avg_d_kbps_mean    46483 non-null  float64\n 47  fixed_2019_mean_avg_u_kbps_mean    46483 non-null  float64\n 48  fixed_2019_mean_avg_lat_ms_mean    46483 non-null  float64\n 49  fixed_2019_mean_num_tests_mean     46483 non-null  float64\n 50  fixed_2019_mean_num_devices_mean   46483 non-null  float64\n 51  mobile_2019_mean_avg_d_kbps_mean   46483 non-null  float64\n 52  mobile_2019_mean_avg_u_kbps_mean   46483 non-null  float64\n 53  mobile_2019_mean_avg_lat_ms_mean   46483 non-null  float64\n 54  mobile_2019_mean_num_tests_mean    46483 non-null  float64\n 55  mobile_2019_mean_num_devices_mean  46483 non-null  float64\n 56  avg_rad_min                        46483 non-null  float64\n 57  avg_rad_max                        46483 non-null  float64\n 58  avg_rad_mean                       46483 non-null  float64\n 59  avg_rad_std                        46483 non-null  float64\n 60  avg_rad_median                     46483 non-null  float64\ndtypes: float64(61)\nmemory usage: 23.0 MB"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#run-model-on-aoi",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#run-model-on-aoi",
    "title": "Predict on rollout grids",
    "section": "Run Model on AOI",
    "text": "Run Model on AOI\n\nLoad Model\n\nwith open(MODEL_SAVE_PATH, \"rb\") as f:\n    model = pickle.load(f)\n\n\n\nMake Predictions\n\nrollout_aoi[\"Predicted Relative Wealth Index\"] = model.predict(features.values)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#binning-predictions-into-wealth-categories",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#binning-predictions-into-wealth-categories",
    "title": "Predict on rollout grids",
    "section": "Binning predictions into wealth categories",
    "text": "Binning predictions into wealth categories\nAfterwards, we label the predicted relative wealth by binning them into 5 categories: A, B, C, D, and E where A is the highest and E is the lowest.\nWe can create these wealth categories by splitting the output Predicted Relative Wealth Index distribution into 5 equally sized quintiles, i.e. every 20th percentile.\nThis categorization may be modified to suit the context of the target country.\n\n# Simple quintile approach\nrollout_aoi[\"Predicted Wealth Category (quintile)\"] = categorize_wealth_index(\n    rollout_aoi[\"Predicted Relative Wealth Index\"], split_quantile=False\n).astype(str)\n\n\nFormat final Dataframe: Join features and predictions\n\n\nSave Output\n\n%%time\nrollout_aoi.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)\n\nCPU times: user 10.5 s, sys: 210 ms, total: 10.7 s\nWall time: 10.7 s\n\n\n\n# Join back raw features and save\nrollout_output_with_features = rollout_aoi.join(features)\nrollout_output_with_features.to_file(\n    f\"{rollout_date}-{COUNTRY_CODE}-rollout-output-with-features.geojson\",\n    driver=\"GeoJSON\",\n    index=False,\n)"
  },
  {
    "objectID": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#visualizations",
    "href": "notebooks/2023-02-21-single-country-rollouts/ph/3_ph_rollout_model.html#visualizations",
    "title": "Predict on rollout grids",
    "section": "Visualizations",
    "text": "Visualizations\n\nInspect predicted relative wealth index and output dataframe\n\nrollout_aoi[[\"Predicted Relative Wealth Index\"]].hist()\n\narray([[<AxesSubplot: title={'center': 'Predicted Relative Wealth Index'}>]],\n      dtype=object)\n\n\n\n\n\n\nrollout_aoi.head()\n\n\n\n\n\n  \n    \n      \n      quadkey\n      shapeName\n      shapeISO\n      shapeID\n      shapeGroup\n      shapeType\n      pop_count\n      geometry\n      Predicted Relative Wealth Index\n      Predicted Wealth Category (quintile)\n    \n  \n  \n    \n      0\n      13232122010020\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      11.677980\n      POLYGON ((118.47656 6.94824, 118.47656 6.97005...\n      0.135210\n      E\n    \n    \n      1\n      13232120223323\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      317.069037\n      POLYGON ((118.41064 7.01367, 118.41064 7.03548...\n      0.157153\n      E\n    \n    \n      2\n      13232122001101\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      253.081800\n      POLYGON ((118.41064 6.99186, 118.41064 7.01367...\n      0.143458\n      E\n    \n    \n      3\n      13232122001103\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      27.250587\n      POLYGON ((118.41064 6.97005, 118.41064 6.99186...\n      0.145540\n      E\n    \n    \n      4\n      13232120223332\n      Tawi-Tawi\n      None\n      PHL-ADM2-3_0_0-B77\n      PHL\n      ADM2\n      763.870501\n      POLYGON ((118.43262 7.01367, 118.43262 7.03548...\n      0.159144\n      E\n    \n  \n\n\n\n\n\n\nCreate Static Maps\n\nPlot Predicted Relative Wealth Index\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Relative Wealth Index\",\n    figsize=(20, 8),\n    cmap=\"viridis\",\n    legend=True,\n    legend_kwds={\"shrink\": 0.8},\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Index\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-index.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\nPlot Predicted Relative Wealth Index Category\n\nplt.cla()\nplt.clf()\nrollout_aoi_plot = rollout_aoi.to_crs(\"EPSG:3857\")\nax = rollout_aoi_plot.plot(\n    \"Predicted Wealth Category (quintile)\",\n    figsize=(20, 8),\n    cmap=\"viridis_r\",\n    legend=True,\n)\ncx.add_basemap(ax, source=cx.providers.OpenStreetMap.Mapnik)\nax.set_axis_off()\nplt.title(\"Predicted Relative Wealth Quintile\")\nplt.tight_layout()\nplt.savefig(f\"{rollout_date}-{COUNTRY_CODE}-predicted-wealth-bin.png\")\nplt.show()\n\n<Figure size 640x480 with 0 Axes>\n\n\n\n\n\n\n\n\nCreate an Interactive Map\n\ncols_of_interest = [\n    \"quadkey\",\n    \"shapeName\",\n    \"shapeGroup\",\n    \"pop_count\",\n    \"avg_rad_mean\",\n    \"mobile_2019_mean_avg_d_kbps_mean\",\n    \"fixed_2019_mean_avg_d_kbps_mean\",\n    \"poi_count\",\n    \"road_count\",\n    \"Predicted Relative Wealth Index\",\n    \"Predicted Wealth Category (quintile)\",\n]\n\n# Warning: This can be a bit laggy due to the large amount of tiles being visualized\n\n# Uncomment the ff if you want to viz the raw wealth predictions\n# rollout_aoi.explore(column='Predicted Relative Wealth Index', tooltip=cols_of_interest, cmap=\"viridis\")\n\n# Uncomment the ff if you want to view the quintiles\n# rollout_aoi.explore(column='Predicted Wealth Category (quintile)', tooltip=cols_of_interest, cmap=\"viridis_r\")\n\nAlternatively, you may also try to visualize this interactively in Kepler by uploading the rollout output geojson file."
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "",
    "text": "import sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.3-CAPI-1.16.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#load-target-country-from-dhs-data",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#load-target-country-from-dhs-data",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Load Target Country From DHS data",
    "text": "Load Target Country From DHS data\n\n# Set country-specific variables\ncountry_osm = 'philippines'\nookla_year = 2019\nnightlights_year = 2017\n\n\ndhs_household_dta_path = settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\"\ndhs_geographic_shp_path = settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\ndhs_gdf = generate_dhs_cluster_level_data(\n    dhs_household_dta_path, \n    dhs_geographic_shp_path, \n    col_rename_config=\"ph\",\n    convert_geoms_to_bbox=True,\n    bbox_size_km=2.4\n).reset_index(drop=True)\ndhs_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ndhs_gdf.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.674652\n      122.109807\n      9999.0\n      10.0\n      WGS84\n      POLYGON ((122.09894 6.68544, 122.12067 6.68544...\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.662256\n      122.132027\n      9999.0\n      5.0\n      WGS84\n      POLYGON ((122.12116 6.67305, 122.14289 6.67305...\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.621822\n      122.179496\n      9999.0\n      47.0\n      WGS84\n      POLYGON ((122.16863 6.63261, 122.19036 6.63261...\n    \n    \n      3\n      4\n      -54952.666667\n      PH201700000004\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.485298\n      122.137965\n      9999.0\n      366.0\n      WGS84\n      POLYGON ((122.12710 6.49609, 122.14883 6.49609...\n    \n    \n      4\n      6\n      -80701.695652\n      PH201700000006\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      15.0\n      ARMM\n      GPS\n      R\n      6.629457\n      121.916094\n      9999.0\n      151.0\n      WGS84\n      POLYGON ((121.90523 6.64025, 121.92696 6.64025...\n    \n  \n\n5 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#set-up-data-access",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#set-up-data-access",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-01-31 14:01:05.870 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-01-31 14:01:05.873 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#generate-base-features",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#generate-base-features",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Generate Base Features",
    "text": "Generate Base Features\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the ff. datasets from the internet.\n\nOpenStreetMap Data from Geofabrik\nOokla Internet Speed Data\nVIIRS nighttime lights data from NASA EOG\n\nOn subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\ncountry_data = dhs_gdf.copy()\n\n# Add in OSM features\ncountry_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\ncountry_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n# Add in Ookla features\ncountry_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\ncountry_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n# Add in the nighttime lights features\ncountry_data = nightlights.generate_nightlights_feature(country_data, '2017') \n\n2023-01-31 14:01:06.394 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines? True\n2023-01-31 14:01:06.395 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for philippines being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines/gis_osm_pois_free_1.shp\n2023-01-31 14:01:42.655 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines? True\n2023-01-31 14:01:42.659 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for philippines being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines/gis_osm_roads_free_1.shp\n2023-01-31 14:04:49.021 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-01-31 14:04:50.124 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/2f858b388182d50703550c8ef9d321df.csv? True\n2023-01-31 14:04:50.126 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in filesystem. Loading in cache.\n2023-01-31 14:04:51.440 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df']\n2023-01-31 14:04:51.442 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/5a45dc45080a935951e6c2b6c0052b13.csv? True\n2023-01-31 14:04:51.443 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in filesystem. Loading in cache.\n2023-01-31 14:04:52.525 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nCPU times: user 3min 19s, sys: 24.5 s, total: 3min 43s\nWall time: 3min 53s\n\n\n\nInspect the combined target country data\n\ncountry_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 1213 entries, 0 to 1212\nData columns (total 83 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           1213 non-null   int64   \n 1   Wealth Index                       1213 non-null   float64 \n 2   DHSID                              1213 non-null   object  \n 3   DHSCC                              1213 non-null   object  \n 4   DHSYEAR                            1213 non-null   float64 \n 5   CCFIPS                             1213 non-null   object  \n 6   ADM1FIPS                           1213 non-null   object  \n 7   ADM1FIPSNA                         1213 non-null   object  \n 8   ADM1SALBNA                         1213 non-null   object  \n 9   ADM1SALBCO                         1213 non-null   object  \n 10  ADM1DHS                            1213 non-null   float64 \n 11  ADM1NAME                           1213 non-null   object  \n 12  DHSREGCO                           1213 non-null   float64 \n 13  DHSREGNA                           1213 non-null   object  \n 14  SOURCE                             1213 non-null   object  \n 15  URBAN_RURA                         1213 non-null   object  \n 16  LATNUM                             1213 non-null   float64 \n 17  LONGNUM                            1213 non-null   float64 \n 18  ALT_GPS                            1213 non-null   float64 \n 19  ALT_DEM                            1213 non-null   float64 \n 20  DATUM                              1213 non-null   object  \n 21  geometry                           1213 non-null   geometry\n 22  poi_count                          1213 non-null   float64 \n 23  atm_count                          1213 non-null   float64 \n 24  atm_nearest                        1213 non-null   float64 \n 25  bank_count                         1213 non-null   float64 \n 26  bank_nearest                       1213 non-null   float64 \n 27  bus_station_count                  1213 non-null   float64 \n 28  bus_station_nearest                1213 non-null   float64 \n 29  cafe_count                         1213 non-null   float64 \n 30  cafe_nearest                       1213 non-null   float64 \n 31  charging_station_count             1213 non-null   float64 \n 32  charging_station_nearest           1213 non-null   float64 \n 33  courthouse_count                   1213 non-null   float64 \n 34  courthouse_nearest                 1213 non-null   float64 \n 35  dentist_count                      1213 non-null   float64 \n 36  dentist_nearest                    1213 non-null   float64 \n 37  fast_food_count                    1213 non-null   float64 \n 38  fast_food_nearest                  1213 non-null   float64 \n 39  fire_station_count                 1213 non-null   float64 \n 40  fire_station_nearest               1213 non-null   float64 \n 41  food_court_count                   1213 non-null   float64 \n 42  food_court_nearest                 1213 non-null   float64 \n 43  fuel_count                         1213 non-null   float64 \n 44  fuel_nearest                       1213 non-null   float64 \n 45  hospital_count                     1213 non-null   float64 \n 46  hospital_nearest                   1213 non-null   float64 \n 47  library_count                      1213 non-null   float64 \n 48  library_nearest                    1213 non-null   float64 \n 49  marketplace_count                  1213 non-null   float64 \n 50  marketplace_nearest                1213 non-null   float64 \n 51  pharmacy_count                     1213 non-null   float64 \n 52  pharmacy_nearest                   1213 non-null   float64 \n 53  police_count                       1213 non-null   float64 \n 54  police_nearest                     1213 non-null   float64 \n 55  post_box_count                     1213 non-null   float64 \n 56  post_box_nearest                   1213 non-null   float64 \n 57  post_office_count                  1213 non-null   float64 \n 58  post_office_nearest                1213 non-null   float64 \n 59  restaurant_count                   1213 non-null   float64 \n 60  restaurant_nearest                 1213 non-null   float64 \n 61  social_facility_count              1213 non-null   float64 \n 62  social_facility_nearest            1213 non-null   float64 \n 63  supermarket_count                  1213 non-null   float64 \n 64  supermarket_nearest                1213 non-null   float64 \n 65  townhall_count                     1213 non-null   float64 \n 66  townhall_nearest                   1213 non-null   float64 \n 67  road_count                         1213 non-null   float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    878 non-null    float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    878 non-null    float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    878 non-null    float64 \n 71  fixed_2019_mean_num_tests_mean     878 non-null    float64 \n 72  fixed_2019_mean_num_devices_mean   878 non-null    float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   838 non-null    float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   838 non-null    float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   838 non-null    float64 \n 76  mobile_2019_mean_num_tests_mean    838 non-null    float64 \n 77  mobile_2019_mean_num_devices_mean  838 non-null    float64 \n 78  avg_rad_min                        1213 non-null   float64 \n 79  avg_rad_max                        1213 non-null   float64 \n 80  avg_rad_mean                       1213 non-null   float64 \n 81  avg_rad_std                        1213 non-null   float64 \n 82  avg_rad_median                     1213 non-null   float64 \ndtypes: float64(69), geometry(1), int64(1), object(12)\nmemory usage: 828.3+ KB\n\n\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      168.733664\n      204.390127\n      0.358840\n      0.008752\n      0.008752\n      0.226479\n      0.303841\n      0.257313\n      0.020025\n      0.260396\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      248.639351\n      303.828619\n      2.804412\n      0.198795\n      0.119334\n      0.261510\n      6.881082\n      1.390439\n      1.719010\n      0.452909\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      892.382403\n      714.202439\n      2.925917\n      0.075383\n      0.049202\n      0.224655\n      0.865518\n      0.343708\n      0.146519\n      0.288261\n    \n    \n      3\n      4\n      -54952.666667\n      PH201700000004\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.203245\n      0.264794\n      0.227876\n      0.016931\n      0.226401\n    \n    \n      4\n      6\n      -80701.695652\n      PH201700000006\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.232324\n      0.285085\n      0.250609\n      0.012259\n      0.246076\n    \n  \n\n5 rows × 83 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#data-preparation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#data-preparation",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = country_data[[label_col]]\n\n# For features, drop all columns from the input country geometries\n# If you need the cluster data, refer to country_data / country_test\ninput_dhs_cols = dhs_gdf.columns\nfeatures = country_data.drop(input_dhs_cols, axis=1)\n\nfeatures.shape, labels.shape\n\n((1213, 61), (1213, 1))\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 1213 entries, 0 to 1212\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          1213 non-null   float64\n 1   atm_count                          1213 non-null   float64\n 2   atm_nearest                        1213 non-null   float64\n 3   bank_count                         1213 non-null   float64\n 4   bank_nearest                       1213 non-null   float64\n 5   bus_station_count                  1213 non-null   float64\n 6   bus_station_nearest                1213 non-null   float64\n 7   cafe_count                         1213 non-null   float64\n 8   cafe_nearest                       1213 non-null   float64\n 9   charging_station_count             1213 non-null   float64\n 10  charging_station_nearest           1213 non-null   float64\n 11  courthouse_count                   1213 non-null   float64\n 12  courthouse_nearest                 1213 non-null   float64\n 13  dentist_count                      1213 non-null   float64\n 14  dentist_nearest                    1213 non-null   float64\n 15  fast_food_count                    1213 non-null   float64\n 16  fast_food_nearest                  1213 non-null   float64\n 17  fire_station_count                 1213 non-null   float64\n 18  fire_station_nearest               1213 non-null   float64\n 19  food_court_count                   1213 non-null   float64\n 20  food_court_nearest                 1213 non-null   float64\n 21  fuel_count                         1213 non-null   float64\n 22  fuel_nearest                       1213 non-null   float64\n 23  hospital_count                     1213 non-null   float64\n 24  hospital_nearest                   1213 non-null   float64\n 25  library_count                      1213 non-null   float64\n 26  library_nearest                    1213 non-null   float64\n 27  marketplace_count                  1213 non-null   float64\n 28  marketplace_nearest                1213 non-null   float64\n 29  pharmacy_count                     1213 non-null   float64\n 30  pharmacy_nearest                   1213 non-null   float64\n 31  police_count                       1213 non-null   float64\n 32  police_nearest                     1213 non-null   float64\n 33  post_box_count                     1213 non-null   float64\n 34  post_box_nearest                   1213 non-null   float64\n 35  post_office_count                  1213 non-null   float64\n 36  post_office_nearest                1213 non-null   float64\n 37  restaurant_count                   1213 non-null   float64\n 38  restaurant_nearest                 1213 non-null   float64\n 39  social_facility_count              1213 non-null   float64\n 40  social_facility_nearest            1213 non-null   float64\n 41  supermarket_count                  1213 non-null   float64\n 42  supermarket_nearest                1213 non-null   float64\n 43  townhall_count                     1213 non-null   float64\n 44  townhall_nearest                   1213 non-null   float64\n 45  road_count                         1213 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean    1213 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean    1213 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean    1213 non-null   float64\n 49  fixed_2019_mean_num_tests_mean     1213 non-null   float64\n 50  fixed_2019_mean_num_devices_mean   1213 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean   1213 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean   1213 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean   1213 non-null   float64\n 54  mobile_2019_mean_num_tests_mean    1213 non-null   float64\n 55  mobile_2019_mean_num_devices_mean  1213 non-null   float64\n 56  avg_rad_min                        1213 non-null   float64\n 57  avg_rad_max                        1213 non-null   float64\n 58  avg_rad_mean                       1213 non-null   float64\n 59  avg_rad_std                        1213 non-null   float64\n 60  avg_rad_median                     1213 non-null   float64\ndtypes: float64(61)\nmemory usage: 619.8 KB"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#model-training",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#model-training",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ncv_col = 'ADM1NAME'\ncv_num_splits = 5\ncv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing {cv_num_splits}-fold CV...\")\ncv = RepeatedKFold(n_splits=cv_num_splits, n_repeats=cv_num_repeats, random_state=train_test_seed)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7f3d8cc795f0>\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\nprint(\"Cross validation scores are: \", sorted(R_cv))\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.5294677566332617, 0.5391552185905704, 0.543278926472197, 0.5447281441026584, 0.5562541669133134, 0.5568586582805555, 0.5637788474374361, 0.5667912877726746, 0.5785468569997612, 0.5802442586120041, 0.5857832371271379, 0.5879801994412324, 0.5927537962070584, 0.5950396182036672, 0.6039177107289421, 0.6045825009349381, 0.6110967747533367, 0.6154970734372279, 0.6200274887865274, 0.624422779651163, 0.625771804024557, 0.6313835954119891, 0.6320135439052579, 0.6376161937003118, 0.6472793023895735]\nCross validation R^2 mean: 0.59\nCross validation R^2 std: 0.03\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#model-evaluation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#model-evaluation",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Model Evaluation",
    "text": "Model Evaluation\n\nSHAP Feature Importance\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap_values\n\narray([[ 1.42131634e+02,  2.45774057e+01, -1.08135322e+03, ...,\n        -1.91553668e+03, -9.60443652e+02, -3.38104962e+03],\n       [-9.46731453e+02,  1.39580566e+01, -5.65539891e+02, ...,\n         1.05882950e+03,  3.22172503e+02, -2.18554002e+03],\n       [-2.80953619e+00,  2.03494523e+01, -6.08893603e+02, ...,\n         9.55855509e+02,  2.30219438e+02, -5.20196566e+03],\n       ...,\n       [-3.49639987e+02,  4.52311481e+01, -4.94156091e+02, ...,\n         1.44365982e+03,  5.92012617e+02,  2.26132845e+03],\n       [-3.03319414e+02,  1.16861106e+01, -9.92229066e+02, ...,\n         9.93172172e+01,  6.01848516e+02, -6.65320602e+03],\n       [-2.58408637e+02,  2.68403741e+01, -2.89553307e+02, ...,\n        -5.02644705e+03, -1.78694282e+03, -7.63883647e+03]])\n\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#save-model",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_ph.html#save-model",
    "title": "Model Training and Evaluation (Philippines)",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = \"./model_ph.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "",
    "text": "import os\nimport sys\nsys.path.append(\"../../\")\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\n\nimport pickle\n\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.3-CAPI-1.16.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#load-target-country-from-dhs-data",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#load-target-country-from-dhs-data",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Load Target Country From DHS data",
    "text": "Load Target Country From DHS data\n\n# Set country-specific variables\ncountry_osm = \"myanmar\"\nookla_year = 2019\nnightlights_year = 2015\n\n\ndhs_household_dta_path = settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\"\ndhs_geographic_shp_path = settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\ndhs_gdf = generate_dhs_cluster_level_data(\n    dhs_household_dta_path, \n    dhs_geographic_shp_path, \n    col_rename_config=\"mm\",\n    convert_geoms_to_bbox=True,\n    bbox_size_km=2.4\n).reset_index(drop=True)\ndhs_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ndhs_gdf.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -52232.000000\n      MM201500000001\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      8.0\n      Magway\n      GPS\n      R\n      20.058637\n      95.360081\n      107.0\n      105.0\n      WGS84\n      POLYGON ((95.34859 20.06943, 95.37157 20.06943...\n    \n    \n      1\n      2\n      130773.724138\n      MM201500000002\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      12.0\n      Yangon\n      GPS\n      U\n      17.112398\n      96.045616\n      31.0\n      14.0\n      WGS84\n      POLYGON ((96.03432 17.12319, 96.05691 17.12319...\n    \n    \n      2\n      3\n      -4955.000000\n      MM201500000003\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      10.0\n      Mon\n      GPS\n      R\n      16.507664\n      97.364236\n      4.0\n      2.0\n      WGS84\n      POLYGON ((97.35298 16.51846, 97.37549 16.51846...\n    \n    \n      3\n      4\n      47824.103448\n      MM201500000004\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      Kachin\n      GPS\n      U\n      26.684519\n      96.283879\n      193.0\n      210.0\n      WGS84\n      POLYGON ((96.27180 26.69531, 96.29596 26.69531...\n    \n    \n      4\n      5\n      9434.482759\n      MM201500000005\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      12.0\n      Yangon\n      GPS\n      R\n      16.866059\n      96.053499\n      12.0\n      5.0\n      WGS84\n      POLYGON ((96.04222 16.87685, 96.06478 16.87685...\n    \n  \n\n5 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#set-up-data-access",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#set-up-data-access",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-01-31 13:58:23.564 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-01-31 13:58:23.570 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#generate-base-features",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#generate-base-features",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Generate Base Features",
    "text": "Generate Base Features\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the ff. datasets from the internet.\n\nOpenStreetMap Data from Geofabrik\nOokla Internet Speed Data\nVIIRS nighttime lights data from NASA EOG\n\nOn subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\ncountry_data = dhs_gdf.copy()\n\n# Add in OSM features\ncountry_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\ncountry_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n# Add in Ookla features\ncountry_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\ncountry_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n# Add in the nighttime lights features\ncountry_data = nightlights.generate_nightlights_feature(country_data, str(nightlights_year)) \n\n2023-01-31 13:58:23.766 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar? True\n2023-01-31 13:58:23.767 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for myanmar being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar/gis_osm_pois_free_1.shp\n2023-01-31 13:58:33.290 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar? True\n2023-01-31 13:58:33.297 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for myanmar being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar/gis_osm_roads_free_1.shp\n2023-01-31 14:00:36.799 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-01-31 14:00:36.802 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/d72ec7e4d144b750e1c0950ecad081e0.csv? True\n2023-01-31 14:00:36.803 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in filesystem. Loading in cache.\n2023-01-31 14:00:37.049 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['d72ec7e4d144b750e1c0950ecad081e0']\n2023-01-31 14:00:37.050 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/2aff65fdf8072457cba0d42873b7a9c2.csv? True\n2023-01-31 14:00:37.051 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in filesystem. Loading in cache.\n2023-01-31 14:00:37.265 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 1min 40s, sys: 19.6 s, total: 2min\nWall time: 2min 16s\n\n\n\nInspect the combined target country data\n\ncountry_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 441 entries, 0 to 440\nData columns (total 83 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           441 non-null    int64   \n 1   Wealth Index                       441 non-null    float64 \n 2   DHSID                              441 non-null    object  \n 3   DHSCC                              441 non-null    object  \n 4   DHSYEAR                            441 non-null    float64 \n 5   CCFIPS                             441 non-null    object  \n 6   ADM1FIPS                           441 non-null    object  \n 7   ADM1FIPSNA                         441 non-null    object  \n 8   ADM1SALBNA                         441 non-null    object  \n 9   ADM1SALBCO                         441 non-null    object  \n 10  ADM1DHS                            441 non-null    float64 \n 11  ADM1NAME                           441 non-null    object  \n 12  DHSREGCO                           441 non-null    float64 \n 13  DHSREGNA                           441 non-null    object  \n 14  SOURCE                             441 non-null    object  \n 15  URBAN_RURA                         441 non-null    object  \n 16  LATNUM                             441 non-null    float64 \n 17  LONGNUM                            441 non-null    float64 \n 18  ALT_GPS                            441 non-null    float64 \n 19  ALT_DEM                            441 non-null    float64 \n 20  DATUM                              441 non-null    object  \n 21  geometry                           441 non-null    geometry\n 22  poi_count                          441 non-null    float64 \n 23  atm_count                          441 non-null    float64 \n 24  atm_nearest                        441 non-null    float64 \n 25  bank_count                         441 non-null    float64 \n 26  bank_nearest                       441 non-null    float64 \n 27  bus_station_count                  441 non-null    float64 \n 28  bus_station_nearest                441 non-null    float64 \n 29  cafe_count                         441 non-null    float64 \n 30  cafe_nearest                       441 non-null    float64 \n 31  charging_station_count             441 non-null    float64 \n 32  charging_station_nearest           441 non-null    float64 \n 33  courthouse_count                   441 non-null    float64 \n 34  courthouse_nearest                 441 non-null    float64 \n 35  dentist_count                      441 non-null    float64 \n 36  dentist_nearest                    441 non-null    float64 \n 37  fast_food_count                    441 non-null    float64 \n 38  fast_food_nearest                  441 non-null    float64 \n 39  fire_station_count                 441 non-null    float64 \n 40  fire_station_nearest               441 non-null    float64 \n 41  food_court_count                   441 non-null    float64 \n 42  food_court_nearest                 441 non-null    float64 \n 43  fuel_count                         441 non-null    float64 \n 44  fuel_nearest                       441 non-null    float64 \n 45  hospital_count                     441 non-null    float64 \n 46  hospital_nearest                   441 non-null    float64 \n 47  library_count                      441 non-null    float64 \n 48  library_nearest                    441 non-null    float64 \n 49  marketplace_count                  441 non-null    float64 \n 50  marketplace_nearest                441 non-null    float64 \n 51  pharmacy_count                     441 non-null    float64 \n 52  pharmacy_nearest                   441 non-null    float64 \n 53  police_count                       441 non-null    float64 \n 54  police_nearest                     441 non-null    float64 \n 55  post_box_count                     441 non-null    float64 \n 56  post_box_nearest                   441 non-null    float64 \n 57  post_office_count                  441 non-null    float64 \n 58  post_office_nearest                441 non-null    float64 \n 59  restaurant_count                   441 non-null    float64 \n 60  restaurant_nearest                 441 non-null    float64 \n 61  social_facility_count              441 non-null    float64 \n 62  social_facility_nearest            441 non-null    float64 \n 63  supermarket_count                  441 non-null    float64 \n 64  supermarket_nearest                441 non-null    float64 \n 65  townhall_count                     441 non-null    float64 \n 66  townhall_nearest                   441 non-null    float64 \n 67  road_count                         441 non-null    float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    149 non-null    float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    149 non-null    float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    149 non-null    float64 \n 71  fixed_2019_mean_num_tests_mean     149 non-null    float64 \n 72  fixed_2019_mean_num_devices_mean   149 non-null    float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   247 non-null    float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   247 non-null    float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   247 non-null    float64 \n 76  mobile_2019_mean_num_tests_mean    247 non-null    float64 \n 77  mobile_2019_mean_num_devices_mean  247 non-null    float64 \n 78  avg_rad_min                        441 non-null    float64 \n 79  avg_rad_max                        441 non-null    float64 \n 80  avg_rad_mean                       441 non-null    float64 \n 81  avg_rad_std                        441 non-null    float64 \n 82  avg_rad_median                     441 non-null    float64 \ndtypes: float64(69), geometry(1), int64(1), object(12)\nmemory usage: 305.6+ KB\n\n\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      1\n      -52232.000000\n      MM201500000001\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.084249\n      0.116014\n      0.100290\n      0.008462\n      0.100869\n    \n    \n      1\n      2\n      130773.724138\n      MM201500000002\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      826.298933\n      505.281935\n      1.226730\n      0.166726\n      0.077713\n      0.413245\n      3.301661\n      1.938653\n      0.959708\n      1.911360\n    \n    \n      2\n      3\n      -4955.000000\n      MM201500000003\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      843.116769\n      375.838860\n      1.581117\n      0.281163\n      0.082694\n      0.075951\n      1.287470\n      0.431493\n      0.367520\n      0.277878\n    \n    \n      3\n      4\n      47824.103448\n      MM201500000004\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.087990\n      0.145543\n      0.117616\n      0.015429\n      0.115754\n    \n    \n      4\n      5\n      9434.482759\n      MM201500000005\n      MM\n      2015.0\n      BM\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      745.823942\n      688.509072\n      0.889722\n      0.244145\n      0.141459\n      1.886424\n      13.847748\n      9.098659\n      2.738587\n      9.385050\n    \n  \n\n5 rows × 83 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#data-preparation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#data-preparation",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = country_data[[label_col]]\n\n# For features, drop all columns from the input country geometries\n# If you need the cluster data, refer to country_data / country_test\ninput_dhs_cols = dhs_gdf.columns\nfeatures = country_data.drop(input_dhs_cols, axis=1)\n\nfeatures.shape, labels.shape\n\n((441, 61), (441, 1))\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 441 entries, 0 to 440\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          441 non-null    float64\n 1   atm_count                          441 non-null    float64\n 2   atm_nearest                        441 non-null    float64\n 3   bank_count                         441 non-null    float64\n 4   bank_nearest                       441 non-null    float64\n 5   bus_station_count                  441 non-null    float64\n 6   bus_station_nearest                441 non-null    float64\n 7   cafe_count                         441 non-null    float64\n 8   cafe_nearest                       441 non-null    float64\n 9   charging_station_count             441 non-null    float64\n 10  charging_station_nearest           441 non-null    float64\n 11  courthouse_count                   441 non-null    float64\n 12  courthouse_nearest                 441 non-null    float64\n 13  dentist_count                      441 non-null    float64\n 14  dentist_nearest                    441 non-null    float64\n 15  fast_food_count                    441 non-null    float64\n 16  fast_food_nearest                  441 non-null    float64\n 17  fire_station_count                 441 non-null    float64\n 18  fire_station_nearest               441 non-null    float64\n 19  food_court_count                   441 non-null    float64\n 20  food_court_nearest                 441 non-null    float64\n 21  fuel_count                         441 non-null    float64\n 22  fuel_nearest                       441 non-null    float64\n 23  hospital_count                     441 non-null    float64\n 24  hospital_nearest                   441 non-null    float64\n 25  library_count                      441 non-null    float64\n 26  library_nearest                    441 non-null    float64\n 27  marketplace_count                  441 non-null    float64\n 28  marketplace_nearest                441 non-null    float64\n 29  pharmacy_count                     441 non-null    float64\n 30  pharmacy_nearest                   441 non-null    float64\n 31  police_count                       441 non-null    float64\n 32  police_nearest                     441 non-null    float64\n 33  post_box_count                     441 non-null    float64\n 34  post_box_nearest                   441 non-null    float64\n 35  post_office_count                  441 non-null    float64\n 36  post_office_nearest                441 non-null    float64\n 37  restaurant_count                   441 non-null    float64\n 38  restaurant_nearest                 441 non-null    float64\n 39  social_facility_count              441 non-null    float64\n 40  social_facility_nearest            441 non-null    float64\n 41  supermarket_count                  441 non-null    float64\n 42  supermarket_nearest                441 non-null    float64\n 43  townhall_count                     441 non-null    float64\n 44  townhall_nearest                   441 non-null    float64\n 45  road_count                         441 non-null    float64\n 46  fixed_2019_mean_avg_d_kbps_mean    441 non-null    float64\n 47  fixed_2019_mean_avg_u_kbps_mean    441 non-null    float64\n 48  fixed_2019_mean_avg_lat_ms_mean    441 non-null    float64\n 49  fixed_2019_mean_num_tests_mean     441 non-null    float64\n 50  fixed_2019_mean_num_devices_mean   441 non-null    float64\n 51  mobile_2019_mean_avg_d_kbps_mean   441 non-null    float64\n 52  mobile_2019_mean_avg_u_kbps_mean   441 non-null    float64\n 53  mobile_2019_mean_avg_lat_ms_mean   441 non-null    float64\n 54  mobile_2019_mean_num_tests_mean    441 non-null    float64\n 55  mobile_2019_mean_num_devices_mean  441 non-null    float64\n 56  avg_rad_min                        441 non-null    float64\n 57  avg_rad_max                        441 non-null    float64\n 58  avg_rad_mean                       441 non-null    float64\n 59  avg_rad_std                        441 non-null    float64\n 60  avg_rad_median                     441 non-null    float64\ndtypes: float64(61)\nmemory usage: 229.8 KB"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#model-training",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#model-training",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ncv_col = 'ADM1NAME'\ncv_num_splits = 5\ncv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing {cv_num_splits}-fold CV...\")\ncv = RepeatedKFold(n_splits=cv_num_splits, n_repeats=cv_num_repeats, random_state=train_test_seed)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7eff0a1c7040>\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2 - We want a high mean: This means that we achieve a high model performance over the different train/test splits - We want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\nprint(\"Cross validation scores are: \", R_cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.49816309 0.52690891 0.36088424 0.5387295  0.55555747 0.45891165\n 0.51177753 0.50802007 0.61784092 0.24206319 0.48448388 0.65377474\n 0.44347434 0.46700331 0.52625576 0.50967757 0.59711872 0.34610694\n 0.47138862 0.60987113 0.52611774 0.43326341 0.38955954 0.53080727\n 0.54003998]\nCross validation R^2 mean: 0.49\nCross validation R^2 std: 0.09\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#model-evaluation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#model-evaluation",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Model Evaluation",
    "text": "Model Evaluation\n\nSHAP Feature Importance\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap_values\n\narray([[-1208.78718752,   -89.14060743,  -933.90599278, ...,\n        -2406.63320409, -5513.91433576, -6400.69078997],\n       [ 3906.12555776,  -259.13018384,  -686.35617074, ...,\n         1394.55206468,  2252.46954147,  3214.22551448],\n       [ 2542.24891001,   -81.73893167, -1169.67173119, ...,\n         1702.14606374,   891.70030008,  2319.03870166],\n       ...,\n       [-3738.33959336,  -273.39904489, -2169.94002487, ...,\n          570.19299015,  1908.05455596,   399.26280909],\n       [ -991.90362228,   -86.45828226, -1092.65620164, ...,\n         4285.58797922,    40.72512533,  9393.94536717],\n       [ 6149.21300248,  2420.50197243,  3649.90180698, ...,\n         3886.7001019 ,   -51.63548071,  4208.20211146]])\n\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#save-model",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_mm.html#save-model",
    "title": "Model Training and Evaluation (Myanmar)",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = \"./model_mm.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html",
    "title": "Cross Country Model Training Initial",
    "section": "",
    "text": "In this notebook, we normalized each model feature by country to correct country-specific feature quirks, as well as the wealth index.\nThis method has been done in a similar study using DHS as training data and was also documented here.\nModels recover how relative values of input data (relative to other locations in that country) correlate with relative values of wealth (also relative to other locations in that country).\nThe current best model setup involves (1) scaling all features per country and (2) scaling the wealth index per country using StandardScaler\n\nimport sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score, LeaveOneGroupOut\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#set-up-data-access",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#set-up-data-access",
    "title": "Cross Country Model Training Initial",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# # Instantiate data managers for Ookla and OSM\n# # This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-02-17 14:20:00.854 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-02-17 14:20:00.857 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#load-countries-from-dhs-data",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#load-countries-from-dhs-data",
    "title": "Cross Country Model Training Initial",
    "section": "Load Countries From DHS data",
    "text": "Load Countries From DHS data\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\nCombine base features for all four countries\nThis section creates countries_data (pd.DataFrame) which combines DHS/Ookla/OSM/VIIRS data for all specified countries.\n\n%%time\n\n# Create list of dataframes per country, and list of all columns appearing in DHS columns\ncountry_data_list = []\ndhs_columns = ['DHSCLUST']\n\nfor country, config in country_config.items():\n    print(f'Loading data for {country}')\n\n    # Load the DHS cluster data\n    dhs_household_dta_path = config['dhs_household_dta_path']\n    dhs_geographic_shp_path = config['dhs_geographic_shp_path']\n    country_code = config['country_code']\n    dhs_gdf = generate_dhs_cluster_level_data(\n        dhs_household_dta_path, \n        dhs_geographic_shp_path, \n        col_rename_config=country_code,\n        convert_geoms_to_bbox=True,\n        bbox_size_km = 2.4\n    ).reset_index(drop=True)\n\n    dhs_columns = list(set(dhs_columns + list(dhs_gdf.columns)))\n    \n\n    # Generate base features for the dhs dataframe\n    country_data = dhs_gdf.copy()\n    country_osm = config['country_osm']\n    ookla_year = config['ookla_year']\n    nightlights_year = config['nightlights_year']\n    \n    # Add in OSM features\n    country_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\n    country_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    country_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\n    country_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    country_data = nightlights.generate_nightlights_feature(country_data, nightlights_year) \n\n    country_data_list.append(country_data)\n\n# Combine all country data into a single dataframe\ncountries_data = gpd.GeoDataFrame(pd.concat(country_data_list,ignore_index=True), crs=country_data_list[0].crs)\n\nLoading data for Philippines\n\n\n2023-02-17 14:20:41.785 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines? True\n2023-02-17 14:20:41.786 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines/gis_osm_pois_free_1.shp\n2023-02-17 14:20:47.140 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines? True\n2023-02-17 14:20:47.141 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/philippines/gis_osm_roads_free_1.shp\n2023-02-17 14:21:36.685 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-17 14:21:36.686 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/2f858b388182d50703550c8ef9d321df.csv? True\n2023-02-17 14:21:36.686 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in filesystem. Loading in cache.\n2023-02-17 14:21:37.091 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df']\n2023-02-17 14:21:37.092 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/5a45dc45080a935951e6c2b6c0052b13.csv? True\n2023-02-17 14:21:37.093 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in filesystem. Loading in cache.\n2023-02-17 14:21:37.437 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nLoading data for Timor Leste\n\n\n2023-02-17 14:21:47.041 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor? True\n2023-02-17 14:21:47.042 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor/gis_osm_pois_free_1.shp\n2023-02-17 14:21:47.973 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor? True\n2023-02-17 14:21:47.974 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor/gis_osm_roads_free_1.shp\n2023-02-17 14:21:48.510 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13']\n2023-02-17 14:21:48.511 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-02-17 14:21:48.512 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-02-17 14:21:48.603 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a']\n2023-02-17 14:21:48.604 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-02-17 14:21:48.605 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-02-17 14:21:48.707 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nLoading data for Cambodia\n\n\n2023-02-17 14:21:52.534 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia? True\n2023-02-17 14:21:52.534 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia/gis_osm_pois_free_1.shp\n2023-02-17 14:21:54.034 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia? True\n2023-02-17 14:21:54.035 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia/gis_osm_roads_free_1.shp\n2023-02-17 14:21:59.290 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d']\n2023-02-17 14:21:59.291 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/37f570ebc130cb44f9dba877fbda74e2.csv? True\n2023-02-17 14:21:59.291 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in filesystem. Loading in cache.\n2023-02-17 14:21:59.464 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2']\n2023-02-17 14:21:59.465 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/1128a917060f7bb88c0a6260ed457091.csv? True\n2023-02-17 14:21:59.466 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in filesystem. Loading in cache.\n2023-02-17 14:21:59.644 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nLoading data for Myanmar\n\n\n2023-02-17 14:22:04.917 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar? True\n2023-02-17 14:22:04.917 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar/gis_osm_pois_free_1.shp\n2023-02-17 14:22:06.966 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar? True\n2023-02-17 14:22:06.967 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/myanmar/gis_osm_roads_free_1.shp\n2023-02-17 14:22:22.239 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091']\n2023-02-17 14:22:22.240 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/d72ec7e4d144b750e1c0950ecad081e0.csv? True\n2023-02-17 14:22:22.240 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in filesystem. Loading in cache.\n2023-02-17 14:22:22.375 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0']\n2023-02-17 14:22:22.376 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/2aff65fdf8072457cba0d42873b7a9c2.csv? True\n2023-02-17 14:22:22.376 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in filesystem. Loading in cache.\n2023-02-17 14:22:22.535 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 1min 38s, sys: 42 s, total: 2min 20s\nWall time: 2min 23s\n\n\n\n\nInspect the combined target country data\n\ncountries_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 86 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           2720 non-null   int64   \n 1   Wealth Index                       2720 non-null   float64 \n 2   DHSID                              2720 non-null   object  \n 3   DHSCC                              2720 non-null   object  \n 4   DHSYEAR                            2720 non-null   float64 \n 5   CCFIPS                             2720 non-null   object  \n 6   ADM1FIPS                           2720 non-null   object  \n 7   ADM1FIPSNA                         2720 non-null   object  \n 8   ADM1SALBNA                         2720 non-null   object  \n 9   ADM1SALBCO                         2720 non-null   object  \n 10  ADM1DHS                            2720 non-null   float64 \n 11  ADM1NAME                           2720 non-null   object  \n 12  DHSREGCO                           2720 non-null   float64 \n 13  DHSREGNA                           2720 non-null   object  \n 14  SOURCE                             2720 non-null   object  \n 15  URBAN_RURA                         2720 non-null   object  \n 16  LATNUM                             2720 non-null   float64 \n 17  LONGNUM                            2720 non-null   float64 \n 18  ALT_GPS                            2720 non-null   float64 \n 19  ALT_DEM                            2720 non-null   float64 \n 20  DATUM                              2720 non-null   object  \n 21  geometry                           2720 non-null   geometry\n 22  poi_count                          2720 non-null   float64 \n 23  atm_count                          2720 non-null   float64 \n 24  atm_nearest                        2720 non-null   float64 \n 25  bank_count                         2720 non-null   float64 \n 26  bank_nearest                       2720 non-null   float64 \n 27  bus_station_count                  2720 non-null   float64 \n 28  bus_station_nearest                2720 non-null   float64 \n 29  cafe_count                         2720 non-null   float64 \n 30  cafe_nearest                       2720 non-null   float64 \n 31  charging_station_count             2720 non-null   float64 \n 32  charging_station_nearest           2720 non-null   float64 \n 33  courthouse_count                   2720 non-null   float64 \n 34  courthouse_nearest                 2720 non-null   float64 \n 35  dentist_count                      2720 non-null   float64 \n 36  dentist_nearest                    2720 non-null   float64 \n 37  fast_food_count                    2720 non-null   float64 \n 38  fast_food_nearest                  2720 non-null   float64 \n 39  fire_station_count                 2720 non-null   float64 \n 40  fire_station_nearest               2720 non-null   float64 \n 41  food_court_count                   2720 non-null   float64 \n 42  food_court_nearest                 2720 non-null   float64 \n 43  fuel_count                         2720 non-null   float64 \n 44  fuel_nearest                       2720 non-null   float64 \n 45  hospital_count                     2720 non-null   float64 \n 46  hospital_nearest                   2720 non-null   float64 \n 47  library_count                      2720 non-null   float64 \n 48  library_nearest                    2720 non-null   float64 \n 49  marketplace_count                  2720 non-null   float64 \n 50  marketplace_nearest                2720 non-null   float64 \n 51  pharmacy_count                     2720 non-null   float64 \n 52  pharmacy_nearest                   2720 non-null   float64 \n 53  police_count                       2720 non-null   float64 \n 54  police_nearest                     2720 non-null   float64 \n 55  post_box_count                     2720 non-null   float64 \n 56  post_box_nearest                   2720 non-null   float64 \n 57  post_office_count                  2720 non-null   float64 \n 58  post_office_nearest                2720 non-null   float64 \n 59  restaurant_count                   2720 non-null   float64 \n 60  restaurant_nearest                 2720 non-null   float64 \n 61  social_facility_count              2720 non-null   float64 \n 62  social_facility_nearest            2720 non-null   float64 \n 63  supermarket_count                  2720 non-null   float64 \n 64  supermarket_nearest                2720 non-null   float64 \n 65  townhall_count                     2720 non-null   float64 \n 66  townhall_nearest                   2720 non-null   float64 \n 67  road_count                         2720 non-null   float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    1443 non-null   float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    1443 non-null   float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    1443 non-null   float64 \n 71  fixed_2019_mean_num_tests_mean     1443 non-null   float64 \n 72  fixed_2019_mean_num_devices_mean   1443 non-null   float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   1707 non-null   float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   1707 non-null   float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   1707 non-null   float64 \n 76  mobile_2019_mean_num_tests_mean    1707 non-null   float64 \n 77  mobile_2019_mean_num_devices_mean  1707 non-null   float64 \n 78  avg_rad_min                        2720 non-null   float64 \n 79  avg_rad_max                        2720 non-null   float64 \n 80  avg_rad_mean                       2720 non-null   float64 \n 81  avg_rad_std                        2720 non-null   float64 \n 82  avg_rad_median                     2720 non-null   float64 \n 83  F21                                0 non-null      object  \n 84  F22                                0 non-null      object  \n 85  F23                                0 non-null      object  \ndtypes: float64(69), geometry(1), int64(1), object(15)\nmemory usage: 1.8+ MB\n\n\n\n# Check if DHS CC can be used as a country grouping column\ncountries_data['DHSCC'].value_counts()\n\nPH    1213\nKH     611\nTL     455\nMM     441\nName: DHSCC, dtype: int64\n\n\n\n# Explore as a map with first 30 columns in tooltip\n#countries_data.iloc[:, :30].explore()"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#data-preparation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#data-preparation",
    "title": "Cross Country Model Training Initial",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\ngroup_col = 'DHSCC'\n##normalize_labels = 'single-country' # False, 'cross-country' or 'single_country'\nnormalize_labels = 'cross-country'\n\n\ndrop_cols = ['DHSID', 'DHSYEAR', 'CCFIPS',\n       'ADM1FIPS', 'ADM1FIPSNA', 'ADM1SALBNA', 'ADM1SALBCO', 'ADM1DHS',\n       'ADM1NAME', 'DHSREGCO', 'DHSREGNA', 'SOURCE', 'LATNUM',\n       'LONGNUM', 'ALT_GPS', 'ALT_DEM', 'DATUM','F21','F22','F23','URBAN_RURA']\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = countries_data[[label_col]]\n\n# For features, drop all columns from the input dhs files\n# If you need the cluster data, refer to country_data / country_test\nfeatures = countries_data.drop(drop_cols, axis=1).copy()\n\nfeatures.shape, labels.shape\n\n((2720, 65), (2720, 1))\n\n\n\n\nNormalize labels and features\n\ndef scale_col(X,scaler):\n    X_ = np.atleast_2d(X)\n    return pd.DataFrame(scaler.fit_transform(X_), X.index)\n\n\nfeature_cols = features.columns[4:].tolist()\nprint(feature_cols)\n\n['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest', 'bus_station_count', 'bus_station_nearest', 'cafe_count', 'cafe_nearest', 'charging_station_count', 'charging_station_nearest', 'courthouse_count', 'courthouse_nearest', 'dentist_count', 'dentist_nearest', 'fast_food_count', 'fast_food_nearest', 'fire_station_count', 'fire_station_nearest', 'food_court_count', 'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count', 'hospital_nearest', 'library_count', 'library_nearest', 'marketplace_count', 'marketplace_nearest', 'pharmacy_count', 'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count', 'post_box_nearest', 'post_office_count', 'post_office_nearest', 'restaurant_count', 'restaurant_nearest', 'social_facility_count', 'social_facility_nearest', 'supermarket_count', 'supermarket_nearest', 'townhall_count', 'townhall_nearest', 'road_count', 'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean', 'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean', 'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean', 'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean', 'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean', 'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std', 'avg_rad_median']\n\n\n\n#scale features\nscaler = StandardScaler()\nfor col in feature_cols:\n    print(col)\n    features[col+'_scaled'] = features.groupby(group_col, group_keys=False)[[col]].apply(scale_col, scaler=scaler)\nprint(features.columns)\n\npoi_count\natm_count\natm_nearest\nbank_count\nbank_nearest\nbus_station_count\nbus_station_nearest\ncafe_count\ncafe_nearest\ncharging_station_count\ncharging_station_nearest\ncourthouse_count\ncourthouse_nearest\ndentist_count\ndentist_nearest\nfast_food_count\nfast_food_nearest\nfire_station_count\nfire_station_nearest\nfood_court_count\nfood_court_nearest\nfuel_count\nfuel_nearest\nhospital_count\nhospital_nearest\nlibrary_count\nlibrary_nearest\nmarketplace_count\nmarketplace_nearest\npharmacy_count\npharmacy_nearest\npolice_count\npolice_nearest\npost_box_count\npost_box_nearest\npost_office_count\npost_office_nearest\nrestaurant_count\nrestaurant_nearest\nsocial_facility_count\nsocial_facility_nearest\nsupermarket_count\nsupermarket_nearest\ntownhall_count\ntownhall_nearest\nroad_count\nfixed_2019_mean_avg_d_kbps_mean\nfixed_2019_mean_avg_u_kbps_mean\nfixed_2019_mean_avg_lat_ms_mean\nfixed_2019_mean_num_tests_mean\nfixed_2019_mean_num_devices_mean\nmobile_2019_mean_avg_d_kbps_mean\nmobile_2019_mean_avg_u_kbps_mean\nmobile_2019_mean_avg_lat_ms_mean\nmobile_2019_mean_num_tests_mean\nmobile_2019_mean_num_devices_mean\navg_rad_min\navg_rad_max\navg_rad_mean\navg_rad_std\navg_rad_median\nIndex(['DHSCLUST', 'Wealth Index', 'DHSCC', 'geometry', 'poi_count',\n       'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count',\n       ...\n       'mobile_2019_mean_avg_d_kbps_mean_scaled',\n       'mobile_2019_mean_avg_u_kbps_mean_scaled',\n       'mobile_2019_mean_avg_lat_ms_mean_scaled',\n       'mobile_2019_mean_num_tests_mean_scaled',\n       'mobile_2019_mean_num_devices_mean_scaled', 'avg_rad_min_scaled',\n       'avg_rad_max_scaled', 'avg_rad_mean_scaled', 'avg_rad_std_scaled',\n       'avg_rad_median_scaled'],\n      dtype='object', length=126)\n\n\n\n# fill nas with 0\nfeatures = features.fillna(0)\n\n\n# # scale labels\nscaler = StandardScaler()\nlabels = countries_data[[group_col,label_col]].groupby(group_col, group_keys=False)[[label_col]].apply(scale_col, scaler=scaler)\nplt.hist(labels)\n\n(array([ 16.,  85., 442., 702., 533., 379., 308., 179.,  68.,   8.]),\n array([-2.65317484, -2.0616477 , -1.47012056, -0.87859342, -0.28706627,\n         0.30446087,  0.89598801,  1.48751515,  2.0790423 ,  2.67056944,\n         3.26209658]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\n# keep only scaled columns\nfeatures = features[[col+'_scaled' for col in feature_cols]]\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          2720 non-null   float64\n 1   atm_count_scaled                          2720 non-null   float64\n 2   atm_nearest_scaled                        2720 non-null   float64\n 3   bank_count_scaled                         2720 non-null   float64\n 4   bank_nearest_scaled                       2720 non-null   float64\n 5   bus_station_count_scaled                  2720 non-null   float64\n 6   bus_station_nearest_scaled                2720 non-null   float64\n 7   cafe_count_scaled                         2720 non-null   float64\n 8   cafe_nearest_scaled                       2720 non-null   float64\n 9   charging_station_count_scaled             2720 non-null   float64\n 10  charging_station_nearest_scaled           2720 non-null   float64\n 11  courthouse_count_scaled                   2720 non-null   float64\n 12  courthouse_nearest_scaled                 2720 non-null   float64\n 13  dentist_count_scaled                      2720 non-null   float64\n 14  dentist_nearest_scaled                    2720 non-null   float64\n 15  fast_food_count_scaled                    2720 non-null   float64\n 16  fast_food_nearest_scaled                  2720 non-null   float64\n 17  fire_station_count_scaled                 2720 non-null   float64\n 18  fire_station_nearest_scaled               2720 non-null   float64\n 19  food_court_count_scaled                   2720 non-null   float64\n 20  food_court_nearest_scaled                 2720 non-null   float64\n 21  fuel_count_scaled                         2720 non-null   float64\n 22  fuel_nearest_scaled                       2720 non-null   float64\n 23  hospital_count_scaled                     2720 non-null   float64\n 24  hospital_nearest_scaled                   2720 non-null   float64\n 25  library_count_scaled                      2720 non-null   float64\n 26  library_nearest_scaled                    2720 non-null   float64\n 27  marketplace_count_scaled                  2720 non-null   float64\n 28  marketplace_nearest_scaled                2720 non-null   float64\n 29  pharmacy_count_scaled                     2720 non-null   float64\n 30  pharmacy_nearest_scaled                   2720 non-null   float64\n 31  police_count_scaled                       2720 non-null   float64\n 32  police_nearest_scaled                     2720 non-null   float64\n 33  post_box_count_scaled                     2720 non-null   float64\n 34  post_box_nearest_scaled                   2720 non-null   float64\n 35  post_office_count_scaled                  2720 non-null   float64\n 36  post_office_nearest_scaled                2720 non-null   float64\n 37  restaurant_count_scaled                   2720 non-null   float64\n 38  restaurant_nearest_scaled                 2720 non-null   float64\n 39  social_facility_count_scaled              2720 non-null   float64\n 40  social_facility_nearest_scaled            2720 non-null   float64\n 41  supermarket_count_scaled                  2720 non-null   float64\n 42  supermarket_nearest_scaled                2720 non-null   float64\n 43  townhall_count_scaled                     2720 non-null   float64\n 44  townhall_nearest_scaled                   2720 non-null   float64\n 45  road_count_scaled                         2720 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    2720 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    2720 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    2720 non-null   float64\n 49  fixed_2019_mean_num_tests_mean_scaled     2720 non-null   float64\n 50  fixed_2019_mean_num_devices_mean_scaled   2720 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   2720 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   2720 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   2720 non-null   float64\n 54  mobile_2019_mean_num_tests_mean_scaled    2720 non-null   float64\n 55  mobile_2019_mean_num_devices_mean_scaled  2720 non-null   float64\n 56  avg_rad_min_scaled                        2720 non-null   float64\n 57  avg_rad_max_scaled                        2720 non-null   float64\n 58  avg_rad_mean_scaled                       2720 non-null   float64\n 59  avg_rad_std_scaled                        2720 non-null   float64\n 60  avg_rad_median_scaled                     2720 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.3 MB"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#model-training",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#model-training",
    "title": "Cross Country Model Training Initial",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ngroupkfold_col = 'DHSCC'\ncv_num_splits = 5\ncv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# Cross validation\nprint(f\"Performing {cv_num_splits}-fold CV...\")\ncv = RepeatedKFold(n_splits=cv_num_splits, n_repeats=cv_num_repeats, random_state=train_test_seed)\n\nprint(f'Number of splits: {cv.get_n_splits()}')\n\nPerforming 5-fold CV...\nNumber of splits: 25\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\nprint(\"Cross validation scores are: \", sorted(R_cv))\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.5500367607433216, 0.550650640122812, 0.5564519943085806, 0.5718770345383803, 0.5758833937681125, 0.5806380028388944, 0.5850377052669753, 0.5995418011295871, 0.6003012301782911, 0.6026738530391791, 0.6063765781435331, 0.606966800013852, 0.6073290479491984, 0.6099476496656713, 0.6101008446514671, 0.6107156990706488, 0.6157530523773682, 0.6275291758773034, 0.627830111984218, 0.6339317328956315, 0.6372516354728932, 0.6431872307697504, 0.6465081647657379, 0.6560721529682908, 0.6605725286686239]\nCross validation R^2 mean: 0.61\nCross validation R^2 std: 0.03\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#model-evaluation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#model-evaluation",
    "title": "Cross Country Model Training Initial",
    "section": "Model Evaluation",
    "text": "Model Evaluation\n\nSHAP Feature Importance\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#save-model",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_all.html#save-model",
    "title": "Cross Country Model Training Initial",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = \"./model_all.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "",
    "text": "import sys\nsys.path.append(\"../../\")\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\n\n\nimport pickle\nimport os\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.3-CAPI-1.16.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#load-target-country-from-dhs-data",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#load-target-country-from-dhs-data",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Load Target Country From DHS data",
    "text": "Load Target Country From DHS data\n\n# Set country-specific variables\ncountry_osm = \"east-timor\"\nookla_year = 2019\nnightlights_year = 2016\n\n\ndhs_household_dta_path = settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\"\ndhs_geographic_shp_path = settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\ndhs_gdf = generate_dhs_cluster_level_data(\n    dhs_household_dta_path, \n    dhs_geographic_shp_path, \n    col_rename_config=\"tl\",\n    convert_geoms_to_bbox=True,\n    bbox_size_km=2.4\n).reset_index(drop=True)\ndhs_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ndhs_gdf.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      F21\n      F22\n      F23\n      geometry\n    \n  \n  \n    \n      0\n      1\n      32166.600000\n      TL201600000001\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.712016\n      125.567381\n      9999.0\n      1005.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.55646 -8.70122, 125.57830 -8.701...\n    \n    \n      1\n      2\n      -34063.923077\n      TL201600000002\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.730226\n      125.590219\n      9999.0\n      1342.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.57930 -8.71943, 125.60114 -8.719...\n    \n    \n      2\n      3\n      39230.590909\n      TL201600000003\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.741340\n      125.556399\n      9999.0\n      1060.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.54548 -8.73055, 125.56732 -8.730...\n    \n    \n      3\n      4\n      -82140.227273\n      TL201600000004\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.811291\n      125.535161\n      9999.0\n      1986.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.52424 -8.80050, 125.54608 -8.800...\n    \n    \n      4\n      5\n      -56203.423077\n      TL201600000005\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      R\n      -8.791590\n      125.473219\n      9999.0\n      1491.0\n      WGS84\n      None\n      None\n      None\n      POLYGON ((125.46230 -8.78080, 125.48414 -8.780...\n    \n  \n\n5 rows × 25 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#set-up-data-access",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#set-up-data-access",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-01-31 14:00:38.706 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-01-31 14:00:38.707 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#generate-base-features",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#generate-base-features",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Generate Base Features",
    "text": "Generate Base Features\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the ff. datasets from the internet.\n\nOpenStreetMap Data from Geofabrik\nOokla Internet Speed Data\nVIIRS nighttime lights data from NASA EOG\n\nOn subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\ncountry_data = dhs_gdf.copy()\n\n# Add in OSM features\ncountry_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\ncountry_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n# Add in Ookla features\ncountry_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\ncountry_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n# Add in the nighttime lights features\ncountry_data = nightlights.generate_nightlights_feature(country_data, str(nightlights_year)) \n\n2023-01-31 14:00:38.851 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor? True\n2023-01-31 14:00:38.852 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor/gis_osm_pois_free_1.shp\n2023-01-31 14:00:42.117 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor? True\n2023-01-31 14:00:42.118 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/east-timor/gis_osm_roads_free_1.shp\n2023-01-31 14:00:43.655 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-01-31 14:00:43.657 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-01-31 14:00:43.658 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-01-31 14:00:43.871 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['206a0323fa0e80f82339b66d0c859b4a']\n2023-01-31 14:00:43.873 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-01-31 14:00:43.874 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-01-31 14:00:44.047 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nCPU times: user 8.07 s, sys: 127 ms, total: 8.2 s\nWall time: 8.27 s\n\n\n\nInspect the combined target country data\n\ncountry_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 455 entries, 0 to 454\nData columns (total 86 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           455 non-null    int64   \n 1   Wealth Index                       455 non-null    float64 \n 2   DHSID                              455 non-null    object  \n 3   DHSCC                              455 non-null    object  \n 4   DHSYEAR                            455 non-null    float64 \n 5   CCFIPS                             455 non-null    object  \n 6   ADM1FIPS                           455 non-null    object  \n 7   ADM1FIPSNA                         455 non-null    object  \n 8   ADM1SALBNA                         455 non-null    object  \n 9   ADM1SALBCO                         455 non-null    object  \n 10  ADM1DHS                            455 non-null    float64 \n 11  ADM1NAME                           455 non-null    object  \n 12  DHSREGCO                           455 non-null    float64 \n 13  DHSREGNA                           455 non-null    object  \n 14  SOURCE                             455 non-null    object  \n 15  URBAN_RURA                         455 non-null    object  \n 16  LATNUM                             455 non-null    float64 \n 17  LONGNUM                            455 non-null    float64 \n 18  ALT_GPS                            455 non-null    float64 \n 19  ALT_DEM                            455 non-null    float64 \n 20  DATUM                              455 non-null    object  \n 21  F21                                0 non-null      object  \n 22  F22                                0 non-null      object  \n 23  F23                                0 non-null      object  \n 24  geometry                           455 non-null    geometry\n 25  poi_count                          455 non-null    float64 \n 26  atm_count                          455 non-null    float64 \n 27  atm_nearest                        455 non-null    float64 \n 28  bank_count                         455 non-null    float64 \n 29  bank_nearest                       455 non-null    float64 \n 30  bus_station_count                  455 non-null    float64 \n 31  bus_station_nearest                455 non-null    float64 \n 32  cafe_count                         455 non-null    float64 \n 33  cafe_nearest                       455 non-null    float64 \n 34  charging_station_count             455 non-null    float64 \n 35  charging_station_nearest           455 non-null    float64 \n 36  courthouse_count                   455 non-null    float64 \n 37  courthouse_nearest                 455 non-null    float64 \n 38  dentist_count                      455 non-null    float64 \n 39  dentist_nearest                    455 non-null    float64 \n 40  fast_food_count                    455 non-null    float64 \n 41  fast_food_nearest                  455 non-null    float64 \n 42  fire_station_count                 455 non-null    float64 \n 43  fire_station_nearest               455 non-null    float64 \n 44  food_court_count                   455 non-null    float64 \n 45  food_court_nearest                 455 non-null    float64 \n 46  fuel_count                         455 non-null    float64 \n 47  fuel_nearest                       455 non-null    float64 \n 48  hospital_count                     455 non-null    float64 \n 49  hospital_nearest                   455 non-null    float64 \n 50  library_count                      455 non-null    float64 \n 51  library_nearest                    455 non-null    float64 \n 52  marketplace_count                  455 non-null    float64 \n 53  marketplace_nearest                455 non-null    float64 \n 54  pharmacy_count                     455 non-null    float64 \n 55  pharmacy_nearest                   455 non-null    float64 \n 56  police_count                       455 non-null    float64 \n 57  police_nearest                     455 non-null    float64 \n 58  post_box_count                     455 non-null    float64 \n 59  post_box_nearest                   455 non-null    float64 \n 60  post_office_count                  455 non-null    float64 \n 61  post_office_nearest                455 non-null    float64 \n 62  restaurant_count                   455 non-null    float64 \n 63  restaurant_nearest                 455 non-null    float64 \n 64  social_facility_count              455 non-null    float64 \n 65  social_facility_nearest            455 non-null    float64 \n 66  supermarket_count                  455 non-null    float64 \n 67  supermarket_nearest                455 non-null    float64 \n 68  townhall_count                     455 non-null    float64 \n 69  townhall_nearest                   455 non-null    float64 \n 70  road_count                         455 non-null    float64 \n 71  fixed_2019_mean_avg_d_kbps_mean    64 non-null     float64 \n 72  fixed_2019_mean_avg_u_kbps_mean    64 non-null     float64 \n 73  fixed_2019_mean_avg_lat_ms_mean    64 non-null     float64 \n 74  fixed_2019_mean_num_tests_mean     64 non-null     float64 \n 75  fixed_2019_mean_num_devices_mean   64 non-null     float64 \n 76  mobile_2019_mean_avg_d_kbps_mean   173 non-null    float64 \n 77  mobile_2019_mean_avg_u_kbps_mean   173 non-null    float64 \n 78  mobile_2019_mean_avg_lat_ms_mean   173 non-null    float64 \n 79  mobile_2019_mean_num_tests_mean    173 non-null    float64 \n 80  mobile_2019_mean_num_devices_mean  173 non-null    float64 \n 81  avg_rad_min                        455 non-null    float64 \n 82  avg_rad_max                        455 non-null    float64 \n 83  avg_rad_mean                       455 non-null    float64 \n 84  avg_rad_std                        455 non-null    float64 \n 85  avg_rad_median                     455 non-null    float64 \ndtypes: float64(69), geometry(1), int64(1), object(15)\nmemory usage: 325.4+ KB\n\n\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      1\n      32166.600000\n      TL201600000001\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      120.487266\n      36.768028\n      0.16491\n      0.041227\n      0.013742\n      0.026005\n      1.205315\n      0.281820\n      0.357397\n      0.112378\n    \n    \n      1\n      2\n      -34063.923077\n      TL201600000002\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0.009625\n      0.356664\n      0.104796\n      0.097928\n      0.052513\n    \n    \n      2\n      3\n      39230.590909\n      TL201600000003\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      734.607003\n      147.058372\n      1.40893\n      0.049611\n      0.041888\n      0.010133\n      1.219182\n      0.328512\n      0.397882\n      0.118295\n    \n    \n      3\n      4\n      -82140.227273\n      TL201600000004\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      -0.021887\n      0.284718\n      0.063929\n      0.089171\n      0.024247\n    \n    \n      4\n      5\n      -56203.423077\n      TL201600000005\n      TL\n      2016.0\n      TT\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      -0.039887\n      0.024366\n      0.002567\n      0.015578\n      0.005337\n    \n  \n\n5 rows × 86 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#data-preparation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#data-preparation",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = country_data[[label_col]]\n\n# For features, drop all columns from the input country geometries\n# If you need the cluster data, refer to country_data / country_test\ninput_dhs_cols = dhs_gdf.columns\nfeatures = country_data.drop(input_dhs_cols, axis=1)\n\nfeatures.shape, labels.shape\n\n((455, 61), (455, 1))\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 455 entries, 0 to 454\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          455 non-null    float64\n 1   atm_count                          455 non-null    float64\n 2   atm_nearest                        455 non-null    float64\n 3   bank_count                         455 non-null    float64\n 4   bank_nearest                       455 non-null    float64\n 5   bus_station_count                  455 non-null    float64\n 6   bus_station_nearest                455 non-null    float64\n 7   cafe_count                         455 non-null    float64\n 8   cafe_nearest                       455 non-null    float64\n 9   charging_station_count             455 non-null    float64\n 10  charging_station_nearest           455 non-null    float64\n 11  courthouse_count                   455 non-null    float64\n 12  courthouse_nearest                 455 non-null    float64\n 13  dentist_count                      455 non-null    float64\n 14  dentist_nearest                    455 non-null    float64\n 15  fast_food_count                    455 non-null    float64\n 16  fast_food_nearest                  455 non-null    float64\n 17  fire_station_count                 455 non-null    float64\n 18  fire_station_nearest               455 non-null    float64\n 19  food_court_count                   455 non-null    float64\n 20  food_court_nearest                 455 non-null    float64\n 21  fuel_count                         455 non-null    float64\n 22  fuel_nearest                       455 non-null    float64\n 23  hospital_count                     455 non-null    float64\n 24  hospital_nearest                   455 non-null    float64\n 25  library_count                      455 non-null    float64\n 26  library_nearest                    455 non-null    float64\n 27  marketplace_count                  455 non-null    float64\n 28  marketplace_nearest                455 non-null    float64\n 29  pharmacy_count                     455 non-null    float64\n 30  pharmacy_nearest                   455 non-null    float64\n 31  police_count                       455 non-null    float64\n 32  police_nearest                     455 non-null    float64\n 33  post_box_count                     455 non-null    float64\n 34  post_box_nearest                   455 non-null    float64\n 35  post_office_count                  455 non-null    float64\n 36  post_office_nearest                455 non-null    float64\n 37  restaurant_count                   455 non-null    float64\n 38  restaurant_nearest                 455 non-null    float64\n 39  social_facility_count              455 non-null    float64\n 40  social_facility_nearest            455 non-null    float64\n 41  supermarket_count                  455 non-null    float64\n 42  supermarket_nearest                455 non-null    float64\n 43  townhall_count                     455 non-null    float64\n 44  townhall_nearest                   455 non-null    float64\n 45  road_count                         455 non-null    float64\n 46  fixed_2019_mean_avg_d_kbps_mean    455 non-null    float64\n 47  fixed_2019_mean_avg_u_kbps_mean    455 non-null    float64\n 48  fixed_2019_mean_avg_lat_ms_mean    455 non-null    float64\n 49  fixed_2019_mean_num_tests_mean     455 non-null    float64\n 50  fixed_2019_mean_num_devices_mean   455 non-null    float64\n 51  mobile_2019_mean_avg_d_kbps_mean   455 non-null    float64\n 52  mobile_2019_mean_avg_u_kbps_mean   455 non-null    float64\n 53  mobile_2019_mean_avg_lat_ms_mean   455 non-null    float64\n 54  mobile_2019_mean_num_tests_mean    455 non-null    float64\n 55  mobile_2019_mean_num_devices_mean  455 non-null    float64\n 56  avg_rad_min                        455 non-null    float64\n 57  avg_rad_max                        455 non-null    float64\n 58  avg_rad_mean                       455 non-null    float64\n 59  avg_rad_std                        455 non-null    float64\n 60  avg_rad_median                     455 non-null    float64\ndtypes: float64(61)\nmemory usage: 236.6 KB"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#model-training",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#model-training",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ncv_col = 'ADM1NAME'\ncv_num_splits = 5\ncv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing {cv_num_splits}-fold CV...\")\ncv = RepeatedKFold(n_splits=cv_num_splits, n_repeats=cv_num_repeats, random_state=train_test_seed)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7fc72dca7cf0>\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2 - We want a high mean: This means that we achieve a high model performance over the different train/test splits - We want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\nprint(\"Cross validation scores are: \", R_cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.52314563 0.71589212 0.62702992 0.62876376 0.60727356 0.59854787\n 0.64459262 0.5645657  0.6475496  0.58516898 0.64333412 0.57955347\n 0.68957151 0.5678542  0.39258228 0.57938886 0.73362811 0.55649354\n 0.62505678 0.55131979 0.58291504 0.51003125 0.66213206 0.57155403\n 0.62023663]\nCross validation R^2 mean: 0.6\nCross validation R^2 std: 0.07\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#model-evaluation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#model-evaluation",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Model Evaluation",
    "text": "Model Evaluation\n\nSHAP Feature Importance\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap_values\n\narray([[-2.78288444e+02,  2.54662269e+00, -3.61114762e+02, ...,\n        -3.76359324e+03,  3.56991434e+02,  3.14029666e+02],\n       [ 6.83641498e-01,  3.08155449e+00, -4.04342108e+02, ...,\n        -5.44415663e+03, -2.67927065e+03, -1.10857191e+03],\n       [-3.68998815e+02,  2.09687769e+00, -2.06384964e+02, ...,\n        -3.49928320e+03, -7.77595317e+02, -2.66918649e+02],\n       ...,\n       [-7.92942075e+02,  1.30255281e+01, -2.02013077e+02, ...,\n         3.55792366e+03,  5.90910492e+03, -7.51810625e+02],\n       [ 6.99005836e+01,  3.12683522e+00, -2.89566630e+02, ...,\n        -4.03058008e+03, -9.21508542e+02,  6.59822668e+02],\n       [-2.77892341e+02,  2.80698684e+00, -4.20183284e+02, ...,\n        -6.95179308e+03, -2.06168794e+03, -5.03960873e+03]])\n\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#save-model",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_tl.html#save-model",
    "title": "Model Training and Evaluation (Timor Leste)",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = \"./model_tl.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "",
    "text": "import os\nimport sys\nsys.path.append(\"../../\")\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.3-CAPI-1.16.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#load-target-country-from-dhs-data",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#load-target-country-from-dhs-data",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Load Target Country From DHS data",
    "text": "Load Target Country From DHS data\n\n# Set country-specific variables\ncountry_osm = \"cambodia\"\nookla_year = 2019\nnightlights_year = 2014\n\n\ndhs_household_dta_path = settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\"\ndhs_geographic_shp_path = settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\ndhs_gdf = generate_dhs_cluster_level_data(\n    dhs_household_dta_path, \n    dhs_geographic_shp_path, \n    col_rename_config=\"kh\",\n    convert_geoms_to_bbox=True,\n    bbox_size_km=2.4\n).reset_index(drop=True)\ndhs_gdf.explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\ndhs_gdf.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      DHSREGCO\n      DHSREGNA\n      SOURCE\n      URBAN_RURA\n      LATNUM\n      LONGNUM\n      ALT_GPS\n      ALT_DEM\n      DATUM\n      geometry\n    \n  \n  \n    \n      0\n      1\n      -7443.192308\n      KH201400000001\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.518676\n      103.028394\n      9999.0\n      11.0\n      WGS84\n      POLYGON ((103.01729 13.52947, 103.03949 13.529...\n    \n    \n      1\n      2\n      2622.678571\n      KH201400000002\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.398398\n      102.953852\n      9999.0\n      23.0\n      WGS84\n      POLYGON ((102.94276 13.40919, 102.96495 13.409...\n    \n    \n      2\n      3\n      22167.920000\n      KH201400000003\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      R\n      13.503451\n      102.996001\n      9999.0\n      13.0\n      WGS84\n      POLYGON ((102.98490 13.51424, 103.00710 13.514...\n    \n    \n      3\n      4\n      32241.826087\n      KH201400000004\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      U\n      13.549399\n      103.071416\n      9999.0\n      14.0\n      WGS84\n      POLYGON ((103.06032 13.56019, 103.08252 13.560...\n    \n    \n      4\n      5\n      154111.500000\n      KH201400000005\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      1.0\n      banteay mean chey\n      CEN\n      U\n      13.538865\n      103.028993\n      9999.0\n      15.0\n      WGS84\n      POLYGON ((103.01789 13.54966, 103.04009 13.549...\n    \n  \n\n5 rows × 22 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#set-up-data-access",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#set-up-data-access",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-01-31 14:00:53.085 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-01-31 14:00:53.086 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#generate-base-features",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#generate-base-features",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Generate Base Features",
    "text": "Generate Base Features\nIf this is your first time running this notebook for this specific area, expect a long runtime for the following cell as it will download and cache the ff. datasets from the internet.\n\nOpenStreetMap Data from Geofabrik\nOokla Internet Speed Data\nVIIRS nighttime lights data from NASA EOG\n\nOn subsequent runs, the runtime will be much faster as the data is already stored in your filesystem.\n\n%%time\ncountry_data = dhs_gdf.copy()\n\n# Add in OSM features\ncountry_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\ncountry_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n# Add in Ookla features\ncountry_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\ncountry_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n# Add in the nighttime lights features\ncountry_data = nightlights.generate_nightlights_feature(country_data, str(nightlights_year)) \n\n2023-01-31 14:00:53.415 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia? True\n2023-01-31 14:00:53.421 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for cambodia being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia/gis_osm_pois_free_1.shp\n2023-01-31 14:01:00.722 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia? True\n2023-01-31 14:01:00.723 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for cambodia being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/osm/cambodia/gis_osm_roads_free_1.shp\n2023-01-31 14:01:31.359 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-01-31 14:01:31.365 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/37f570ebc130cb44f9dba877fbda74e2.csv? True\n2023-01-31 14:01:31.368 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in filesystem. Loading in cache.\n2023-01-31 14:01:32.434 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['37f570ebc130cb44f9dba877fbda74e2']\n2023-01-31 14:01:32.437 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-17-initial-model-ph-mm-tl-kh/../../data/data_cache/ookla/processed/1128a917060f7bb88c0a6260ed457091.csv? True\n2023-01-31 14:01:32.440 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in filesystem. Loading in cache.\n2023-01-31 14:01:33.358 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nCPU times: user 48 s, sys: 1.64 s, total: 49.7 s\nWall time: 50.6 s\n\n\n\nInspect the combined target country data\n\ncountry_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 611 entries, 0 to 610\nData columns (total 83 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           611 non-null    int64   \n 1   Wealth Index                       611 non-null    float64 \n 2   DHSID                              611 non-null    object  \n 3   DHSCC                              611 non-null    object  \n 4   DHSYEAR                            611 non-null    float64 \n 5   CCFIPS                             611 non-null    object  \n 6   ADM1FIPS                           611 non-null    object  \n 7   ADM1FIPSNA                         611 non-null    object  \n 8   ADM1SALBNA                         611 non-null    object  \n 9   ADM1SALBCO                         611 non-null    object  \n 10  ADM1DHS                            611 non-null    float64 \n 11  ADM1NAME                           611 non-null    object  \n 12  DHSREGCO                           611 non-null    float64 \n 13  DHSREGNA                           611 non-null    object  \n 14  SOURCE                             611 non-null    object  \n 15  URBAN_RURA                         611 non-null    object  \n 16  LATNUM                             611 non-null    float64 \n 17  LONGNUM                            611 non-null    float64 \n 18  ALT_GPS                            611 non-null    float64 \n 19  ALT_DEM                            611 non-null    float64 \n 20  DATUM                              611 non-null    object  \n 21  geometry                           611 non-null    geometry\n 22  poi_count                          611 non-null    float64 \n 23  atm_count                          611 non-null    float64 \n 24  atm_nearest                        611 non-null    float64 \n 25  bank_count                         611 non-null    float64 \n 26  bank_nearest                       611 non-null    float64 \n 27  bus_station_count                  611 non-null    float64 \n 28  bus_station_nearest                611 non-null    float64 \n 29  cafe_count                         611 non-null    float64 \n 30  cafe_nearest                       611 non-null    float64 \n 31  charging_station_count             611 non-null    float64 \n 32  charging_station_nearest           611 non-null    float64 \n 33  courthouse_count                   611 non-null    float64 \n 34  courthouse_nearest                 611 non-null    float64 \n 35  dentist_count                      611 non-null    float64 \n 36  dentist_nearest                    611 non-null    float64 \n 37  fast_food_count                    611 non-null    float64 \n 38  fast_food_nearest                  611 non-null    float64 \n 39  fire_station_count                 611 non-null    float64 \n 40  fire_station_nearest               611 non-null    float64 \n 41  food_court_count                   611 non-null    float64 \n 42  food_court_nearest                 611 non-null    float64 \n 43  fuel_count                         611 non-null    float64 \n 44  fuel_nearest                       611 non-null    float64 \n 45  hospital_count                     611 non-null    float64 \n 46  hospital_nearest                   611 non-null    float64 \n 47  library_count                      611 non-null    float64 \n 48  library_nearest                    611 non-null    float64 \n 49  marketplace_count                  611 non-null    float64 \n 50  marketplace_nearest                611 non-null    float64 \n 51  pharmacy_count                     611 non-null    float64 \n 52  pharmacy_nearest                   611 non-null    float64 \n 53  police_count                       611 non-null    float64 \n 54  police_nearest                     611 non-null    float64 \n 55  post_box_count                     611 non-null    float64 \n 56  post_box_nearest                   611 non-null    float64 \n 57  post_office_count                  611 non-null    float64 \n 58  post_office_nearest                611 non-null    float64 \n 59  restaurant_count                   611 non-null    float64 \n 60  restaurant_nearest                 611 non-null    float64 \n 61  social_facility_count              611 non-null    float64 \n 62  social_facility_nearest            611 non-null    float64 \n 63  supermarket_count                  611 non-null    float64 \n 64  supermarket_nearest                611 non-null    float64 \n 65  townhall_count                     611 non-null    float64 \n 66  townhall_nearest                   611 non-null    float64 \n 67  road_count                         611 non-null    float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    352 non-null    float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    352 non-null    float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    352 non-null    float64 \n 71  fixed_2019_mean_num_tests_mean     352 non-null    float64 \n 72  fixed_2019_mean_num_devices_mean   352 non-null    float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   449 non-null    float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   449 non-null    float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   449 non-null    float64 \n 76  mobile_2019_mean_num_tests_mean    449 non-null    float64 \n 77  mobile_2019_mean_num_devices_mean  449 non-null    float64 \n 78  avg_rad_min                        611 non-null    float64 \n 79  avg_rad_max                        611 non-null    float64 \n 80  avg_rad_mean                       611 non-null    float64 \n 81  avg_rad_std                        611 non-null    float64 \n 82  avg_rad_median                     611 non-null    float64 \ndtypes: float64(69), geometry(1), int64(1), object(12)\nmemory usage: 417.1+ KB\n\n\n\ncountry_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_avg_d_kbps_mean\n      mobile_2019_mean_avg_u_kbps_mean\n      mobile_2019_mean_avg_lat_ms_mean\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n    \n  \n  \n    \n      0\n      1\n      -7443.192308\n      KH201400000001\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      400.517056\n      241.495925\n      1.642255\n      0.039165\n      0.031646\n      -0.057352\n      0.180403\n      0.021809\n      0.051515\n      0.000679\n    \n    \n      1\n      2\n      2622.678571\n      KH201400000002\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      -0.058168\n      0.001848\n      -0.032420\n      0.016342\n      -0.035959\n    \n    \n      2\n      3\n      22167.920000\n      KH201400000003\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      125.877798\n      148.723480\n      3.085707\n      0.070522\n      0.044572\n      -0.051005\n      0.034302\n      -0.014772\n      0.022527\n      -0.020030\n    \n    \n      3\n      4\n      32241.826087\n      KH201400000004\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      119.104521\n      118.095280\n      4.132570\n      0.091835\n      0.061222\n      -0.043586\n      0.018604\n      -0.011368\n      0.016522\n      -0.010315\n    \n    \n      4\n      5\n      154111.500000\n      KH201400000005\n      KH\n      2014.0\n      CB\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      690.512786\n      455.932491\n      3.028787\n      0.192019\n      0.104213\n      -0.046168\n      0.641859\n      0.168993\n      0.181978\n      0.110213\n    \n  \n\n5 rows × 83 columns"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#data-preparation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#data-preparation",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = country_data[[label_col]]\n\n# For features, drop all columns from the input country geometries\n# If you need the cluster data, refer to country_data / country_test\ninput_dhs_cols = dhs_gdf.columns\nfeatures = country_data.drop(input_dhs_cols, axis=1)\n\nfeatures.shape, labels.shape\n\n((611, 61), (611, 1))\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nInt64Index: 611 entries, 0 to 610\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          611 non-null    float64\n 1   atm_count                          611 non-null    float64\n 2   atm_nearest                        611 non-null    float64\n 3   bank_count                         611 non-null    float64\n 4   bank_nearest                       611 non-null    float64\n 5   bus_station_count                  611 non-null    float64\n 6   bus_station_nearest                611 non-null    float64\n 7   cafe_count                         611 non-null    float64\n 8   cafe_nearest                       611 non-null    float64\n 9   charging_station_count             611 non-null    float64\n 10  charging_station_nearest           611 non-null    float64\n 11  courthouse_count                   611 non-null    float64\n 12  courthouse_nearest                 611 non-null    float64\n 13  dentist_count                      611 non-null    float64\n 14  dentist_nearest                    611 non-null    float64\n 15  fast_food_count                    611 non-null    float64\n 16  fast_food_nearest                  611 non-null    float64\n 17  fire_station_count                 611 non-null    float64\n 18  fire_station_nearest               611 non-null    float64\n 19  food_court_count                   611 non-null    float64\n 20  food_court_nearest                 611 non-null    float64\n 21  fuel_count                         611 non-null    float64\n 22  fuel_nearest                       611 non-null    float64\n 23  hospital_count                     611 non-null    float64\n 24  hospital_nearest                   611 non-null    float64\n 25  library_count                      611 non-null    float64\n 26  library_nearest                    611 non-null    float64\n 27  marketplace_count                  611 non-null    float64\n 28  marketplace_nearest                611 non-null    float64\n 29  pharmacy_count                     611 non-null    float64\n 30  pharmacy_nearest                   611 non-null    float64\n 31  police_count                       611 non-null    float64\n 32  police_nearest                     611 non-null    float64\n 33  post_box_count                     611 non-null    float64\n 34  post_box_nearest                   611 non-null    float64\n 35  post_office_count                  611 non-null    float64\n 36  post_office_nearest                611 non-null    float64\n 37  restaurant_count                   611 non-null    float64\n 38  restaurant_nearest                 611 non-null    float64\n 39  social_facility_count              611 non-null    float64\n 40  social_facility_nearest            611 non-null    float64\n 41  supermarket_count                  611 non-null    float64\n 42  supermarket_nearest                611 non-null    float64\n 43  townhall_count                     611 non-null    float64\n 44  townhall_nearest                   611 non-null    float64\n 45  road_count                         611 non-null    float64\n 46  fixed_2019_mean_avg_d_kbps_mean    611 non-null    float64\n 47  fixed_2019_mean_avg_u_kbps_mean    611 non-null    float64\n 48  fixed_2019_mean_avg_lat_ms_mean    611 non-null    float64\n 49  fixed_2019_mean_num_tests_mean     611 non-null    float64\n 50  fixed_2019_mean_num_devices_mean   611 non-null    float64\n 51  mobile_2019_mean_avg_d_kbps_mean   611 non-null    float64\n 52  mobile_2019_mean_avg_u_kbps_mean   611 non-null    float64\n 53  mobile_2019_mean_avg_lat_ms_mean   611 non-null    float64\n 54  mobile_2019_mean_num_tests_mean    611 non-null    float64\n 55  mobile_2019_mean_num_devices_mean  611 non-null    float64\n 56  avg_rad_min                        611 non-null    float64\n 57  avg_rad_max                        611 non-null    float64\n 58  avg_rad_mean                       611 non-null    float64\n 59  avg_rad_std                        611 non-null    float64\n 60  avg_rad_median                     611 non-null    float64\ndtypes: float64(61)\nmemory usage: 312.1 KB"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#model-training",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#model-training",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ncv_col = 'ADM1NAME'\ncv_num_splits = 5\ncv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing {cv_num_splits}-fold CV...\")\ncv = RepeatedKFold(n_splits=cv_num_splits, n_repeats=cv_num_repeats, random_state=train_test_seed)\n\nprint(cv.split(features))\n\nPerforming 5-fold CV...\n<generator object _RepeatedSplits.split at 0x7fa2dc7525f0>\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2 - We want a high mean: This means that we achieve a high model performance over the different train/test splits - We want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\nR_cv = cross_val_score(model, features.values, labels.values.ravel(), cv=cv)\nprint(\"Cross validation scores are: \", R_cv)\ncv_mean = round(np.array(R_cv).mean(), 2)\ncv_std = round(np.array(R_cv).std(), 2)\nprint(f\"Cross validation R^2 mean: {cv_mean}\")\nprint(f\"Cross validation R^2 std: {cv_std}\")\n\nCross validation scores are:  [0.76611678 0.56366457 0.64054418 0.76618483 0.75246315 0.71716145\n 0.65715568 0.70557958 0.64619356 0.79230307 0.74961658 0.73708033\n 0.72618977 0.70777305 0.68184612 0.69430202 0.80162189 0.67652439\n 0.66584225 0.7161133  0.65444036 0.64169101 0.7622332  0.74771696\n 0.751735  ]\nCross validation R^2 mean: 0.71\nCross validation R^2 std: 0.06\n\n\n\n\nTrain the final model\nFor training the final model, we train on all the available data.\n\nmodel.fit(features.values, labels.values.ravel())\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#model-evaluation",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#model-evaluation",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Model Evaluation",
    "text": "Model Evaluation\n\nSHAP Feature Importance\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap_values\n\narray([[-1.51703186e+03, -2.99785351e+01,  2.06103228e+02, ...,\n        -4.09378640e+03,  9.52566708e+02, -2.45878638e+04],\n       [-1.26502355e+03, -3.33673184e+01, -1.12980593e+03, ...,\n        -2.84363617e+03, -5.20995418e+02, -2.27357345e+04],\n       [-1.05137166e+03, -3.39866575e+01,  6.50542716e+01, ...,\n        -3.64638895e+03,  4.99895969e+02, -2.45155106e+04],\n       ...,\n       [-1.21486755e+03, -3.31721066e+01,  9.12608259e+03, ...,\n        -5.31760559e+03, -1.86396874e+03, -2.52148312e+04],\n       [-1.32038284e+03, -3.76122246e+01, -1.18354291e+03, ...,\n        -3.19505368e+03,  1.23009854e+03, -3.04844195e+04],\n       [-1.31895487e+03, -3.29175830e+01, -1.43539823e+03, ...,\n        -6.26021778e+03, -3.43578347e+03, -3.51183508e+04]])\n\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")\n\n\n\n\n\nshap.summary_plot(shap_values, features.values, feature_names=features.columns)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored"
  },
  {
    "objectID": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#save-model",
    "href": "notebooks/2023-01-17-initial-model-ph-mm-tl-kh/model_kh.html#save-model",
    "title": "Model Training and Evaluation (Cambodia)",
    "section": "Save Model",
    "text": "Save Model\n\nmodel_save_path = \"./model_kh.pkl\"\nwith open(model_save_path, \"wb\") as file:\n    pickle.dump(model, file)"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html",
    "title": "Cross Country Model Training (Normalized)",
    "section": "",
    "text": "In this notebook, we normalized each model feature by country to correct country-specific feature quirks, as well as the wealth index.\nThis method has been done in a similar study using DHS as training data and was also documented here.\nModels recover how relative values of input data (relative to other locations in that country) correlate with relative values of wealth (also relative to other locations in that country).\nThe current best model setup involves (1) normalizing all features per country using MinMaxScaler and (2) scaling the wealth index per country using StandardScaler\n\nimport sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score, LeaveOneGroupOut\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#set-up-data-access",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#set-up-data-access",
    "title": "Cross Country Model Training (Normalized)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# # Instantiate data managers for Ookla and OSM\n# # This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-02-13 16:07:15.849 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-02-13 16:07:15.851 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#load-countries-from-dhs-data",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#load-countries-from-dhs-data",
    "title": "Cross Country Model Training (Normalized)",
    "section": "Load Countries From DHS data",
    "text": "Load Countries From DHS data\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\nCombine base features for all four countries\nThis section creates countries_data (pd.DataFrame) which combines DHS/Ookla/OSM/VIIRS data for all specified countries.\n\n%%time\n\n# Create list of dataframes per country, and list of all columns appearing in DHS columns\ncountry_data_list = []\ndhs_columns = ['DHSCLUST']\n\nfor country, config in country_config.items():\n    print(f'Loading data for {country}')\n\n    # Load the DHS cluster data\n    dhs_household_dta_path = config['dhs_household_dta_path']\n    dhs_geographic_shp_path = config['dhs_geographic_shp_path']\n    country_code = config['country_code']\n    dhs_gdf = generate_dhs_cluster_level_data(\n        dhs_household_dta_path, \n        dhs_geographic_shp_path, \n        col_rename_config=country_code,\n        convert_geoms_to_bbox=True,\n        bbox_size_km = 2.4\n    ).reset_index(drop=True)\n\n    dhs_columns = list(set(dhs_columns + list(dhs_gdf.columns)))\n    \n\n    # Generate base features for the dhs dataframe\n    country_data = dhs_gdf.copy()\n    country_osm = config['country_osm']\n    ookla_year = config['ookla_year']\n    nightlights_year = config['nightlights_year']\n    \n    # Add in OSM features\n    country_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\n    country_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    country_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\n    country_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    country_data = nightlights.generate_nightlights_feature(country_data, nightlights_year) \n\n    country_data_list.append(country_data)\n\n# Combine all country data into a single dataframe\ncountries_data = gpd.GeoDataFrame(pd.concat(country_data_list,ignore_index=True), crs=country_data_list[0].crs)\n\nLoading data for Philippines\n\n\n2023-02-13 16:08:25.879 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines? True\n2023-02-13 16:08:25.881 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines/gis_osm_pois_free_1.shp\n2023-02-13 16:08:35.008 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines? True\n2023-02-13 16:08:35.009 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines/gis_osm_roads_free_1.shp\n2023-02-13 16:09:59.097 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-13 16:09:59.098 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/2f858b388182d50703550c8ef9d321df.csv? True\n2023-02-13 16:09:59.099 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in filesystem. Loading in cache.\n2023-02-13 16:09:59.538 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df']\n2023-02-13 16:09:59.539 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/5a45dc45080a935951e6c2b6c0052b13.csv? True\n2023-02-13 16:09:59.540 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in filesystem. Loading in cache.\n2023-02-13 16:09:59.921 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nLoading data for Timor Leste\n\n\n2023-02-13 16:10:10.957 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor? True\n2023-02-13 16:10:10.958 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor/gis_osm_pois_free_1.shp\n2023-02-13 16:10:12.045 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor? True\n2023-02-13 16:10:12.046 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor/gis_osm_roads_free_1.shp\n2023-02-13 16:10:12.646 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13']\n2023-02-13 16:10:12.647 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-02-13 16:10:12.648 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-02-13 16:10:12.736 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a']\n2023-02-13 16:10:12.737 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-02-13 16:10:12.738 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-02-13 16:10:12.847 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nLoading data for Cambodia\n\n\n2023-02-13 16:10:17.428 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia? True\n2023-02-13 16:10:17.429 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia/gis_osm_pois_free_1.shp\n2023-02-13 16:10:19.195 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia? True\n2023-02-13 16:10:19.195 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia/gis_osm_roads_free_1.shp\n2023-02-13 16:10:25.192 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d']\n2023-02-13 16:10:25.193 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/37f570ebc130cb44f9dba877fbda74e2.csv? True\n2023-02-13 16:10:25.194 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in filesystem. Loading in cache.\n2023-02-13 16:10:25.393 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2']\n2023-02-13 16:10:25.394 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/1128a917060f7bb88c0a6260ed457091.csv? True\n2023-02-13 16:10:25.395 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in filesystem. Loading in cache.\n2023-02-13 16:10:25.597 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nLoading data for Myanmar\n\n\n2023-02-13 16:10:31.819 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar? True\n2023-02-13 16:10:31.820 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar/gis_osm_pois_free_1.shp\n2023-02-13 16:10:34.204 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar? True\n2023-02-13 16:10:34.205 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar/gis_osm_roads_free_1.shp\n2023-02-13 16:10:51.602 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091']\n2023-02-13 16:10:51.603 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/d72ec7e4d144b750e1c0950ecad081e0.csv? True\n2023-02-13 16:10:51.604 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in filesystem. Loading in cache.\n2023-02-13 16:10:51.740 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0']\n2023-02-13 16:10:51.741 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/2aff65fdf8072457cba0d42873b7a9c2.csv? True\n2023-02-13 16:10:51.742 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in filesystem. Loading in cache.\n2023-02-13 16:10:51.911 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 2min 21s, sys: 1min 9s, total: 3min 30s\nWall time: 3min 37s\n\n\n\n\nInspect the combined target country data\n\ncountries_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 86 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           2720 non-null   int64   \n 1   Wealth Index                       2720 non-null   float64 \n 2   DHSID                              2720 non-null   object  \n 3   DHSCC                              2720 non-null   object  \n 4   DHSYEAR                            2720 non-null   float64 \n 5   CCFIPS                             2720 non-null   object  \n 6   ADM1FIPS                           2720 non-null   object  \n 7   ADM1FIPSNA                         2720 non-null   object  \n 8   ADM1SALBNA                         2720 non-null   object  \n 9   ADM1SALBCO                         2720 non-null   object  \n 10  ADM1DHS                            2720 non-null   float64 \n 11  ADM1NAME                           2720 non-null   object  \n 12  DHSREGCO                           2720 non-null   float64 \n 13  DHSREGNA                           2720 non-null   object  \n 14  SOURCE                             2720 non-null   object  \n 15  URBAN_RURA                         2720 non-null   object  \n 16  LATNUM                             2720 non-null   float64 \n 17  LONGNUM                            2720 non-null   float64 \n 18  ALT_GPS                            2720 non-null   float64 \n 19  ALT_DEM                            2720 non-null   float64 \n 20  DATUM                              2720 non-null   object  \n 21  geometry                           2720 non-null   geometry\n 22  poi_count                          2720 non-null   float64 \n 23  atm_count                          2720 non-null   float64 \n 24  atm_nearest                        2720 non-null   float64 \n 25  bank_count                         2720 non-null   float64 \n 26  bank_nearest                       2720 non-null   float64 \n 27  bus_station_count                  2720 non-null   float64 \n 28  bus_station_nearest                2720 non-null   float64 \n 29  cafe_count                         2720 non-null   float64 \n 30  cafe_nearest                       2720 non-null   float64 \n 31  charging_station_count             2720 non-null   float64 \n 32  charging_station_nearest           2720 non-null   float64 \n 33  courthouse_count                   2720 non-null   float64 \n 34  courthouse_nearest                 2720 non-null   float64 \n 35  dentist_count                      2720 non-null   float64 \n 36  dentist_nearest                    2720 non-null   float64 \n 37  fast_food_count                    2720 non-null   float64 \n 38  fast_food_nearest                  2720 non-null   float64 \n 39  fire_station_count                 2720 non-null   float64 \n 40  fire_station_nearest               2720 non-null   float64 \n 41  food_court_count                   2720 non-null   float64 \n 42  food_court_nearest                 2720 non-null   float64 \n 43  fuel_count                         2720 non-null   float64 \n 44  fuel_nearest                       2720 non-null   float64 \n 45  hospital_count                     2720 non-null   float64 \n 46  hospital_nearest                   2720 non-null   float64 \n 47  library_count                      2720 non-null   float64 \n 48  library_nearest                    2720 non-null   float64 \n 49  marketplace_count                  2720 non-null   float64 \n 50  marketplace_nearest                2720 non-null   float64 \n 51  pharmacy_count                     2720 non-null   float64 \n 52  pharmacy_nearest                   2720 non-null   float64 \n 53  police_count                       2720 non-null   float64 \n 54  police_nearest                     2720 non-null   float64 \n 55  post_box_count                     2720 non-null   float64 \n 56  post_box_nearest                   2720 non-null   float64 \n 57  post_office_count                  2720 non-null   float64 \n 58  post_office_nearest                2720 non-null   float64 \n 59  restaurant_count                   2720 non-null   float64 \n 60  restaurant_nearest                 2720 non-null   float64 \n 61  social_facility_count              2720 non-null   float64 \n 62  social_facility_nearest            2720 non-null   float64 \n 63  supermarket_count                  2720 non-null   float64 \n 64  supermarket_nearest                2720 non-null   float64 \n 65  townhall_count                     2720 non-null   float64 \n 66  townhall_nearest                   2720 non-null   float64 \n 67  road_count                         2720 non-null   float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    1443 non-null   float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    1443 non-null   float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    1443 non-null   float64 \n 71  fixed_2019_mean_num_tests_mean     1443 non-null   float64 \n 72  fixed_2019_mean_num_devices_mean   1443 non-null   float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   1707 non-null   float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   1707 non-null   float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   1707 non-null   float64 \n 76  mobile_2019_mean_num_tests_mean    1707 non-null   float64 \n 77  mobile_2019_mean_num_devices_mean  1707 non-null   float64 \n 78  avg_rad_min                        2720 non-null   float64 \n 79  avg_rad_max                        2720 non-null   float64 \n 80  avg_rad_mean                       2720 non-null   float64 \n 81  avg_rad_std                        2720 non-null   float64 \n 82  avg_rad_median                     2720 non-null   float64 \n 83  F21                                0 non-null      object  \n 84  F22                                0 non-null      object  \n 85  F23                                0 non-null      object  \ndtypes: float64(69), geometry(1), int64(1), object(15)\nmemory usage: 1.8+ MB\n\n\n\n# Check if DHS CC can be used as a country grouping column\ncountries_data['DHSCC'].value_counts()\n\nPH    1213\nKH     611\nTL     455\nMM     441\nName: DHSCC, dtype: int64\n\n\n\n# Explore as a map with first 30 columns in tooltip\n#countries_data.iloc[:, :30].explore()"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#data-preparation",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#data-preparation",
    "title": "Cross Country Model Training (Normalized)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\ngroup_col = 'DHSCC'\n##normalize_labels = 'single-country' # False, 'cross-country' or 'single_country'\nnormalize_labels = 'cross-country'\n\n\ndrop_cols = ['DHSID', 'DHSYEAR', 'CCFIPS',\n       'ADM1FIPS', 'ADM1FIPSNA', 'ADM1SALBNA', 'ADM1SALBCO', 'ADM1DHS',\n       'ADM1NAME', 'DHSREGCO', 'DHSREGNA', 'SOURCE', 'LATNUM',\n       'LONGNUM', 'ALT_GPS', 'ALT_DEM', 'DATUM','F21','F22','F23','URBAN_RURA']\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = countries_data[[label_col]]\n\n# For features, drop all columns from the input dhs files\n# If you need the cluster data, refer to country_data / country_test\nfeatures = countries_data.drop(drop_cols, axis=1).copy()\n\nfeatures.shape, labels.shape\n\n((2720, 65), (2720, 1))\n\n\n\n\nNormalize labels and features\n\ndef scale_col(X,scaler):\n    X_ = np.atleast_2d(X)\n    return pd.DataFrame(scaler.fit_transform(X_), X.index)\n\n\nfeature_cols = features.columns[4:].tolist()\nprint(feature_cols)\n\n['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest', 'bus_station_count', 'bus_station_nearest', 'cafe_count', 'cafe_nearest', 'charging_station_count', 'charging_station_nearest', 'courthouse_count', 'courthouse_nearest', 'dentist_count', 'dentist_nearest', 'fast_food_count', 'fast_food_nearest', 'fire_station_count', 'fire_station_nearest', 'food_court_count', 'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count', 'hospital_nearest', 'library_count', 'library_nearest', 'marketplace_count', 'marketplace_nearest', 'pharmacy_count', 'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count', 'post_box_nearest', 'post_office_count', 'post_office_nearest', 'restaurant_count', 'restaurant_nearest', 'social_facility_count', 'social_facility_nearest', 'supermarket_count', 'supermarket_nearest', 'townhall_count', 'townhall_nearest', 'road_count', 'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean', 'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean', 'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean', 'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean', 'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean', 'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std', 'avg_rad_median']\n\n\n\n#scale features\nscaler = StandardScaler()\nfor col in feature_cols:\n    print(col)\n    features[col+'_scaled'] = features.groupby(group_col, group_keys=False)[[col]].apply(scale_col, scaler=scaler)\nprint(features.columns)\n\npoi_count\natm_count\natm_nearest\nbank_count\nbank_nearest\nbus_station_count\nbus_station_nearest\ncafe_count\ncafe_nearest\ncharging_station_count\ncharging_station_nearest\ncourthouse_count\ncourthouse_nearest\ndentist_count\ndentist_nearest\nfast_food_count\nfast_food_nearest\nfire_station_count\nfire_station_nearest\nfood_court_count\nfood_court_nearest\nfuel_count\nfuel_nearest\nhospital_count\nhospital_nearest\nlibrary_count\nlibrary_nearest\nmarketplace_count\nmarketplace_nearest\npharmacy_count\npharmacy_nearest\npolice_count\npolice_nearest\npost_box_count\npost_box_nearest\npost_office_count\npost_office_nearest\nrestaurant_count\nrestaurant_nearest\nsocial_facility_count\nsocial_facility_nearest\nsupermarket_count\nsupermarket_nearest\ntownhall_count\ntownhall_nearest\nroad_count\nfixed_2019_mean_avg_d_kbps_mean\nfixed_2019_mean_avg_u_kbps_mean\nfixed_2019_mean_avg_lat_ms_mean\nfixed_2019_mean_num_tests_mean\nfixed_2019_mean_num_devices_mean\nmobile_2019_mean_avg_d_kbps_mean\nmobile_2019_mean_avg_u_kbps_mean\nmobile_2019_mean_avg_lat_ms_mean\nmobile_2019_mean_num_tests_mean\nmobile_2019_mean_num_devices_mean\navg_rad_min\navg_rad_max\navg_rad_mean\navg_rad_std\navg_rad_median\nIndex(['DHSCLUST', 'Wealth Index', 'DHSCC', 'geometry', 'poi_count',\n       'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count',\n       ...\n       'mobile_2019_mean_avg_d_kbps_mean_scaled',\n       'mobile_2019_mean_avg_u_kbps_mean_scaled',\n       'mobile_2019_mean_avg_lat_ms_mean_scaled',\n       'mobile_2019_mean_num_tests_mean_scaled',\n       'mobile_2019_mean_num_devices_mean_scaled', 'avg_rad_min_scaled',\n       'avg_rad_max_scaled', 'avg_rad_mean_scaled', 'avg_rad_std_scaled',\n       'avg_rad_median_scaled'],\n      dtype='object', length=126)\n\n\n\n# fill nas with 0\nfeatures = features.fillna(0)\n\n\n# # scale labels\nscaler = StandardScaler()\nlabels = countries_data[[group_col,label_col]].groupby(group_col, group_keys=False)[[label_col]].apply(scale_col, scaler=scaler)\nplt.hist(labels)\n\n(array([ 16.,  85., 442., 702., 533., 379., 308., 179.,  68.,   8.]),\n array([-2.65317484, -2.0616477 , -1.47012056, -0.87859342, -0.28706627,\n         0.30446087,  0.89598801,  1.48751515,  2.0790423 ,  2.67056944,\n         3.26209658]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\n# keep only scaled columns\nfeatures = features[[col+'_scaled' for col in feature_cols]]\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          2720 non-null   float64\n 1   atm_count_scaled                          2720 non-null   float64\n 2   atm_nearest_scaled                        2720 non-null   float64\n 3   bank_count_scaled                         2720 non-null   float64\n 4   bank_nearest_scaled                       2720 non-null   float64\n 5   bus_station_count_scaled                  2720 non-null   float64\n 6   bus_station_nearest_scaled                2720 non-null   float64\n 7   cafe_count_scaled                         2720 non-null   float64\n 8   cafe_nearest_scaled                       2720 non-null   float64\n 9   charging_station_count_scaled             2720 non-null   float64\n 10  charging_station_nearest_scaled           2720 non-null   float64\n 11  courthouse_count_scaled                   2720 non-null   float64\n 12  courthouse_nearest_scaled                 2720 non-null   float64\n 13  dentist_count_scaled                      2720 non-null   float64\n 14  dentist_nearest_scaled                    2720 non-null   float64\n 15  fast_food_count_scaled                    2720 non-null   float64\n 16  fast_food_nearest_scaled                  2720 non-null   float64\n 17  fire_station_count_scaled                 2720 non-null   float64\n 18  fire_station_nearest_scaled               2720 non-null   float64\n 19  food_court_count_scaled                   2720 non-null   float64\n 20  food_court_nearest_scaled                 2720 non-null   float64\n 21  fuel_count_scaled                         2720 non-null   float64\n 22  fuel_nearest_scaled                       2720 non-null   float64\n 23  hospital_count_scaled                     2720 non-null   float64\n 24  hospital_nearest_scaled                   2720 non-null   float64\n 25  library_count_scaled                      2720 non-null   float64\n 26  library_nearest_scaled                    2720 non-null   float64\n 27  marketplace_count_scaled                  2720 non-null   float64\n 28  marketplace_nearest_scaled                2720 non-null   float64\n 29  pharmacy_count_scaled                     2720 non-null   float64\n 30  pharmacy_nearest_scaled                   2720 non-null   float64\n 31  police_count_scaled                       2720 non-null   float64\n 32  police_nearest_scaled                     2720 non-null   float64\n 33  post_box_count_scaled                     2720 non-null   float64\n 34  post_box_nearest_scaled                   2720 non-null   float64\n 35  post_office_count_scaled                  2720 non-null   float64\n 36  post_office_nearest_scaled                2720 non-null   float64\n 37  restaurant_count_scaled                   2720 non-null   float64\n 38  restaurant_nearest_scaled                 2720 non-null   float64\n 39  social_facility_count_scaled              2720 non-null   float64\n 40  social_facility_nearest_scaled            2720 non-null   float64\n 41  supermarket_count_scaled                  2720 non-null   float64\n 42  supermarket_nearest_scaled                2720 non-null   float64\n 43  townhall_count_scaled                     2720 non-null   float64\n 44  townhall_nearest_scaled                   2720 non-null   float64\n 45  road_count_scaled                         2720 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    2720 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    2720 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    2720 non-null   float64\n 49  fixed_2019_mean_num_tests_mean_scaled     2720 non-null   float64\n 50  fixed_2019_mean_num_devices_mean_scaled   2720 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   2720 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   2720 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   2720 non-null   float64\n 54  mobile_2019_mean_num_tests_mean_scaled    2720 non-null   float64\n 55  mobile_2019_mean_num_devices_mean_scaled  2720 non-null   float64\n 56  avg_rad_min_scaled                        2720 non-null   float64\n 57  avg_rad_max_scaled                        2720 non-null   float64\n 58  avg_rad_mean_scaled                       2720 non-null   float64\n 59  avg_rad_std_scaled                        2720 non-null   float64\n 60  avg_rad_median_scaled                     2720 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.3 MB"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#model-training",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-02-06_crosscountry_normalized.html#model-training",
    "title": "Cross Country Model Training (Normalized)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ngroupkfold_col = 'DHSCC'\n# cv_num_splits = 5\n# cv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing GroupKFold CV with groups based on DHSCC...\")\ngroups = countries_data[groupkfold_col].values\ncv = GroupKFold(n_splits = len(set(groups)))\n\nprint(cv.split(features, groups=groups))\nprint(f'Number of splits based on DHSCC unique values: {cv.get_n_splits()}')\n\nPerforming GroupKFold CV with groups based on DHSCC...\n<generator object _BaseKFold.split at 0x7f6d50d022e0>\nNumber of splits based on DHSCC unique values: 4\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\n\nsplit_r2_list = []\n\nfor i, (train, test) in enumerate(cv.split(features, labels,groups=groups)):\n    print(f'Split# {i+1}')\n\n    # Print info about current split\n    train_labels = set(groups[train])\n    test_labels = set(groups[test])\n    print(f'Train countries (num samples): {train_labels} ({len(train)})')\n    print(f'Test countries (num samples): {test_labels} ({len(test)})')\n\n    # Split data into train/test\n    X_train = features.values[train]\n    X_test = features.values[test]\n    y_train = labels.values.ravel()[train]\n    y_test = labels.values.ravel()[test]\n\n    # print('Input shapes (X_train, X_test, y_train, y_test): ',np.shape(X_train), np.shape(X_test), np.shape(y_train), np.shape(y_test))\n\n    # Train model and get r2\n    model.fit(X_train, y_train)\n    split_r2 = r2_score(y_test, model.predict(X_test))\n    split_r2_list.append(split_r2)\n    print(f'Split r^2: {split_r2} \\n')\n\n    # Plot histogram of labels\n    fig, ax = plt.subplots(2,1, sharex=True, figsize=(5,4))\n    ax[0].hist(y_train)\n    ax[0].set_title(f'train countries: {train_labels}')\n    ax[1].hist(y_test)\n    ax[1].set_title(f'test countries: {test_labels}')\n    ax[1].set_xlabel('Wealth Index')\n    fig.suptitle(f'Split# {i+1} Labels (model $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\n    # Plot scatter plot\n    fig, ax = plt.subplots(1,1, figsize=(5,4))\n    ax.scatter(y_train, model.predict(X_train), label=\"train\")\n    ax.scatter(y_test, model.predict(X_test), label=\"test\")\n    ax.plot([0,1],[0,1], transform=ax.transAxes, linestyle='dashed', color='k')\n    ax.set_xlabel(\"True Value\")\n    ax.set_ylabel(\"Predicted Value\")\n    ax.legend()    \n    fig.suptitle(f'Split#{i+1} (test $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\nsplit_r2_mean = round(np.array(split_r2_list).mean(), 4)\nsplit_r2_std = round(np.array(split_r2_list).std(), 4)\nprint(f'Mean split r^2  (std): {split_r2_mean} ({split_r2_std})')\n\n\nSplit# 1\nTrain countries (num samples): {'KH', 'MM', 'TL'} (1507)\nTest countries (num samples): {'PH'} (1213)\nSplit r^2: 0.48054801637734346 \n\n\n\n\n\n\n\n\n\nSplit# 2\nTrain countries (num samples): {'MM', 'TL', 'PH'} (2109)\nTest countries (num samples): {'KH'} (611)\nSplit r^2: 0.5834437437650173 \n\n\n\n\n\n\n\n\n\nSplit# 3\nTrain countries (num samples): {'KH', 'MM', 'PH'} (2265)\nTest countries (num samples): {'TL'} (455)\nSplit r^2: 0.5350537480791098 \n\n\n\n\n\n\n\n\n\nSplit# 4\nTrain countries (num samples): {'KH', 'TL', 'PH'} (2279)\nTest countries (num samples): {'MM'} (441)\nSplit r^2: 0.5055486937348812 \n\n\n\n\n\n\n\n\n\nMean split r^2  (std): 0.5261 (0.0383)\n\n\n\n# explainer = shap.TreeExplainer(model)\n# shap_values = explainer.shap_values(features)\n\n\n# shap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html",
    "title": "Cross Country Model Training (Initial)",
    "section": "",
    "text": "import sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score, LeaveOneGroupOut\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import r2_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#set-up-data-access",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#set-up-data-access",
    "title": "Cross Country Model Training (Initial)",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# Instantiate data managers for Ookla and OSM\n# This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-02-01 17:56:42.977 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-02-01 17:56:43.004 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#load-countries-from-dhs-data",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#load-countries-from-dhs-data",
    "title": "Cross Country Model Training (Initial)",
    "section": "Load Countries From DHS data",
    "text": "Load Countries From DHS data\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\nCombine base features for all four countries\nThis section creates countries_data (pd.DataFrame) which combines DHS/Ookla/OSM/VIIRS data for all specified countries.\n\n%%time\n\n# Create list of dataframes per country, and list of all columns appearing in DHS columns\ncountry_data_list = []\ndhs_columns = ['DHSCLUST']\n\nfor country, config in country_config.items():\n    print(f'Loading data for {country}')\n\n    # Load the DHS cluster data\n    dhs_household_dta_path = config['dhs_household_dta_path']\n    dhs_geographic_shp_path = config['dhs_geographic_shp_path']\n    country_code = config['country_code']\n    dhs_gdf = generate_dhs_cluster_level_data(\n        dhs_household_dta_path, \n        dhs_geographic_shp_path, \n        col_rename_config=country_code,\n        convert_geoms_to_bbox=True,\n        bbox_size_km = 2.4\n    ).reset_index(drop=True)\n\n    dhs_columns = list(set(dhs_columns + list(dhs_gdf.columns)))\n    \n\n    # Generate base features for the dhs dataframe\n    country_data = dhs_gdf.copy()\n    country_osm = config['country_osm']\n    ookla_year = config['ookla_year']\n    nightlights_year = config['nightlights_year']\n    \n    # Add in OSM features\n    country_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\n    country_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    country_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\n    country_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    country_data = nightlights.generate_nightlights_feature(country_data, nightlights_year) \n\n    country_data_list.append(country_data)\n\n# Combine all country data into a single dataframe\ncountries_data = gpd.GeoDataFrame(pd.concat(country_data_list,ignore_index=True), crs=country_data_list[0].crs)\n\nLoading data for Philippines\n\n\n2023-02-01 17:57:28.523 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines? True\n2023-02-01 17:57:28.525 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for philippines being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines/gis_osm_pois_free_1.shp\n2023-02-01 17:57:47.606 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines? True\n2023-02-01 17:57:47.607 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for philippines being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/philippines/gis_osm_roads_free_1.shp\n2023-02-01 17:59:44.713 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-02-01 17:59:44.716 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/2f858b388182d50703550c8ef9d321df.csv? True\n2023-02-01 17:59:44.717 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in filesystem. Loading in cache.\n2023-02-01 17:59:45.673 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df']\n2023-02-01 17:59:45.674 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/5a45dc45080a935951e6c2b6c0052b13.csv? True\n2023-02-01 17:59:45.675 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in filesystem. Loading in cache.\n2023-02-01 17:59:46.304 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nLoading data for Timor Leste\n\n\n2023-02-01 18:00:10.758 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor? True\n2023-02-01 18:00:10.759 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor/gis_osm_pois_free_1.shp\n2023-02-01 18:00:12.613 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor? True\n2023-02-01 18:00:12.615 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/east-timor/gis_osm_roads_free_1.shp\n2023-02-01 18:00:14.292 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13']\n2023-02-01 18:00:14.305 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-02-01 18:00:14.306 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-02-01 18:00:14.480 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a']\n2023-02-01 18:00:14.481 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-02-01 18:00:14.482 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-02-01 18:00:14.682 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nLoading data for Cambodia\n\n\n2023-02-01 18:00:25.204 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia? True\n2023-02-01 18:00:25.205 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for cambodia being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia/gis_osm_pois_free_1.shp\n2023-02-01 18:00:29.028 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia? True\n2023-02-01 18:00:29.030 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for cambodia being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/cambodia/gis_osm_roads_free_1.shp\n2023-02-01 18:00:40.896 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d']\n2023-02-01 18:00:40.897 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/37f570ebc130cb44f9dba877fbda74e2.csv? True\n2023-02-01 18:00:40.898 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in filesystem. Loading in cache.\n2023-02-01 18:00:41.164 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2']\n2023-02-01 18:00:41.165 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/1128a917060f7bb88c0a6260ed457091.csv? True\n2023-02-01 18:00:41.166 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in filesystem. Loading in cache.\n2023-02-01 18:00:41.429 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nLoading data for Myanmar\n\n\n2023-02-01 18:00:53.404 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar? True\n2023-02-01 18:00:53.405 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for myanmar being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar/gis_osm_pois_free_1.shp\n2023-02-01 18:00:57.932 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar? True\n2023-02-01 18:00:57.933 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for myanmar being loaded from /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/osm/myanmar/gis_osm_roads_free_1.shp\n2023-02-01 18:01:25.726 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091']\n2023-02-01 18:01:25.727 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/d72ec7e4d144b750e1c0950ecad081e0.csv? True\n2023-02-01 18:01:25.727 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in filesystem. Loading in cache.\n2023-02-01 18:01:25.912 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0']\n2023-02-01 18:01:25.913 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jc_tm/project_repos/unicef-ai4d-poverty-mapping/notebooks/2023-01-24-dhs-cross-country-experiments/../../data/data_cache/ookla/processed/2aff65fdf8072457cba0d42873b7a9c2.csv? True\n2023-02-01 18:01:25.914 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in filesystem. Loading in cache.\n2023-02-01 18:01:26.117 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jc_tm/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 4min 10s, sys: 19.7 s, total: 4min 29s\nWall time: 4min 44s\n\n\n\ndhs_columns\n\n['DHSREGCO',\n 'DHSCLUST',\n 'SOURCE',\n 'ADM1FIPSNA',\n 'DHSID',\n 'CCFIPS',\n 'ADM1FIPS',\n 'DHSREGNA',\n 'ALT_DEM',\n 'ADM1SALBCO',\n 'ADM1DHS',\n 'DHSYEAR',\n 'Wealth Index',\n 'DHSCC',\n 'DATUM',\n 'ADM1NAME',\n 'F21',\n 'URBAN_RURA',\n 'F22',\n 'LATNUM',\n 'geometry',\n 'ADM1SALBNA',\n 'F23',\n 'ALT_GPS',\n 'LONGNUM']\n\n\n\n\nInspect the combined target country data\n\ncountries_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 86 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           2720 non-null   int64   \n 1   Wealth Index                       2720 non-null   float64 \n 2   DHSID                              2720 non-null   object  \n 3   DHSCC                              2720 non-null   object  \n 4   DHSYEAR                            2720 non-null   float64 \n 5   CCFIPS                             2720 non-null   object  \n 6   ADM1FIPS                           2720 non-null   object  \n 7   ADM1FIPSNA                         2720 non-null   object  \n 8   ADM1SALBNA                         2720 non-null   object  \n 9   ADM1SALBCO                         2720 non-null   object  \n 10  ADM1DHS                            2720 non-null   float64 \n 11  ADM1NAME                           2720 non-null   object  \n 12  DHSREGCO                           2720 non-null   float64 \n 13  DHSREGNA                           2720 non-null   object  \n 14  SOURCE                             2720 non-null   object  \n 15  URBAN_RURA                         2720 non-null   object  \n 16  LATNUM                             2720 non-null   float64 \n 17  LONGNUM                            2720 non-null   float64 \n 18  ALT_GPS                            2720 non-null   float64 \n 19  ALT_DEM                            2720 non-null   float64 \n 20  DATUM                              2720 non-null   object  \n 21  geometry                           2720 non-null   geometry\n 22  poi_count                          2720 non-null   float64 \n 23  atm_count                          2720 non-null   float64 \n 24  atm_nearest                        2720 non-null   float64 \n 25  bank_count                         2720 non-null   float64 \n 26  bank_nearest                       2720 non-null   float64 \n 27  bus_station_count                  2720 non-null   float64 \n 28  bus_station_nearest                2720 non-null   float64 \n 29  cafe_count                         2720 non-null   float64 \n 30  cafe_nearest                       2720 non-null   float64 \n 31  charging_station_count             2720 non-null   float64 \n 32  charging_station_nearest           2720 non-null   float64 \n 33  courthouse_count                   2720 non-null   float64 \n 34  courthouse_nearest                 2720 non-null   float64 \n 35  dentist_count                      2720 non-null   float64 \n 36  dentist_nearest                    2720 non-null   float64 \n 37  fast_food_count                    2720 non-null   float64 \n 38  fast_food_nearest                  2720 non-null   float64 \n 39  fire_station_count                 2720 non-null   float64 \n 40  fire_station_nearest               2720 non-null   float64 \n 41  food_court_count                   2720 non-null   float64 \n 42  food_court_nearest                 2720 non-null   float64 \n 43  fuel_count                         2720 non-null   float64 \n 44  fuel_nearest                       2720 non-null   float64 \n 45  hospital_count                     2720 non-null   float64 \n 46  hospital_nearest                   2720 non-null   float64 \n 47  library_count                      2720 non-null   float64 \n 48  library_nearest                    2720 non-null   float64 \n 49  marketplace_count                  2720 non-null   float64 \n 50  marketplace_nearest                2720 non-null   float64 \n 51  pharmacy_count                     2720 non-null   float64 \n 52  pharmacy_nearest                   2720 non-null   float64 \n 53  police_count                       2720 non-null   float64 \n 54  police_nearest                     2720 non-null   float64 \n 55  post_box_count                     2720 non-null   float64 \n 56  post_box_nearest                   2720 non-null   float64 \n 57  post_office_count                  2720 non-null   float64 \n 58  post_office_nearest                2720 non-null   float64 \n 59  restaurant_count                   2720 non-null   float64 \n 60  restaurant_nearest                 2720 non-null   float64 \n 61  social_facility_count              2720 non-null   float64 \n 62  social_facility_nearest            2720 non-null   float64 \n 63  supermarket_count                  2720 non-null   float64 \n 64  supermarket_nearest                2720 non-null   float64 \n 65  townhall_count                     2720 non-null   float64 \n 66  townhall_nearest                   2720 non-null   float64 \n 67  road_count                         2720 non-null   float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    1443 non-null   float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    1443 non-null   float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    1443 non-null   float64 \n 71  fixed_2019_mean_num_tests_mean     1443 non-null   float64 \n 72  fixed_2019_mean_num_devices_mean   1443 non-null   float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   1707 non-null   float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   1707 non-null   float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   1707 non-null   float64 \n 76  mobile_2019_mean_num_tests_mean    1707 non-null   float64 \n 77  mobile_2019_mean_num_devices_mean  1707 non-null   float64 \n 78  avg_rad_min                        2720 non-null   float64 \n 79  avg_rad_max                        2720 non-null   float64 \n 80  avg_rad_mean                       2720 non-null   float64 \n 81  avg_rad_std                        2720 non-null   float64 \n 82  avg_rad_median                     2720 non-null   float64 \n 83  F21                                0 non-null      object  \n 84  F22                                0 non-null      object  \n 85  F23                                0 non-null      object  \ndtypes: float64(69), geometry(1), int64(1), object(15)\nmemory usage: 1.8+ MB\n\n\n\ncountries_data.head()\n\n\n\n\n\n  \n    \n      \n      DHSCLUST\n      Wealth Index\n      DHSID\n      DHSCC\n      DHSYEAR\n      CCFIPS\n      ADM1FIPS\n      ADM1FIPSNA\n      ADM1SALBNA\n      ADM1SALBCO\n      ...\n      mobile_2019_mean_num_tests_mean\n      mobile_2019_mean_num_devices_mean\n      avg_rad_min\n      avg_rad_max\n      avg_rad_mean\n      avg_rad_std\n      avg_rad_median\n      F21\n      F22\n      F23\n    \n  \n  \n    \n      0\n      1\n      -31881.608696\n      PH201700000001\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.008752\n      0.008752\n      0.226479\n      0.303841\n      0.257313\n      0.020025\n      0.260396\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      2\n      -2855.375000\n      PH201700000002\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.198795\n      0.119334\n      0.261510\n      6.881082\n      1.390439\n      1.719010\n      0.452909\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      3\n      -57647.047619\n      PH201700000003\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      0.075383\n      0.049202\n      0.224655\n      0.865518\n      0.343708\n      0.146519\n      0.288261\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      4\n      -54952.666667\n      PH201700000004\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      0.203245\n      0.264794\n      0.227876\n      0.016931\n      0.226401\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      6\n      -80701.695652\n      PH201700000006\n      PH\n      2017.0\n      NULL\n      NULL\n      NULL\n      NULL\n      NULL\n      ...\n      NaN\n      NaN\n      0.232324\n      0.285085\n      0.250609\n      0.012259\n      0.246076\n      NaN\n      NaN\n      NaN\n    \n  \n\n5 rows × 86 columns\n\n\n\n\n# Check if DHS CC can be used as a country grouping column\ncountries_data['DHSCC'].value_counts()\n\nPH    1213\nKH     611\nTL     455\nMM     441\nName: DHSCC, dtype: int64\n\n\n\n# Explore as a map with first 30 columns in tooltip\ncountries_data.iloc[:, :30].explore()\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#data-preparation",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#data-preparation",
    "title": "Cross Country Model Training (Initial)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\nnormalize_labels = 'single-country' # False, 'cross-country' or 'single_country'\n# normalize_labels = 'cross-country'\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = countries_data[[label_col]]\n\n# For features, drop all columns from the input dhs files\n# If you need the cluster data, refer to country_data / country_test\nfeatures = countries_data.drop(dhs_columns, axis=1)\n\nfeatures.shape, labels.shape\n\n((2720, 61), (2720, 1))\n\n\n\n\nNormalize labels\n\nif normalize_labels is not False:\n    scaler = MinMaxScaler(feature_range=(0,1))\n    if normalize_labels == 'cross-country':      \n        labels[labels.columns] = scaler.fit_transform(labels)\n    elif normalize_labels == 'single-country':\n        labels_temp = labels.copy()\n        labels_temp['group_col'] = countries_data['DHSCC']\n        labels_temp[f'{label_col}_scaled'] = labels_temp.groupby('group_col', group_keys=False)[label_col].apply(lambda x: (x-min(x))/(max(x)-min(x)))\n        labels[label_col] = labels_temp[f'{label_col}_scaled']\ndisplay(labels)\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n  \n    \n      \n      Wealth Index\n    \n  \n  \n    \n      0\n      0.374681\n    \n    \n      1\n      0.446489\n    \n    \n      2\n      0.310939\n    \n    \n      3\n      0.317605\n    \n    \n      4\n      0.253904\n    \n    \n      ...\n      ...\n    \n    \n      2715\n      0.593194\n    \n    \n      2716\n      0.328432\n    \n    \n      2717\n      0.485159\n    \n    \n      2718\n      0.398905\n    \n    \n      2719\n      0.791023\n    \n  \n\n2720 rows × 1 columns\n\n\n\n\n# Clean features\n# For now, just impute nans with 0\n# TODO: Implement other cleaning steps\nfeatures = features.fillna(0)\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 61 columns):\n #   Column                             Non-Null Count  Dtype  \n---  ------                             --------------  -----  \n 0   poi_count                          2720 non-null   float64\n 1   atm_count                          2720 non-null   float64\n 2   atm_nearest                        2720 non-null   float64\n 3   bank_count                         2720 non-null   float64\n 4   bank_nearest                       2720 non-null   float64\n 5   bus_station_count                  2720 non-null   float64\n 6   bus_station_nearest                2720 non-null   float64\n 7   cafe_count                         2720 non-null   float64\n 8   cafe_nearest                       2720 non-null   float64\n 9   charging_station_count             2720 non-null   float64\n 10  charging_station_nearest           2720 non-null   float64\n 11  courthouse_count                   2720 non-null   float64\n 12  courthouse_nearest                 2720 non-null   float64\n 13  dentist_count                      2720 non-null   float64\n 14  dentist_nearest                    2720 non-null   float64\n 15  fast_food_count                    2720 non-null   float64\n 16  fast_food_nearest                  2720 non-null   float64\n 17  fire_station_count                 2720 non-null   float64\n 18  fire_station_nearest               2720 non-null   float64\n 19  food_court_count                   2720 non-null   float64\n 20  food_court_nearest                 2720 non-null   float64\n 21  fuel_count                         2720 non-null   float64\n 22  fuel_nearest                       2720 non-null   float64\n 23  hospital_count                     2720 non-null   float64\n 24  hospital_nearest                   2720 non-null   float64\n 25  library_count                      2720 non-null   float64\n 26  library_nearest                    2720 non-null   float64\n 27  marketplace_count                  2720 non-null   float64\n 28  marketplace_nearest                2720 non-null   float64\n 29  pharmacy_count                     2720 non-null   float64\n 30  pharmacy_nearest                   2720 non-null   float64\n 31  police_count                       2720 non-null   float64\n 32  police_nearest                     2720 non-null   float64\n 33  post_box_count                     2720 non-null   float64\n 34  post_box_nearest                   2720 non-null   float64\n 35  post_office_count                  2720 non-null   float64\n 36  post_office_nearest                2720 non-null   float64\n 37  restaurant_count                   2720 non-null   float64\n 38  restaurant_nearest                 2720 non-null   float64\n 39  social_facility_count              2720 non-null   float64\n 40  social_facility_nearest            2720 non-null   float64\n 41  supermarket_count                  2720 non-null   float64\n 42  supermarket_nearest                2720 non-null   float64\n 43  townhall_count                     2720 non-null   float64\n 44  townhall_nearest                   2720 non-null   float64\n 45  road_count                         2720 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean    2720 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean    2720 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean    2720 non-null   float64\n 49  fixed_2019_mean_num_tests_mean     2720 non-null   float64\n 50  fixed_2019_mean_num_devices_mean   2720 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean   2720 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean   2720 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean   2720 non-null   float64\n 54  mobile_2019_mean_num_tests_mean    2720 non-null   float64\n 55  mobile_2019_mean_num_devices_mean  2720 non-null   float64\n 56  avg_rad_min                        2720 non-null   float64\n 57  avg_rad_max                        2720 non-null   float64\n 58  avg_rad_mean                       2720 non-null   float64\n 59  avg_rad_std                        2720 non-null   float64\n 60  avg_rad_median                     2720 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.3 MB"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#model-training",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#model-training",
    "title": "Cross Country Model Training (Initial)",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ngroupkfold_col = 'DHSCC'\n# cv_num_splits = 5\n# cv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing GroupKFold CV with groups based on DHSCC...\")\ngroups = countries_data[groupkfold_col].values\ncv = GroupKFold(n_splits = len(set(groups)))\n\nprint(cv.split(features, groups=groups))\nprint(f'Number of splits based on DHSCC unique values: {cv.get_n_splits()}')\n\nPerforming GroupKFold CV with groups based on DHSCC...\n<generator object _BaseKFold.split at 0x7f389b71d200>\nNumber of splits based on DHSCC unique values: 4\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\n\nsplit_r2_list = []\n\nfor i, (train, test) in enumerate(cv.split(features, labels,groups=groups)):\n    print(f'Split# {i+1}')\n\n    # Print info about current split\n    train_labels = set(groups[train])\n    test_labels = set(groups[test])\n    print(f'Train countries (num samples): {train_labels} ({len(train)})')\n    print(f'Test countries (num samples): {test_labels} ({len(test)})')\n\n    # Split data into train/test\n    X_train = features.values[train]\n    X_test = features.values[test]\n    y_train = labels.values.ravel()[train]\n    y_test = labels.values.ravel()[test]\n\n    # print('Input shapes (X_train, X_test, y_train, y_test): ',np.shape(X_train), np.shape(X_test), np.shape(y_train), np.shape(y_test))\n\n    # Train model and get r2\n    model.fit(X_train, y_train)\n    split_r2 = r2_score(y_test, model.predict(X_test))\n    split_r2_list.append(split_r2)\n    print(f'Split r^2: {split_r2} \\n')\n\n    # Plot histogram of labels\n    fig, ax = plt.subplots(2,1, sharex=True, figsize=(5,4))\n    ax[0].hist(y_train)\n    ax[0].set_title(f'train countries: {train_labels}')\n    ax[1].hist(y_test)\n    ax[1].set_title(f'test countries: {test_labels}')\n    ax[1].set_xlabel('Wealth Index')\n    fig.suptitle(f'Split# {i+1} Labels (model $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\n    # Plot scatter plot\n    fig, ax = plt.subplots(1,1, figsize=(5,4))\n    ax.scatter(y_train, model.predict(X_train), label=\"train\")\n    ax.scatter(y_test, model.predict(X_test), label=\"test\")\n    ax.plot([0,1],[0,1], transform=ax.transAxes, linestyle='dashed', color='k')\n    ax.set_xlabel(\"True Value\")\n    ax.set_ylabel(\"Predicted Value\")\n    ax.legend()    \n    fig.suptitle(f'Split#{i+1} (test $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\nsplit_r2_mean = round(np.array(split_r2_list).mean(), 2)\nsplit_r2_std = round(np.array(split_r2_list).std(), 2)\nprint(f'Mean split r^2  (std): {split_r2_mean} ({split_r2_std})')\n\n\nSplit# 1\nTrain countries (num samples): {'TL', 'KH', 'MM'} (1507)\nTest countries (num samples): {'PH'} (1213)\nSplit r^2: 0.2681939802478136 \n\n\n\n\n\n\n\n\n\nSplit# 2\nTrain countries (num samples): {'PH', 'TL', 'MM'} (2109)\nTest countries (num samples): {'KH'} (611)\nSplit r^2: 0.5620765375311321 \n\n\n\n\n\n\n\n\n\nSplit# 3\nTrain countries (num samples): {'PH', 'MM', 'KH'} (2265)\nTest countries (num samples): {'TL'} (455)\nSplit r^2: 0.37906775021315475 \n\n\n\n\n\n\n\n\n\nSplit# 4\nTrain countries (num samples): {'PH', 'TL', 'KH'} (2279)\nTest countries (num samples): {'MM'} (441)\nSplit r^2: 0.4558949447788059 \n\n\n\n\n\n\n\n\n\nMean split r^2  (std): 0.42 (0.11)"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#exploratory-data-analysis",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#exploratory-data-analysis",
    "title": "Cross Country Model Training (Initial)",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nPer-country wealth index\n\ncountries_data['Wealth Index'].hist(by=countries_data['DHSCC'], figsize = (4,6),layout=(4,1),  sharex=True, xrot=0, bins=20)\nplt.suptitle('Wealth Index')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#per-country-features",
    "href": "notebooks/2023-01-24-dhs-cross-country-experiments/2023-01-24_crosscountry_initial.html#per-country-features",
    "title": "Cross Country Model Training (Initial)",
    "section": "Per-country features",
    "text": "Per-country features\n\nfeatures.columns\n\nIndex(['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count', 'bus_station_nearest', 'cafe_count',\n       'cafe_nearest', 'charging_station_count', 'charging_station_nearest',\n       'courthouse_count', 'courthouse_nearest', 'dentist_count',\n       'dentist_nearest', 'fast_food_count', 'fast_food_nearest',\n       'fire_station_count', 'fire_station_nearest', 'food_court_count',\n       'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count',\n       'hospital_nearest', 'library_count', 'library_nearest',\n       'marketplace_count', 'marketplace_nearest', 'pharmacy_count',\n       'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count',\n       'post_box_nearest', 'post_office_count', 'post_office_nearest',\n       'restaurant_count', 'restaurant_nearest', 'social_facility_count',\n       'social_facility_nearest', 'supermarket_count', 'supermarket_nearest',\n       'townhall_count', 'townhall_nearest', 'road_count',\n       'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean',\n       'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean',\n       'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean',\n       'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean',\n       'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean',\n       'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std',\n       'avg_rad_median'],\n      dtype='object')\n\n\n\nfeatures_list = [\n    'avg_rad_mean', \n    'avg_rad_median', \n    'fixed_2019_mean_avg_d_kbps_mean', \n    'fixed_2019_mean_avg_u_kbps_mean',\n    'fixed_2019_mean_avg_lat_ms_mean', \n    'fixed_2019_mean_num_tests_mean',\n    'fixed_2019_mean_num_devices_mean', \n    'mobile_2019_mean_avg_d_kbps_mean',\n    'mobile_2019_mean_avg_u_kbps_mean', \n    'mobile_2019_mean_avg_lat_ms_mean',\n    'mobile_2019_mean_num_tests_mean', \n    'mobile_2019_mean_num_devices_mean',\n]\n\nfor feature in features_list:\n    countries_data[feature].hist(by=countries_data['DHSCC'], figsize = (4,6),layout=(4,1), xrot=0, bins=20)\n    plt.suptitle(f'{feature} per country')\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html",
    "href": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html",
    "title": "Cross Country Model Training Initial",
    "section": "",
    "text": "In this notebook, we normalized each model feature by country to correct country-specific feature quirks, as well as the wealth index.\nThis method has been done in a similar study using DHS as training data and was also documented here.\nModels recover how relative values of input data (relative to other locations in that country) correlate with relative values of wealth (also relative to other locations in that country).\nThe current best model setup involves (1) normalizing all features per country using MinMaxScaler and (2) scaling the wealth index per country using StandardScaler\n\nimport sys\nsys.path.append(\"../../\")\n\nimport os\n\nimport uuid\nimport numpy as np\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely import wkt\n\nfrom geowrangler import dhs\nfrom povertymapping import settings, osm, ookla, nightlights\nfrom povertymapping.dhs import generate_dhs_cluster_level_data\nfrom povertymapping.osm import OsmDataManager\nfrom povertymapping.ookla import OoklaDataManager\nimport getpass\nimport pickle\n\nfrom sklearn.model_selection import train_test_split, KFold, RepeatedKFold\nfrom sklearn.model_selection import GroupKFold, cross_val_predict, cross_val_score, LeaveOneGroupOut\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler\nfrom sklearn.metrics import r2_score, confusion_matrix, ConfusionMatrixDisplay, classification_report\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport shap\n\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.11.1-CAPI-1.17.1) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.\n  warnings.warn(\n/home/jace/workspace/unicef-ai4d-poverty-mapping/env/lib/python3.9/site-packages/tqdm/auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n\n\n\n%reload_ext autoreload\n%autoreload 2"
  },
  {
    "objectID": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#set-up-data-access",
    "href": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#set-up-data-access",
    "title": "Cross Country Model Training Initial",
    "section": "Set up Data Access",
    "text": "Set up Data Access\n\n# # Instantiate data managers for Ookla and OSM\n# # This auto-caches requested data in RAM, so next fetches of the data are faster.\nosm_data_manager = OsmDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\nookla_data_manager = OoklaDataManager(cache_dir=settings.ROOT_DIR/\"data/data_cache\")\n\n\n# Log-in using EOG credentials\nusername = os.environ.get('EOG_USER',None)\nusername = username if username is not None else input('Username?')\npassword = os.environ.get('EOG_PASSWORD',None)\npassword = password if password is not None else getpass.getpass('Password?') \n\n# set save_token to True so that access token gets stored in ~/.eog_creds/eog_access_token\naccess_token = nightlights.get_eog_access_token(username,password, save_token=True)\n\n2023-03-01 12:43:31.340 | INFO     | povertymapping.nightlights:get_eog_access_token:48 - Saving access_token to ~/.eog_creds/eog_access_token\n2023-03-01 12:43:31.344 | INFO     | povertymapping.nightlights:get_eog_access_token:56 - Adding access token to environmentt var EOG_ACCESS_TOKEN"
  },
  {
    "objectID": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#load-countries-from-dhs-data",
    "href": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#load-countries-from-dhs-data",
    "title": "Cross Country Model Training Initial",
    "section": "Load Countries From DHS data",
    "text": "Load Countries From DHS data\n\n# Set country-specific variables\ncountry_config = {\n    'Philippines': {\n        'country_osm':'philippines',\n        'ookla_year': 2019,\n        'nightlights_year' : 2017,\n        'country_code': 'ph',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/ph/PHHR71DT/PHHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/ph/PHGE71FL/PHGE71FL.shp\"\n    },\n    'Timor Leste': {\n        'country_osm':'east-timor',\n        'ookla_year': 2019,\n        'nightlights_year' : 2016,\n        'country_code': 'tl',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/tl/TLHR71DT/TLHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/tl/TLGE71FL/TLGE71FL.shp\"\n    },\n    'Cambodia': {\n        'country_osm':'cambodia',\n        'ookla_year': 2019,\n        'nightlights_year' : 2014,\n        'country_code': 'kh',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/kh/KHHR73DT/KHHR73FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/kh/KHGE71FL/KHGE71FL.shp\"\n    },\n    'Myanmar': {\n        'country_osm':'myanmar',\n        'ookla_year': 2019,\n        'nightlights_year' : 2015,\n        'country_code': 'mm',\n        'dhs_household_dta_path' : settings.DATA_DIR/\"dhs/mm/MMHR71DT/MMHR71FL.DTA\",\n        'dhs_geographic_shp_path' : settings.DATA_DIR/\"dhs/mm/MMGE71FL/MMGE71FL.shp\"\n    }\n}\n\n\nCombine base features for all four countries\nThis section creates countries_data (pd.DataFrame) which combines DHS/Ookla/OSM/VIIRS data for all specified countries.\n\n%%time\n\n# Create list of dataframes per country, and list of all columns appearing in DHS columns\ncountry_data_list = []\ndhs_columns = ['DHSCLUST']\n\nfor country, config in country_config.items():\n    print(f'Loading data for {country}')\n\n    # Load the DHS cluster data\n    dhs_household_dta_path = config['dhs_household_dta_path']\n    dhs_geographic_shp_path = config['dhs_geographic_shp_path']\n    country_code = config['country_code']\n    dhs_gdf = generate_dhs_cluster_level_data(\n        dhs_household_dta_path, \n        dhs_geographic_shp_path, \n        col_rename_config=country_code,\n        convert_geoms_to_bbox=True,\n        bbox_size_km = 2.4\n    ).reset_index(drop=True)\n\n    dhs_columns = list(set(dhs_columns + list(dhs_gdf.columns)))\n    \n\n    # Generate base features for the dhs dataframe\n    country_data = dhs_gdf.copy()\n    country_osm = config['country_osm']\n    ookla_year = config['ookla_year']\n    nightlights_year = config['nightlights_year']\n    \n    # Add in OSM features\n    country_data = osm.add_osm_poi_features(country_data, country_osm, osm_data_manager)\n    country_data = osm.add_osm_road_features(country_data, country_osm, osm_data_manager)\n\n    # Add in Ookla features\n    country_data = ookla.add_ookla_features(country_data, 'fixed', ookla_year, ookla_data_manager)\n    country_data = ookla.add_ookla_features(country_data, 'mobile', ookla_year, ookla_data_manager)\n\n    # Add in the nighttime lights features\n    country_data = nightlights.generate_nightlights_feature(country_data, nightlights_year) \n\n    country_data_list.append(country_data)\n\n# Combine all country data into a single dataframe\ncountries_data = gpd.GeoDataFrame(pd.concat(country_data_list,ignore_index=True), crs=country_data_list[0].crs)\n\nLoading data for Philippines\n\n\n2023-03-01 12:44:30.214 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/philippines? True\n2023-03-01 12:44:30.215 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/philippines/gis_osm_pois_free_1.shp\n2023-03-01 12:44:38.110 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for philippines at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/philippines? True\n2023-03-01 12:44:38.111 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for philippines being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/philippines/gis_osm_roads_free_1.shp\n2023-03-01 12:45:49.999 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: []\n2023-03-01 12:45:50.000 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/2f858b388182d50703550c8ef9d321df.csv? True\n2023-03-01 12:45:50.001 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 2f858b388182d50703550c8ef9d321df) found in filesystem. Loading in cache.\n2023-03-01 12:45:50.487 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df']\n2023-03-01 12:45:50.489 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/5a45dc45080a935951e6c2b6c0052b13.csv? True\n2023-03-01 12:45:50.489 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 5a45dc45080a935951e6c2b6c0052b13) found in filesystem. Loading in cache.\n2023-03-01 12:45:51.035 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/295bf47ce6753c7f06ab79012b769f2a.tif\n\n\nLoading data for Timor Leste\n\n\n2023-03-01 12:46:04.071 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/east-timor? True\n2023-03-01 12:46:04.072 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/east-timor/gis_osm_pois_free_1.shp\n2023-03-01 12:46:05.380 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for east-timor at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/east-timor? True\n2023-03-01 12:46:05.380 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for east-timor being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/east-timor/gis_osm_roads_free_1.shp\n2023-03-01 12:46:06.131 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13']\n2023-03-01 12:46:06.133 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/206a0323fa0e80f82339b66d0c859b4a.csv? True\n2023-03-01 12:46:06.133 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 206a0323fa0e80f82339b66d0c859b4a) found in filesystem. Loading in cache.\n2023-03-01 12:46:06.248 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a']\n2023-03-01 12:46:06.249 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/209c2544788b8e2bdf4db4685c50e26d.csv? True\n2023-03-01 12:46:06.250 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 209c2544788b8e2bdf4db4685c50e26d) found in filesystem. Loading in cache.\n2023-03-01 12:46:06.381 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/b0d0551dd5a67c8eada595334f2655ed.tif\n\n\nLoading data for Cambodia\n\n\n2023-03-01 12:46:11.471 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/cambodia? True\n2023-03-01 12:46:11.473 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/cambodia/gis_osm_pois_free_1.shp\n2023-03-01 12:46:13.594 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for cambodia at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/cambodia? True\n2023-03-01 12:46:13.595 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for cambodia being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/cambodia/gis_osm_roads_free_1.shp\n2023-03-01 12:46:21.357 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d']\n2023-03-01 12:46:21.358 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/37f570ebc130cb44f9dba877fbda74e2.csv? True\n2023-03-01 12:46:21.358 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: 37f570ebc130cb44f9dba877fbda74e2) found in filesystem. Loading in cache.\n2023-03-01 12:46:21.568 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2']\n2023-03-01 12:46:21.571 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/1128a917060f7bb88c0a6260ed457091.csv? True\n2023-03-01 12:46:21.572 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 1128a917060f7bb88c0a6260ed457091) found in filesystem. Loading in cache.\n2023-03-01 12:46:21.809 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/4791e78094ba7e323fd5814b3f094a84.tif\n\n\nLoading data for Myanmar\n\n\n2023-03-01 12:46:29.604 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/myanmar? True\n2023-03-01 12:46:29.604 | DEBUG    | povertymapping.osm:load_pois:149 - OSM POIs for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/myanmar/gis_osm_pois_free_1.shp\n2023-03-01 12:46:32.503 | INFO     | povertymapping.osm:download_osm_country_data:187 - OSM Data: Cached data available for myanmar at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/myanmar? True\n2023-03-01 12:46:32.504 | DEBUG    | povertymapping.osm:load_roads:168 - OSM Roads for myanmar being loaded from /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/osm/myanmar/gis_osm_roads_free_1.shp\n2023-03-01 12:46:53.706 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091']\n2023-03-01 12:46:53.708 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/d72ec7e4d144b750e1c0950ecad081e0.csv? True\n2023-03-01 12:46:53.709 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, fixed 2019 (key: d72ec7e4d144b750e1c0950ecad081e0) found in filesystem. Loading in cache.\n2023-03-01 12:46:53.862 | DEBUG    | povertymapping.ookla:load_type_year_data:68 - Contents of data cache: ['2f858b388182d50703550c8ef9d321df', '5a45dc45080a935951e6c2b6c0052b13', '206a0323fa0e80f82339b66d0c859b4a', '209c2544788b8e2bdf4db4685c50e26d', '37f570ebc130cb44f9dba877fbda74e2', '1128a917060f7bb88c0a6260ed457091', 'd72ec7e4d144b750e1c0950ecad081e0']\n2023-03-01 12:46:53.863 | INFO     | povertymapping.ookla:load_type_year_data:83 - Cached data available at /home/jace/workspace/unicef-ai4d-poverty-mapping/notebooks/2023-02-15-dhs-corss-country-classfier-experiments/../../data/data_cache/ookla/processed/2aff65fdf8072457cba0d42873b7a9c2.csv? True\n2023-03-01 12:46:53.864 | DEBUG    | povertymapping.ookla:load_type_year_data:88 - Processed Ookla data for aoi, mobile 2019 (key: 2aff65fdf8072457cba0d42873b7a9c2) found in filesystem. Loading in cache.\n2023-03-01 12:46:54.047 | INFO     | povertymapping.nightlights:get_clipped_raster:414 - Retrieving clipped raster file /home/jace/.geowrangler/nightlights/clip/7a58f067614b6685cd9bb62d4d15a249.tif\n\n\nCPU times: user 2min 19s, sys: 1min, total: 3min 19s\nWall time: 3min 24s\n\n\n\n\nInspect the combined target country data\n\ncountries_data.info()\n\n<class 'geopandas.geodataframe.GeoDataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 86 columns):\n #   Column                             Non-Null Count  Dtype   \n---  ------                             --------------  -----   \n 0   DHSCLUST                           2720 non-null   int64   \n 1   Wealth Index                       2720 non-null   float64 \n 2   DHSID                              2720 non-null   object  \n 3   DHSCC                              2720 non-null   object  \n 4   DHSYEAR                            2720 non-null   float64 \n 5   CCFIPS                             2720 non-null   object  \n 6   ADM1FIPS                           2720 non-null   object  \n 7   ADM1FIPSNA                         2720 non-null   object  \n 8   ADM1SALBNA                         2720 non-null   object  \n 9   ADM1SALBCO                         2720 non-null   object  \n 10  ADM1DHS                            2720 non-null   float64 \n 11  ADM1NAME                           2720 non-null   object  \n 12  DHSREGCO                           2720 non-null   float64 \n 13  DHSREGNA                           2720 non-null   object  \n 14  SOURCE                             2720 non-null   object  \n 15  URBAN_RURA                         2720 non-null   object  \n 16  LATNUM                             2720 non-null   float64 \n 17  LONGNUM                            2720 non-null   float64 \n 18  ALT_GPS                            2720 non-null   float64 \n 19  ALT_DEM                            2720 non-null   float64 \n 20  DATUM                              2720 non-null   object  \n 21  geometry                           2720 non-null   geometry\n 22  poi_count                          2720 non-null   float64 \n 23  atm_count                          2720 non-null   float64 \n 24  atm_nearest                        2720 non-null   float64 \n 25  bank_count                         2720 non-null   float64 \n 26  bank_nearest                       2720 non-null   float64 \n 27  bus_station_count                  2720 non-null   float64 \n 28  bus_station_nearest                2720 non-null   float64 \n 29  cafe_count                         2720 non-null   float64 \n 30  cafe_nearest                       2720 non-null   float64 \n 31  charging_station_count             2720 non-null   float64 \n 32  charging_station_nearest           2720 non-null   float64 \n 33  courthouse_count                   2720 non-null   float64 \n 34  courthouse_nearest                 2720 non-null   float64 \n 35  dentist_count                      2720 non-null   float64 \n 36  dentist_nearest                    2720 non-null   float64 \n 37  fast_food_count                    2720 non-null   float64 \n 38  fast_food_nearest                  2720 non-null   float64 \n 39  fire_station_count                 2720 non-null   float64 \n 40  fire_station_nearest               2720 non-null   float64 \n 41  food_court_count                   2720 non-null   float64 \n 42  food_court_nearest                 2720 non-null   float64 \n 43  fuel_count                         2720 non-null   float64 \n 44  fuel_nearest                       2720 non-null   float64 \n 45  hospital_count                     2720 non-null   float64 \n 46  hospital_nearest                   2720 non-null   float64 \n 47  library_count                      2720 non-null   float64 \n 48  library_nearest                    2720 non-null   float64 \n 49  marketplace_count                  2720 non-null   float64 \n 50  marketplace_nearest                2720 non-null   float64 \n 51  pharmacy_count                     2720 non-null   float64 \n 52  pharmacy_nearest                   2720 non-null   float64 \n 53  police_count                       2720 non-null   float64 \n 54  police_nearest                     2720 non-null   float64 \n 55  post_box_count                     2720 non-null   float64 \n 56  post_box_nearest                   2720 non-null   float64 \n 57  post_office_count                  2720 non-null   float64 \n 58  post_office_nearest                2720 non-null   float64 \n 59  restaurant_count                   2720 non-null   float64 \n 60  restaurant_nearest                 2720 non-null   float64 \n 61  social_facility_count              2720 non-null   float64 \n 62  social_facility_nearest            2720 non-null   float64 \n 63  supermarket_count                  2720 non-null   float64 \n 64  supermarket_nearest                2720 non-null   float64 \n 65  townhall_count                     2720 non-null   float64 \n 66  townhall_nearest                   2720 non-null   float64 \n 67  road_count                         2720 non-null   float64 \n 68  fixed_2019_mean_avg_d_kbps_mean    1443 non-null   float64 \n 69  fixed_2019_mean_avg_u_kbps_mean    1443 non-null   float64 \n 70  fixed_2019_mean_avg_lat_ms_mean    1443 non-null   float64 \n 71  fixed_2019_mean_num_tests_mean     1443 non-null   float64 \n 72  fixed_2019_mean_num_devices_mean   1443 non-null   float64 \n 73  mobile_2019_mean_avg_d_kbps_mean   1707 non-null   float64 \n 74  mobile_2019_mean_avg_u_kbps_mean   1707 non-null   float64 \n 75  mobile_2019_mean_avg_lat_ms_mean   1707 non-null   float64 \n 76  mobile_2019_mean_num_tests_mean    1707 non-null   float64 \n 77  mobile_2019_mean_num_devices_mean  1707 non-null   float64 \n 78  avg_rad_min                        2720 non-null   float64 \n 79  avg_rad_max                        2720 non-null   float64 \n 80  avg_rad_mean                       2720 non-null   float64 \n 81  avg_rad_std                        2720 non-null   float64 \n 82  avg_rad_median                     2720 non-null   float64 \n 83  F21                                0 non-null      object  \n 84  F22                                0 non-null      object  \n 85  F23                                0 non-null      object  \ndtypes: float64(69), geometry(1), int64(1), object(15)\nmemory usage: 1.8+ MB\n\n\n\n# Check if DHS CC can be used as a country grouping column\ncountries_data['DHSCC'].value_counts()\n\nPH    1213\nKH     611\nTL     455\nMM     441\nName: DHSCC, dtype: int64\n\n\n\n# Explore as a map with first 30 columns in tooltip\n#countries_data.iloc[:, :30].explore()"
  },
  {
    "objectID": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#data-preparation",
    "href": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#data-preparation",
    "title": "Cross Country Model Training Initial",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nSplit into labels and features\n\n# Set parameters\nlabel_col = 'Wealth Index'\ngroup_col = 'DHSCC'\n##normalize_labels = 'single-country' # False, 'cross-country' or 'single_country'\nnormalize_labels = 'cross-country'\n\n\ndrop_cols = ['DHSID', 'DHSYEAR', 'CCFIPS',\n       'ADM1FIPS', 'ADM1FIPSNA', 'ADM1SALBNA', 'ADM1SALBCO', 'ADM1DHS',\n       'ADM1NAME', 'DHSREGCO', 'DHSREGNA', 'SOURCE', 'LATNUM',\n       'LONGNUM', 'ALT_GPS', 'ALT_DEM', 'DATUM','F21','F22','F23','URBAN_RURA']\n\n\n# Split train/test data into features and labels\n\n# For labels, we just select the target label column\nlabels = countries_data[[label_col]]\n\n# For features, drop all columns from the input dhs files\n# If you need the cluster data, refer to country_data / country_test\nfeatures = countries_data.drop(drop_cols, axis=1).copy()\n\nfeatures.shape, labels.shape\n\n((2720, 65), (2720, 1))\n\n\n\n\nNormalize labels and features\n\ndef scale_col(X,scaler):\n    X_ = np.atleast_2d(X)\n    return pd.DataFrame(scaler.fit_transform(X_), X.index)\n\n\nfeature_cols = features.columns[4:].tolist()\nprint(feature_cols)\n\n['poi_count', 'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest', 'bus_station_count', 'bus_station_nearest', 'cafe_count', 'cafe_nearest', 'charging_station_count', 'charging_station_nearest', 'courthouse_count', 'courthouse_nearest', 'dentist_count', 'dentist_nearest', 'fast_food_count', 'fast_food_nearest', 'fire_station_count', 'fire_station_nearest', 'food_court_count', 'food_court_nearest', 'fuel_count', 'fuel_nearest', 'hospital_count', 'hospital_nearest', 'library_count', 'library_nearest', 'marketplace_count', 'marketplace_nearest', 'pharmacy_count', 'pharmacy_nearest', 'police_count', 'police_nearest', 'post_box_count', 'post_box_nearest', 'post_office_count', 'post_office_nearest', 'restaurant_count', 'restaurant_nearest', 'social_facility_count', 'social_facility_nearest', 'supermarket_count', 'supermarket_nearest', 'townhall_count', 'townhall_nearest', 'road_count', 'fixed_2019_mean_avg_d_kbps_mean', 'fixed_2019_mean_avg_u_kbps_mean', 'fixed_2019_mean_avg_lat_ms_mean', 'fixed_2019_mean_num_tests_mean', 'fixed_2019_mean_num_devices_mean', 'mobile_2019_mean_avg_d_kbps_mean', 'mobile_2019_mean_avg_u_kbps_mean', 'mobile_2019_mean_avg_lat_ms_mean', 'mobile_2019_mean_num_tests_mean', 'mobile_2019_mean_num_devices_mean', 'avg_rad_min', 'avg_rad_max', 'avg_rad_mean', 'avg_rad_std', 'avg_rad_median']\n\n\n\n#scale features\nscaler = StandardScaler()\nfor col in feature_cols:\n    print(col)\n    features[col+'_scaled'] = features.groupby(group_col, group_keys=False)[[col]].apply(scale_col, scaler=scaler)\nprint(features.columns)\n\npoi_count\natm_count\natm_nearest\nbank_count\nbank_nearest\nbus_station_count\nbus_station_nearest\ncafe_count\ncafe_nearest\ncharging_station_count\ncharging_station_nearest\ncourthouse_count\ncourthouse_nearest\ndentist_count\ndentist_nearest\nfast_food_count\nfast_food_nearest\nfire_station_count\nfire_station_nearest\nfood_court_count\nfood_court_nearest\nfuel_count\nfuel_nearest\nhospital_count\nhospital_nearest\nlibrary_count\nlibrary_nearest\nmarketplace_count\nmarketplace_nearest\npharmacy_count\npharmacy_nearest\npolice_count\npolice_nearest\npost_box_count\npost_box_nearest\npost_office_count\npost_office_nearest\nrestaurant_count\nrestaurant_nearest\nsocial_facility_count\nsocial_facility_nearest\nsupermarket_count\nsupermarket_nearest\ntownhall_count\ntownhall_nearest\nroad_count\nfixed_2019_mean_avg_d_kbps_mean\nfixed_2019_mean_avg_u_kbps_mean\nfixed_2019_mean_avg_lat_ms_mean\nfixed_2019_mean_num_tests_mean\nfixed_2019_mean_num_devices_mean\nmobile_2019_mean_avg_d_kbps_mean\nmobile_2019_mean_avg_u_kbps_mean\nmobile_2019_mean_avg_lat_ms_mean\nmobile_2019_mean_num_tests_mean\nmobile_2019_mean_num_devices_mean\navg_rad_min\navg_rad_max\navg_rad_mean\navg_rad_std\navg_rad_median\nIndex(['DHSCLUST', 'Wealth Index', 'DHSCC', 'geometry', 'poi_count',\n       'atm_count', 'atm_nearest', 'bank_count', 'bank_nearest',\n       'bus_station_count',\n       ...\n       'mobile_2019_mean_avg_d_kbps_mean_scaled',\n       'mobile_2019_mean_avg_u_kbps_mean_scaled',\n       'mobile_2019_mean_avg_lat_ms_mean_scaled',\n       'mobile_2019_mean_num_tests_mean_scaled',\n       'mobile_2019_mean_num_devices_mean_scaled', 'avg_rad_min_scaled',\n       'avg_rad_max_scaled', 'avg_rad_mean_scaled', 'avg_rad_std_scaled',\n       'avg_rad_median_scaled'],\n      dtype='object', length=126)\n\n\n\n# fill nas with 0\nfeatures = features.fillna(0)\n\n\n# # scale labels\nscaler = StandardScaler()\nlabels = countries_data[[group_col,label_col]].groupby(group_col, group_keys=False)[[label_col]].apply(scale_col, scaler=scaler)\nplt.hist(labels)\n\n(array([ 16.,  85., 442., 702., 533., 379., 308., 179.,  68.,   8.]),\n array([-2.65317484, -2.0616477 , -1.47012056, -0.87859342, -0.28706627,\n         0.30446087,  0.89598801,  1.48751515,  2.0790423 ,  2.67056944,\n         3.26209658]),\n <BarContainer object of 10 artists>)\n\n\n\n\n\n\n# keep only scaled columns\nfeatures = features[[col+'_scaled' for col in feature_cols]]\n\n\n\nBase Features List\nThe features can be subdivided by the source dataset\n\nOSM\n\n<poi type>_count: number of points of interest (POI) of a specified type in that area\n\nex. atm_count: number of atms in cluster\npoi_count: number of all POIs of all types in cluster\n\n<poi_type>_nearest: distance of nearest POI of the specified type\n\nex. atm_nearest: distance of nearest ATM from that cluster\n\nOSM POI types included: atm, bank, bus_stations, cafe, charging_station, courthouse, dentist (clinic), fast_food, fire_station, food_court, fuel (gas station), hospital, library, marketplace, pharmacy, police, post_box, post_office, restaurant, social_facility, supermarket, townhall, road\n\n\n\nOokla\nThe network metrics features follow the following name convention:\n\n<type>_<year>_<yearly aggregate>_<network variable>_<cluster aggregate>\n\n\ntype: kind of network connection measured\n\nfixed: connection from fixed sources (landline, fiber, etc.)\nmobile: connection from mobile devices\n\nyear: Year of source data\nyearly aggregate: How data was aggregated into yearly data\n\nNote: Ookla provides data per quarter, so a yearly mean takes the average across 4 quarters\nFor this model, we only aggregate by yearly mean\n\nnetwork variable: network characteristic described\n\navg_d_kbps: average download speed in kbps\navg_u_kbps: average upload speed in kbps\navg_lat_ms: average latency in ms\nnum_devices: number of devices measured\n\ncluster aggregate: how the data was aggregated per cluster aggregate\n\nTypes: min, mean, max, median, std.\n\nFor this model: only mean is used\n\nThis is calculated using area zonal stats, which weighs the average by the intersection of the Ookla tile with the cluster geometry.\n\n\nEx. fixed_2019_mean_avg_d_kbps_median takes the cluster median of 2019 yearly average download speed.\n\n\nNightlights (VIIRS)\nAll nightlights features are taken as the zonal aggregate of the raster data per cluster\n\nex. avg_rad_mean: cluster mean of the average radiance\naggregations used: min, mean, max, median\n\n\nfeatures.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2720 entries, 0 to 2719\nData columns (total 61 columns):\n #   Column                                    Non-Null Count  Dtype  \n---  ------                                    --------------  -----  \n 0   poi_count_scaled                          2720 non-null   float64\n 1   atm_count_scaled                          2720 non-null   float64\n 2   atm_nearest_scaled                        2720 non-null   float64\n 3   bank_count_scaled                         2720 non-null   float64\n 4   bank_nearest_scaled                       2720 non-null   float64\n 5   bus_station_count_scaled                  2720 non-null   float64\n 6   bus_station_nearest_scaled                2720 non-null   float64\n 7   cafe_count_scaled                         2720 non-null   float64\n 8   cafe_nearest_scaled                       2720 non-null   float64\n 9   charging_station_count_scaled             2720 non-null   float64\n 10  charging_station_nearest_scaled           2720 non-null   float64\n 11  courthouse_count_scaled                   2720 non-null   float64\n 12  courthouse_nearest_scaled                 2720 non-null   float64\n 13  dentist_count_scaled                      2720 non-null   float64\n 14  dentist_nearest_scaled                    2720 non-null   float64\n 15  fast_food_count_scaled                    2720 non-null   float64\n 16  fast_food_nearest_scaled                  2720 non-null   float64\n 17  fire_station_count_scaled                 2720 non-null   float64\n 18  fire_station_nearest_scaled               2720 non-null   float64\n 19  food_court_count_scaled                   2720 non-null   float64\n 20  food_court_nearest_scaled                 2720 non-null   float64\n 21  fuel_count_scaled                         2720 non-null   float64\n 22  fuel_nearest_scaled                       2720 non-null   float64\n 23  hospital_count_scaled                     2720 non-null   float64\n 24  hospital_nearest_scaled                   2720 non-null   float64\n 25  library_count_scaled                      2720 non-null   float64\n 26  library_nearest_scaled                    2720 non-null   float64\n 27  marketplace_count_scaled                  2720 non-null   float64\n 28  marketplace_nearest_scaled                2720 non-null   float64\n 29  pharmacy_count_scaled                     2720 non-null   float64\n 30  pharmacy_nearest_scaled                   2720 non-null   float64\n 31  police_count_scaled                       2720 non-null   float64\n 32  police_nearest_scaled                     2720 non-null   float64\n 33  post_box_count_scaled                     2720 non-null   float64\n 34  post_box_nearest_scaled                   2720 non-null   float64\n 35  post_office_count_scaled                  2720 non-null   float64\n 36  post_office_nearest_scaled                2720 non-null   float64\n 37  restaurant_count_scaled                   2720 non-null   float64\n 38  restaurant_nearest_scaled                 2720 non-null   float64\n 39  social_facility_count_scaled              2720 non-null   float64\n 40  social_facility_nearest_scaled            2720 non-null   float64\n 41  supermarket_count_scaled                  2720 non-null   float64\n 42  supermarket_nearest_scaled                2720 non-null   float64\n 43  townhall_count_scaled                     2720 non-null   float64\n 44  townhall_nearest_scaled                   2720 non-null   float64\n 45  road_count_scaled                         2720 non-null   float64\n 46  fixed_2019_mean_avg_d_kbps_mean_scaled    2720 non-null   float64\n 47  fixed_2019_mean_avg_u_kbps_mean_scaled    2720 non-null   float64\n 48  fixed_2019_mean_avg_lat_ms_mean_scaled    2720 non-null   float64\n 49  fixed_2019_mean_num_tests_mean_scaled     2720 non-null   float64\n 50  fixed_2019_mean_num_devices_mean_scaled   2720 non-null   float64\n 51  mobile_2019_mean_avg_d_kbps_mean_scaled   2720 non-null   float64\n 52  mobile_2019_mean_avg_u_kbps_mean_scaled   2720 non-null   float64\n 53  mobile_2019_mean_avg_lat_ms_mean_scaled   2720 non-null   float64\n 54  mobile_2019_mean_num_tests_mean_scaled    2720 non-null   float64\n 55  mobile_2019_mean_num_devices_mean_scaled  2720 non-null   float64\n 56  avg_rad_min_scaled                        2720 non-null   float64\n 57  avg_rad_max_scaled                        2720 non-null   float64\n 58  avg_rad_mean_scaled                       2720 non-null   float64\n 59  avg_rad_std_scaled                        2720 non-null   float64\n 60  avg_rad_median_scaled                     2720 non-null   float64\ndtypes: float64(61)\nmemory usage: 1.3 MB"
  },
  {
    "objectID": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#model-training",
    "href": "notebooks/2023-02-15-dhs-cross-country-classifier-experiments/2023-02-15_crosscountry_normalized_classifier.html#model-training",
    "title": "Cross Country Model Training Initial",
    "section": "Model Training",
    "text": "Model Training\n\n# Set parameters\ngroupkfold_col = 'DHSCC'\n# cv_num_splits = 5\n# cv_num_repeats = 5\ntrain_test_seed = 42\ntest_size = 0.2\n\n\nCreate train/test cross-validation indices\n\n# train_features, test_features, train_labels, test_labels = train_test_split(\n#     features, labels, test_size=test_size, random_state=train_test_seed\n# )\n\n# Cross validation\nprint(f\"Performing GroupKFold CV with groups based on DHSCC...\")\ngroups = countries_data[groupkfold_col].values\ncv = GroupKFold(n_splits = len(set(groups)))\n\nprint(cv.split(features, groups=groups))\nprint(f'Number of splits based on DHSCC unique values: {cv.get_n_splits()}')\n\nPerforming GroupKFold CV with groups based on DHSCC...\n<generator object _BaseKFold.split at 0x7f07648a0040>\nNumber of splits based on DHSCC unique values: 4\n\n\n\n\nInstantiate model\nFor now, we will train a simple random forest model\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=100, random_state=train_test_seed, verbose=0)\nmodel\n\nRandomForestRegressor(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestRegressorRandomForestRegressor(random_state=42)\n\n\n\n\nEvaluate model training using cross-validation\nWe evalute the model’s generalizability when training over different train/test splits\nIdeally for R^2\n\nWe want a high mean: This means that we achieve a high model performance over the different train/test splits\nWe want a low standard deviation (std): This means that the model performance is stable over multiple training repetitions\n\nAfterwards, we label the predicted wealth index by binning them into 5 categories |Category |Description| |—|—————–| | A | high income | | B | mid-high income | | C | middle income | | D | mid-low income | | E | low income |\nWe can then generate matrix-based metrics to assess the performance. We plot the confusion matrix and the classification report for:\n\nall 5 catergories, and\ngrouped into poor (DE), middle (C) and rich (AB)\n\n\ndef categorize_wealth_index(y, type='quantile', split_quantile=True, retbins=False):\n    \"\"\"\n    Classifies wealth index into 5 categories (A = \"wealthiest\" -> E = \"poorest\")\n    Args:\n        y(pd.Series): input wealth index (scaled)\n        type (str): 'fixed' or 'quantile'. `fixed` uses bins spaced by 1 centered at 0, while `quantile` uses the quintiles generated from the input\n        split_quantile (bool): if True, splits the range into positive and negative parts and computes quintiles for each. \n        The resulting final quintile is obtained by taking every other quintile bound from the combined quintiles of the positive and negative parts.\n        If False, use plain quantiles\n        retbins (bool): if True, return the bin bounds used in the categorization.\n    returns:\n        y_cat (list)= list containing the categorized input (A = \"wealthiest\" -> E = \"poorest\")\n\n    \"\"\"\n    class_label = ['E','D','C','B','A']\n    if type == 'fixed':\n        cat_bins = [-10,-1.5,-0.5,0.5,1.5,10]\n        y_cat = pd.cut(y, bins= cat_bins, labels=class_label).tolist()\n    elif type == 'quantile':\n        if split_quantile:\n            _,low_bins = pd.qcut(y[y<=0], q= 5, retbins=True)\n            _,high_bins = pd.qcut(y[y>0], q= 5, retbins=True)\n            cat_bins = low_bins[::2].tolist()+high_bins[1::2].tolist()\n            y_cat = pd.cut(y, bins= cat_bins, labels=class_label).tolist()\n        else:\n            y_cat,cat_bins= pd.qcut(y, q= 5, labels=class_label,retbins=True).tolist()\n    if retbins:\n        return y_cat \n    else:\n        return y_cat,cat_bins \n\nWe recommend using the split quantile configuration (type='quantile', split_quantile=True) but feel free to explore the other ones\n\nsplit_r2_list = []\n\nfor i, (train, test) in enumerate(cv.split(features, labels,groups=groups)):\n    print(f'Split# {i+1}')\n\n    # Print info about current split\n    train_labels = set(groups[train])\n    test_labels = set(groups[test])\n    print(f'Train countries (num samples): {train_labels} ({len(train)})')\n    print(f'Test countries (num samples): {test_labels} ({len(test)})')\n\n    # Split data into train/test\n    X_train = features.values[train]\n    X_test = features.values[test]\n    y_train = labels.values.ravel()[train]\n    y_test = labels.values.ravel()[test]\n\n    # print('Input shapes (X_train, X_test, y_train, y_test): ',np.shape(X_train), np.shape(X_test), np.shape(y_train), np.shape(y_test))\n\n    # Train model and get r2\n    model.fit(X_train, y_train)\n    #get ypred\n    y_pred = model.predict(X_test)\n    split_r2 = r2_score(y_test, y_pred)\n    split_r2_list.append(split_r2)\n    print(f'Split r^2: {split_r2} \\n')\n\n    # Plot histogram of labels\n    fig, ax = plt.subplots(2,1, sharex=True, figsize=(5,4))\n    ax[0].hist(y_train)\n    ax[0].set_title(f'train countries: {train_labels}')\n    ax[1].hist(y_test)\n    ax[1].set_title(f'test countries: {test_labels}')\n    ax[1].set_xlabel('Wealth Index')\n    fig.suptitle(f'Split# {i+1} Labels (model $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\n    # Plot scatter plot\n    fig, ax = plt.subplots(1,1, figsize=(5,4))\n    ax.scatter(y_train, model.predict(X_train), label=\"train\")\n    ax.scatter(y_test, model.predict(X_test), label=\"test\")\n    ax.plot([0,1],[0,1], transform=ax.transAxes, linestyle='dashed', color='k')\n    ax.set_xlabel(\"True Value\")\n    ax.set_ylabel(\"Predicted Value\")\n    ax.legend()    \n    fig.suptitle(f'Split#{i+1} (test $r^2 = {round(split_r2,2)}$)')\n    plt.tight_layout()\n    plt.show()\n\n    # Apply classifier\n    y_pred_cats, y_pred_bins = categorize_wealth_index(y_pred, type='quantile', split_quantile=True, retbins=False)\n    y_test_cats, y_test_bins = categorize_wealth_index(y_test, type='quantile', split_quantile=True, retbins=False)\n    # plot confusion matrix\n    class_label = ['A','B','C','D','E']\n    cm = confusion_matrix(y_test_cats, y_pred_cats, labels = class_label)\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_label)\n    disp.plot()\n    disp.ax_.set_title(f'Test country: {test_labels}')\n    #print classification_report\n    print(classification_report(y_test_cats, y_pred_cats, labels=class_label))\n\n    # Group labels\n    class_label_grouped = ['AB','C','DE']\n    y_pred_cats_grouped = ['AB' if y in ['A','B'] else 'DE' if y in ['D','E'] else y for y in y_pred_cats]\n    y_test_cats_grouped = ['AB' if y in ['A','B'] else 'DE' if y in ['D','E'] else y for y in y_test_cats]\n    # plot confusion matrix\n    cm = confusion_matrix(y_test_cats_grouped, y_pred_cats_grouped, labels = class_label_grouped)\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_label_grouped)\n    disp.plot()\n\n    #print classification_report\n    disp.ax_.set_title(f'Test country: {test_labels}')\n    print(classification_report(y_test_cats_grouped, y_pred_cats_grouped, labels=class_label_grouped))\n\nsplit_r2_mean = round(np.array(split_r2_list).mean(), 4)\nsplit_r2_std = round(np.array(split_r2_list).std(), 4)\nprint(f'Mean split r^2  (std): {split_r2_mean} ({split_r2_std})')\n\n\nSplit# 1\nTrain countries (num samples): {'KH', 'TL', 'MM'} (1507)\nTest countries (num samples): {'PH'} (1213)\nSplit r^2: 0.48054801637734346 \n\n\n\n\n\n\n\n\n\n              precision    recall  f1-score   support\n\n           A       0.61      0.49      0.54       229\n           B       0.33      0.27      0.30       229\n           C       0.30      0.30      0.30       243\n           D       0.34      0.39      0.36       256\n           E       0.57      0.67      0.62       255\n\n   micro avg       0.43      0.43      0.43      1212\n   macro avg       0.43      0.42      0.42      1212\nweighted avg       0.43      0.43      0.42      1212\n\n              precision    recall  f1-score   support\n\n          AB       0.79      0.64      0.71       458\n           C       0.30      0.30      0.30       243\n          DE       0.69      0.82      0.75       511\n\n   micro avg       0.64      0.64      0.64      1212\n   macro avg       0.59      0.58      0.58      1212\nweighted avg       0.65      0.64      0.64      1212\n\nSplit# 2\nTrain countries (num samples): {'TL', 'PH', 'MM'} (2109)\nTest countries (num samples): {'KH'} (611)\nSplit r^2: 0.5834437437650173 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              precision    recall  f1-score   support\n\n           A       0.61      0.85      0.71        98\n           B       0.24      0.34      0.28        98\n           C       0.33      0.34      0.33       122\n           D       0.41      0.31      0.35       146\n           E       0.58      0.43      0.50       146\n\n   micro avg       0.43      0.43      0.43       610\n   macro avg       0.44      0.45      0.44       610\nweighted avg       0.44      0.43      0.43       610\n\n              precision    recall  f1-score   support\n\n          AB       0.63      0.87      0.73       196\n           C       0.33      0.34      0.33       122\n          DE       0.82      0.61      0.70       292\n\n   micro avg       0.64      0.64      0.64       610\n   macro avg       0.60      0.61      0.59       610\nweighted avg       0.66      0.64      0.64       610\n\nSplit# 3\nTrain countries (num samples): {'KH', 'PH', 'MM'} (2265)\nTest countries (num samples): {'TL'} (455)\nSplit r^2: 0.5350537480791098 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              precision    recall  f1-score   support\n\n           A       0.77      0.60      0.68        78\n           B       0.41      0.32      0.36        78\n           C       0.28      0.29      0.28        91\n           D       0.35      0.40      0.38       104\n           E       0.39      0.46      0.42       103\n\n   micro avg       0.41      0.41      0.41       454\n   macro avg       0.44      0.41      0.42       454\nweighted avg       0.43      0.41      0.42       454\n\n              precision    recall  f1-score   support\n\n          AB       0.82      0.64      0.72       156\n           C       0.28      0.29      0.28        91\n          DE       0.68      0.78      0.72       207\n\n   micro avg       0.63      0.63      0.63       454\n   macro avg       0.59      0.57      0.58       454\nweighted avg       0.65      0.63      0.63       454\n\nSplit# 4\nTrain countries (num samples): {'KH', 'TL', 'PH'} (2279)\nTest countries (num samples): {'MM'} (441)\nSplit r^2: 0.5055486937348812 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              precision    recall  f1-score   support\n\n           A       0.70      0.62      0.66        72\n           B       0.38      0.33      0.35        72\n           C       0.28      0.28      0.28        89\n           D       0.29      0.31      0.30       104\n           E       0.44      0.48      0.46       103\n\n   micro avg       0.40      0.40      0.40       440\n   macro avg       0.42      0.40      0.41       440\nweighted avg       0.40      0.40      0.40       440\n\n              precision    recall  f1-score   support\n\n          AB       0.77      0.69      0.73       144\n           C       0.28      0.28      0.28        89\n          DE       0.68      0.73      0.71       207\n\n   micro avg       0.63      0.63      0.63       440\n   macro avg       0.58      0.57      0.57       440\nweighted avg       0.63      0.63      0.63       440\n\nMean split r^2  (std): 0.5261 (0.0383)\n\n\n\n\n\n\n\n\n\n\nModel Explanability\nWe gauge a feature’s importance to the predictions via SHAP\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(features)\n\n\nshap.summary_plot(shap_values, features, feature_names=features.columns, plot_type=\"bar\")"
  }
]